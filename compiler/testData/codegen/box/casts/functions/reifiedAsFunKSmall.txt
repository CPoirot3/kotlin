MODULE <test-module>
  FILE /reifiedAsFunKSmall.kt
    FUN public fun fn0(): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn1(x: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public inline fun <reified T> reifiedAsSucceeds(x: kotlin.Any, operation: kotlin.String): kotlin.Unit
      BLOCK_BODY
        TRY_CATCH type=T
          try: BLOCK type=T operator=null
            TYPE_OP operator=CAST typeOperand=T
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
          catch e: BLOCK type=kotlin.Nothing operator=null
            THROW type=kotlin.Nothing
              CALL 'constructor AssertionError(Any!)' type=java.lang.AssertionError operator=null
                p0: STRING_CONCATENATION type=kotlin.String
                  GET_VAR 'value-parameter operation: String' type=kotlin.String operator=null
                  CONST String type=kotlin.String value=': should not throw exceptions, got '
                  GET_VAR 'e: Throwable' type=kotlin.Throwable operator=null
    FUN public inline fun <reified T> reifiedAsFailsWithCCE(x: kotlin.Any, operation: kotlin.String): kotlin.Unit
      BLOCK_BODY
        TRY_CATCH type=T
          try: BLOCK type=T operator=null
            TYPE_OP operator=CAST typeOperand=T
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
          catch e: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from='reifiedAsFailsWithCCE(Any, String): Unit'
          catch e: BLOCK type=kotlin.Nothing operator=null
            THROW type=kotlin.Nothing
              CALL 'constructor AssertionError(Any!)' type=java.lang.AssertionError operator=null
                p0: STRING_CONCATENATION type=kotlin.String
                  GET_VAR 'value-parameter operation: String' type=kotlin.String operator=null
                  CONST String type=kotlin.String value=': should throw ClassCastException, got '
                  GET_VAR 'e: Throwable' type=kotlin.Throwable operator=null
        THROW type=kotlin.Nothing
          CALL 'constructor AssertionError(Any!)' type=java.lang.AssertionError operator=null
            p0: STRING_CONCATENATION type=kotlin.String
              GET_VAR 'value-parameter operation: String' type=kotlin.String operator=null
              CONST String type=kotlin.String value=': should fail with CCE, no exception thrown'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val f0: kotlin.Any
          TYPE_OP operator=CAST typeOperand=kotlin.Any
            CALLABLE_REFERENCE 'fn0(): Unit' type=kotlin.reflect.KFunction0<kotlin.Unit> operator=null
        VAR val f1: kotlin.Any
          TYPE_OP operator=CAST typeOperand=kotlin.Any
            CALLABLE_REFERENCE 'fn1(Any): Unit' type=kotlin.reflect.KFunction1<kotlin.Any, kotlin.Unit> operator=null
        CALL 'reifiedAsSucceeds(Any, String): Unit' type=kotlin.Unit operator=null
          x: GET_VAR 'f0: Any' type=kotlin.Any operator=null
          operation: CONST String type=kotlin.String value='f0 as Function0<*>'
        CALL 'reifiedAsFailsWithCCE(Any, String): Unit' type=kotlin.Unit operator=null
          x: GET_VAR 'f0: Any' type=kotlin.Any operator=null
          operation: CONST String type=kotlin.String value='f0 as Function1<*, *>'
        CALL 'reifiedAsFailsWithCCE(Any, String): Unit' type=kotlin.Unit operator=null
          x: GET_VAR 'f1: Any' type=kotlin.Any operator=null
          operation: CONST String type=kotlin.String value='f1 as Function0<*>'
        CALL 'reifiedAsSucceeds(Any, String): Unit' type=kotlin.Unit operator=null
          x: GET_VAR 'f1: Any' type=kotlin.Any operator=null
          operation: CONST String type=kotlin.String value='f1 as Function1<*, *>'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
