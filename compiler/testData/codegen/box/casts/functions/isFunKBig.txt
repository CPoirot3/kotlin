MODULE <test-module>
  FILE /isFunKBig.kt
    FUN public fun fn0(): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn1(x0: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn2(x0: kotlin.Any, x1: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn3(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn4(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn5(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn6(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn7(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn8(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any, x7: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn9(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any, x7: kotlin.Any, x8: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn10(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any, x7: kotlin.Any, x8: kotlin.Any, x9: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn11(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any, x7: kotlin.Any, x8: kotlin.Any, x9: kotlin.Any, x10: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn12(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any, x7: kotlin.Any, x8: kotlin.Any, x9: kotlin.Any, x10: kotlin.Any, x11: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn13(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any, x7: kotlin.Any, x8: kotlin.Any, x9: kotlin.Any, x10: kotlin.Any, x11: kotlin.Any, x12: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn14(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any, x7: kotlin.Any, x8: kotlin.Any, x9: kotlin.Any, x10: kotlin.Any, x11: kotlin.Any, x12: kotlin.Any, x13: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn15(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any, x7: kotlin.Any, x8: kotlin.Any, x9: kotlin.Any, x10: kotlin.Any, x11: kotlin.Any, x12: kotlin.Any, x13: kotlin.Any, x14: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn16(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any, x7: kotlin.Any, x8: kotlin.Any, x9: kotlin.Any, x10: kotlin.Any, x11: kotlin.Any, x12: kotlin.Any, x13: kotlin.Any, x14: kotlin.Any, x15: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn17(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any, x7: kotlin.Any, x8: kotlin.Any, x9: kotlin.Any, x10: kotlin.Any, x11: kotlin.Any, x12: kotlin.Any, x13: kotlin.Any, x14: kotlin.Any, x15: kotlin.Any, x16: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn18(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any, x7: kotlin.Any, x8: kotlin.Any, x9: kotlin.Any, x10: kotlin.Any, x11: kotlin.Any, x12: kotlin.Any, x13: kotlin.Any, x14: kotlin.Any, x15: kotlin.Any, x16: kotlin.Any, x17: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn19(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any, x7: kotlin.Any, x8: kotlin.Any, x9: kotlin.Any, x10: kotlin.Any, x11: kotlin.Any, x12: kotlin.Any, x13: kotlin.Any, x14: kotlin.Any, x15: kotlin.Any, x16: kotlin.Any, x17: kotlin.Any, x18: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn20(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any, x7: kotlin.Any, x8: kotlin.Any, x9: kotlin.Any, x10: kotlin.Any, x11: kotlin.Any, x12: kotlin.Any, x13: kotlin.Any, x14: kotlin.Any, x15: kotlin.Any, x16: kotlin.Any, x17: kotlin.Any, x18: kotlin.Any, x19: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn21(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any, x7: kotlin.Any, x8: kotlin.Any, x9: kotlin.Any, x10: kotlin.Any, x11: kotlin.Any, x12: kotlin.Any, x13: kotlin.Any, x14: kotlin.Any, x15: kotlin.Any, x16: kotlin.Any, x17: kotlin.Any, x18: kotlin.Any, x19: kotlin.Any, x20: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn22(x0: kotlin.Any, x1: kotlin.Any, x2: kotlin.Any, x3: kotlin.Any, x4: kotlin.Any, x5: kotlin.Any, x6: kotlin.Any, x7: kotlin.Any, x8: kotlin.Any, x9: kotlin.Any, x10: kotlin.Any, x11: kotlin.Any, x12: kotlin.Any, x13: kotlin.Any, x14: kotlin.Any, x15: kotlin.Any, x16: kotlin.Any, x17: kotlin.Any, x18: kotlin.Any, x19: kotlin.Any, x20: kotlin.Any, x21: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    PROPERTY public val fns: kotlin.Array<kotlin.Any>
      EXPRESSION_BODY
        CALL 'arrayOf(vararg Any): Array<Any>' type=kotlin.Array<kotlin.Any> operator=null
          elements: VARARG type=Array<out Any> varargElementType=Any
            CALLABLE_REFERENCE 'fn0(): Unit' type=kotlin.reflect.KFunction0<kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn1(Any): Unit' type=kotlin.reflect.KFunction1<kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn2(Any, Any): Unit' type=kotlin.reflect.KFunction2<kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn3(Any, Any, Any): Unit' type=kotlin.reflect.KFunction3<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn4(Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction4<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn5(Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction5<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn6(Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction6<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn7(Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction7<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn8(Any, Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction8<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn9(Any, Any, Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction9<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn10(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction10<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn11(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction11<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn12(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction12<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn13(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction13<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn14(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction14<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn15(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction15<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn16(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction16<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn17(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction17<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn18(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction18<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn19(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction19<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn20(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction20<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn21(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction21<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE 'fn22(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any): Unit' type=kotlin.reflect.KFunction22<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
    CLASS CLASS TestFnBase
      CONSTRUCTOR public constructor TestFnBase(type: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'type: String' type=kotlin.Unit operator=null
            receiver: THIS of 'TestFnBase' type=TestFnBase
            value: GET_VAR 'value-parameter type: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFnBase'
      PROPERTY public final val type: kotlin.String
        EXPRESSION_BODY
          GET_VAR 'value-parameter type: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public abstract fun testGood(x: kotlin.Any): kotlin.Unit
      FUN public abstract fun testBad(x: kotlin.Any): kotlin.Unit
      FUN protected final fun assertIs(x: kotlin.Any, condition: kotlin.Boolean): kotlin.Unit
        BLOCK_BODY
          CALL 'assert(Boolean, () -> Any): Unit' type=kotlin.Unit operator=null
            value: GET_VAR 'value-parameter condition: Boolean' type=kotlin.Boolean operator=null
            lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(): String'
                    STRING_CONCATENATION type=kotlin.String
                      CONST String type=kotlin.String value='x is '
                      CALL '<get-type>(): String' type=kotlin.String operator=GET_PROPERTY
                        $this: THIS of 'TestFnBase' type=TestFnBase
                      CONST String type=kotlin.String value=': failed for '
                      GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
              CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
      FUN protected final fun assertIsNot(x: kotlin.Any, condition: kotlin.Boolean): kotlin.Unit
        BLOCK_BODY
          CALL 'assert(Boolean, () -> Any): Unit' type=kotlin.Unit operator=null
            value: GET_VAR 'value-parameter condition: Boolean' type=kotlin.Boolean operator=null
            lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(): String'
                    STRING_CONCATENATION type=kotlin.String
                      CONST String type=kotlin.String value='x !is '
                      CALL '<get-type>(): String' type=kotlin.String operator=GET_PROPERTY
                        $this: THIS of 'TestFnBase' type=TestFnBase
                      CONST String type=kotlin.String value=': failed for '
                      GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
              CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
    CLASS OBJECT TestFn0
      CONSTRUCTOR private constructor TestFn0()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function0<*>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn0'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn0' type=TestFn0
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function0<*>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn0' type=TestFn0
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function0<*>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn1
      CONSTRUCTOR private constructor TestFn1()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function1<*, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn1'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn1' type=TestFn1
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function1<*, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn1' type=TestFn1
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function1<*, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn2
      CONSTRUCTOR private constructor TestFn2()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function2<*, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn2'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn2' type=TestFn2
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function2<*, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn2' type=TestFn2
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function2<*, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn3
      CONSTRUCTOR private constructor TestFn3()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function3<*, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn3'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn3' type=TestFn3
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function3<*, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn3' type=TestFn3
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function3<*, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn4
      CONSTRUCTOR private constructor TestFn4()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function4<*, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn4'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn4' type=TestFn4
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function4<*, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn4' type=TestFn4
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function4<*, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn5
      CONSTRUCTOR private constructor TestFn5()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function5<*, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn5'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn5' type=TestFn5
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function5<*, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn5' type=TestFn5
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function5<*, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn6
      CONSTRUCTOR private constructor TestFn6()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function6<*, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn6'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn6' type=TestFn6
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function6<*, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn6' type=TestFn6
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function6<*, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn7
      CONSTRUCTOR private constructor TestFn7()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function7<*, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn7'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn7' type=TestFn7
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function7<*, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn7' type=TestFn7
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function7<*, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn8
      CONSTRUCTOR private constructor TestFn8()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function8<*, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn8'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn8' type=TestFn8
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function8<*, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn8' type=TestFn8
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function8<*, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn9
      CONSTRUCTOR private constructor TestFn9()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function9<*, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn9'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn9' type=TestFn9
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function9<*, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn9' type=TestFn9
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function9<*, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn10
      CONSTRUCTOR private constructor TestFn10()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function10<*, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn10'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn10' type=TestFn10
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function10<*, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn10' type=TestFn10
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function10<*, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn11
      CONSTRUCTOR private constructor TestFn11()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function11<*, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn11'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn11' type=TestFn11
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function11<*, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn11' type=TestFn11
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function11<*, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn12
      CONSTRUCTOR private constructor TestFn12()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function12<*, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn12'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn12' type=TestFn12
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function12<*, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn12' type=TestFn12
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function12<*, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn13
      CONSTRUCTOR private constructor TestFn13()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function13<*, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn13'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn13' type=TestFn13
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function13<*, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn13' type=TestFn13
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function13<*, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn14
      CONSTRUCTOR private constructor TestFn14()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function14<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn14'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn14' type=TestFn14
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function14<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn14' type=TestFn14
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function14<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn15
      CONSTRUCTOR private constructor TestFn15()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function15<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn15'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn15' type=TestFn15
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function15<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn15' type=TestFn15
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function15<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn16
      CONSTRUCTOR private constructor TestFn16()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function16<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn16'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn16' type=TestFn16
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function16<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn16' type=TestFn16
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function16<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn17
      CONSTRUCTOR private constructor TestFn17()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function17<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn17'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn17' type=TestFn17
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function17<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn17' type=TestFn17
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function17<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn18
      CONSTRUCTOR private constructor TestFn18()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function18<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn18'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn18' type=TestFn18
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function18<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn18' type=TestFn18
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function18<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn19
      CONSTRUCTOR private constructor TestFn19()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function19<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn19'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn19' type=TestFn19
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function19<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn19' type=TestFn19
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function19<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn20
      CONSTRUCTOR private constructor TestFn20()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function20<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn20'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn20' type=TestFn20
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function20<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn20' type=TestFn20
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function20<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn21
      CONSTRUCTOR private constructor TestFn21()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function21<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn21'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn21' type=TestFn21
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function21<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn21' type=TestFn21
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function21<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    CLASS OBJECT TestFn22
      CONSTRUCTOR private constructor TestFn22()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor TestFnBase(String)'
            type: CONST String type=kotlin.String value='Function22<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestFn22'
      FUN public open override fun testGood(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIs(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn22' type=TestFn22
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Function22<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
      FUN public open override fun testBad(x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL 'assertIsNot(Any, Boolean): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'TestFn22' type=TestFn22
            x: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
            condition: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.Function22<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>
              GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
    PROPERTY public val tests: kotlin.Array<TestFnBase>
      EXPRESSION_BODY
        CALL 'arrayOf(vararg TestFnBase): Array<TestFnBase>' type=kotlin.Array<TestFnBase> operator=null
          elements: VARARG type=Array<out TestFnBase> varargElementType=TestFnBase
            GET_OBJECT 'TestFn0' type=TestFn0
            GET_OBJECT 'TestFn1' type=TestFn1
            GET_OBJECT 'TestFn2' type=TestFn2
            GET_OBJECT 'TestFn3' type=TestFn3
            GET_OBJECT 'TestFn4' type=TestFn4
            GET_OBJECT 'TestFn5' type=TestFn5
            GET_OBJECT 'TestFn6' type=TestFn6
            GET_OBJECT 'TestFn7' type=TestFn7
            GET_OBJECT 'TestFn8' type=TestFn8
            GET_OBJECT 'TestFn9' type=TestFn9
            GET_OBJECT 'TestFn10' type=TestFn10
            GET_OBJECT 'TestFn11' type=TestFn11
            GET_OBJECT 'TestFn12' type=TestFn12
            GET_OBJECT 'TestFn13' type=TestFn13
            GET_OBJECT 'TestFn14' type=TestFn14
            GET_OBJECT 'TestFn15' type=TestFn15
            GET_OBJECT 'TestFn16' type=TestFn16
            GET_OBJECT 'TestFn17' type=TestFn17
            GET_OBJECT 'TestFn18' type=TestFn18
            GET_OBJECT 'TestFn19' type=TestFn19
            GET_OBJECT 'TestFn20' type=TestFn20
            GET_OBJECT 'TestFn21' type=TestFn21
            GET_OBJECT 'TestFn22' type=TestFn22
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL 'iterator(): IntIterator' type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL 'rangeTo(Int): IntRange' type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='0'
                other: CONST Int type=kotlin.Int value='22'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val fnI: kotlin.Int
                CALL 'next(): Int' type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                BLOCK type=kotlin.Unit operator=FOR_LOOP
                  VAR val tmp1_iterator: kotlin.collections.IntIterator
                    CALL 'iterator(): IntIterator' type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
                      $this: CALL 'rangeTo(Int): IntRange' type=kotlin.ranges.IntRange operator=RANGE
                        $this: CONST Int type=kotlin.Int value='0'
                        other: CONST Int type=kotlin.Int value='22'
                  WHILE label=null operator=FOR_LOOP_INNER_WHILE
                    condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
                      $this: GET_VAR 'tmp1_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
                    body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
                      VAR val testI: kotlin.Int
                        CALL 'next(): Int' type=kotlin.Int operator=FOR_LOOP_NEXT
                          $this: GET_VAR 'tmp1_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
                      BLOCK type=kotlin.Unit operator=null
                        WHEN type=kotlin.Unit operator=IF
                          if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                            arg0: GET_VAR 'fnI: Int' type=kotlin.Int operator=null
                            arg1: GET_VAR 'testI: Int' type=kotlin.Int operator=null
                          then: BLOCK type=kotlin.Unit operator=null
                            CALL 'testGood(Any): Unit' type=kotlin.Unit operator=null
                              $this: CALL 'get(Int): TestFnBase' type=TestFnBase operator=GET_ARRAY_ELEMENT
                                $this: CALL '<get-tests>(): Array<TestFnBase>' type=kotlin.Array<TestFnBase> operator=GET_PROPERTY
                                index: GET_VAR 'testI: Int' type=kotlin.Int operator=null
                              x: CALL 'get(Int): Any' type=kotlin.Any operator=GET_ARRAY_ELEMENT
                                $this: CALL '<get-fns>(): Array<Any>' type=kotlin.Array<kotlin.Any> operator=GET_PROPERTY
                                index: GET_VAR 'fnI: Int' type=kotlin.Int operator=null
                          else: BLOCK type=kotlin.Unit operator=null
                            CALL 'testBad(Any): Unit' type=kotlin.Unit operator=null
                              $this: CALL 'get(Int): TestFnBase' type=TestFnBase operator=GET_ARRAY_ELEMENT
                                $this: CALL '<get-tests>(): Array<TestFnBase>' type=kotlin.Array<TestFnBase> operator=GET_PROPERTY
                                index: GET_VAR 'testI: Int' type=kotlin.Int operator=null
                              x: CALL 'get(Int): Any' type=kotlin.Any operator=GET_ARRAY_ELEMENT
                                $this: CALL '<get-fns>(): Array<Any>' type=kotlin.Array<kotlin.Any> operator=GET_PROPERTY
                                index: GET_VAR 'fnI: Int' type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
