MODULE <test-module>
  FILE /intersectionTypeMultipleBounds.kt
    CLASS INTERFACE A
      FUN public abstract fun foo(): kotlin.Any?
      FUN public abstract fun bar(): kotlin.String
    CLASS INTERFACE B
      FUN public abstract fun foo(): kotlin.String
    FUN public fun <T : A> bar(x: T): kotlin.String where T : B
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL '<get-length>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: CALL 'foo(): String' type=kotlin.String operator=null
                    $this: GET_VAR 'value-parameter x: T' type=T operator=null
                arg1: CONST Int type=kotlin.Int value='2'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL 'foo(): String' type=kotlin.String operator=null
                  $this: GET_VAR 'value-parameter x: T' type=T operator=null
                arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from='bar(T): String'
            CONST String type=kotlin.String value='fail 1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'bar(): String' type=kotlin.String operator=null
                $this: GET_VAR 'value-parameter x: T' type=T operator=null
              arg1: CONST String type=kotlin.String value='ok'
          then: RETURN type=kotlin.Nothing from='bar(T): String'
            CONST String type=kotlin.String value='fail 2'
        RETURN type=kotlin.Nothing from='bar(T): String'
          CONST String type=kotlin.String value='OK'
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='C'
      FUN public open override fun foo(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='foo(): String'
            CONST String type=kotlin.String value='OK'
      FUN public open override fun bar(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='bar(): String'
            CONST String type=kotlin.String value='ok'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          CALL 'bar(C): String' type=kotlin.String operator=null
            x: CALL 'constructor C()' type=C operator=null
