MODULE <test-module>
  FILE /arrayGetAssignMultiIndex.kt
    FUN public operator fun kotlin.Array<kotlin.String>.get(index1: kotlin.Int, index2: kotlin.Int): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='get(Int, Int) on Array<String>: String'
          CALL 'get(Int): String' type=kotlin.String operator=GET_ARRAY_ELEMENT
            $this: $RECEIVER of 'get(Int, Int) on Array<String>: String' type=kotlin.Array<kotlin.String>
            index: CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
              $this: GET_VAR 'value-parameter index1: Int' type=kotlin.Int operator=null
              other: GET_VAR 'value-parameter index2: Int' type=kotlin.Int operator=null
    FUN public operator fun kotlin.Array<kotlin.String>.set(index1: kotlin.Int, index2: kotlin.Int, elem: kotlin.String): kotlin.Unit
      BLOCK_BODY
        CALL 'set(Int, String): Unit' type=kotlin.Unit operator=EQ
          $this: $RECEIVER of 'set(Int, Int, String) on Array<String>: Unit' type=kotlin.Array<kotlin.String>
          index: CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
            $this: GET_VAR 'value-parameter index1: Int' type=kotlin.Int operator=null
            other: GET_VAR 'value-parameter index2: Int' type=kotlin.Int operator=null
          value: GET_VAR 'value-parameter elem: String' type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val s: kotlin.Array<kotlin.String>
          CALL 'constructor Array(Int, (Int) -> String)' type=kotlin.Array<kotlin.String> operator=null
            size: CONST Int type=kotlin.Int value='1'
            init: BLOCK type=(kotlin.Int) -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(it: kotlin.Int): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(Int): String'
                    CONST String type=kotlin.String value=''
              CALLABLE_REFERENCE '<anonymous>(Int): String' type=(kotlin.Int) -> kotlin.String operator=LAMBDA
        CALL 'set(Int, Int, String) on Array<String>: Unit' type=kotlin.Unit operator=EQ
          $receiver: GET_VAR 's: Array<String>' type=kotlin.Array<kotlin.String> operator=null
          index1: CONST Int type=kotlin.Int value='1'
          index2: CONST Int type=kotlin.Int value='-1'
          elem: CONST String type=kotlin.String value='O'
        BLOCK type=kotlin.Unit operator=PLUSEQ
          VAR val tmp0_array: kotlin.Array<kotlin.String>
            GET_VAR 's: Array<String>' type=kotlin.Array<kotlin.String> operator=null
          VAR val tmp1_index0: kotlin.Int
            CONST Int type=kotlin.Int value='2'
          VAR val tmp2_index1: kotlin.Int
            CONST Int type=kotlin.Int value='-2'
          CALL 'set(Int, Int, String) on Array<String>: Unit' type=kotlin.Unit operator=PLUSEQ
            $receiver: GET_VAR 'tmp0_array: Array<String>' type=kotlin.Array<kotlin.String> operator=null
            index1: GET_VAR 'tmp1_index0: Int' type=kotlin.Int operator=null
            index2: GET_VAR 'tmp2_index1: Int' type=kotlin.Int operator=null
            elem: CALL 'plus(Any?): String' type=kotlin.String operator=PLUSEQ
              $this: CALL 'get(Int, Int) on Array<String>: String' type=kotlin.String operator=PLUSEQ
                $receiver: GET_VAR 'tmp0_array: Array<String>' type=kotlin.Array<kotlin.String> operator=null
                index1: GET_VAR 'tmp1_index0: Int' type=kotlin.Int operator=null
                index2: GET_VAR 'tmp2_index1: Int' type=kotlin.Int operator=null
              other: CONST String type=kotlin.String value='K'
        RETURN type=kotlin.Nothing from='box(): String'
          CALL 'get(Int, Int) on Array<String>: String' type=kotlin.String operator=GET_ARRAY_ELEMENT
            $receiver: GET_VAR 's: Array<String>' type=kotlin.Array<kotlin.String> operator=null
            index1: CONST Int type=kotlin.Int value='-3'
            index2: CONST Int type=kotlin.Int value='3'
