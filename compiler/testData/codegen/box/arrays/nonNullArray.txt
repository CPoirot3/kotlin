MODULE <test-module>
  FILE /nonNullArray.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      CLASS CLASS B
        CONSTRUCTOR public constructor B(i: kotlin.Int)
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
            SET_BACKING_FIELD 'i: Int' type=kotlin.Unit operator=null
              receiver: THIS of 'B' type=A.B
              value: GET_VAR 'value-parameter i: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
            INSTANCE_INITIALIZER_CALL classDescriptor='B'
        PROPERTY public final val i: kotlin.Int
          EXPRESSION_BODY
            GET_VAR 'value-parameter i: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final fun test(): kotlin.Array<A.B>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='test(): Array<A.B>'
            CALL 'constructor Array(Int, (Int) -> A.B)' type=kotlin.Array<A.B> operator=null
              size: CONST Int type=kotlin.Int value='10'
              init: BLOCK type=(kotlin.Int) -> A.B operator=LAMBDA
                FUN local final fun <anonymous>(it: kotlin.Int): A.B
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='<anonymous>(Int): A.B'
                      CALL 'constructor B(Int)' type=A.B operator=null
                        i: GET_VAR 'value-parameter it: Int' type=kotlin.Int operator=null
                CALLABLE_REFERENCE '<anonymous>(Int): A.B' type=(kotlin.Int) -> A.B operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CALL '<get-i>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: CALL 'get(Int): A.B' type=A.B operator=GET_ARRAY_ELEMENT
                  $this: CALL 'test(): Array<A.B>' type=kotlin.Array<A.B> operator=null
                    $this: CALL 'constructor A()' type=A operator=null
                  index: CONST Int type=kotlin.Int value='5'
              arg1: CONST Int type=kotlin.Int value='5'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
