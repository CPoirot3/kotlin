MODULE <test-module>
  FILE /kt2997.kt
    FUN public fun foo(a: kotlin.Any): kotlin.Int
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.IntArray
            GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
          then: BLOCK type=kotlin.Nothing operator=null
            CALL 'get(Int): Int' type=kotlin.Int operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.IntArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
              index: CONST Int type=kotlin.Int value='0'
            CALL 'set(Int, Int): Unit' type=kotlin.Unit operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.IntArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
              index: CONST Int type=kotlin.Int value='0'
              value: CONST Int type=kotlin.Int value='1'
            CALL 'iterator(): IntIterator' type=kotlin.collections.IntIterator operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.IntArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
            RETURN type=kotlin.Nothing from='foo(Any): Int'
              CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.IntArray
                  GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.ShortArray
            GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
          then: BLOCK type=kotlin.Nothing operator=null
            CALL 'get(Int): Short' type=kotlin.Short operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.ShortArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
              index: CONST Int type=kotlin.Int value='0'
            CALL 'set(Int, Short): Unit' type=kotlin.Unit operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.ShortArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
              index: CONST Int type=kotlin.Int value='0'
              value: CONST Short type=kotlin.Short value='1'
            CALL 'iterator(): ShortIterator' type=kotlin.collections.ShortIterator operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.ShortArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
            RETURN type=kotlin.Nothing from='foo(Any): Int'
              CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.ShortArray
                  GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.ByteArray
            GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
          then: BLOCK type=kotlin.Nothing operator=null
            CALL 'get(Int): Byte' type=kotlin.Byte operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.ByteArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
              index: CONST Int type=kotlin.Int value='0'
            CALL 'set(Int, Byte): Unit' type=kotlin.Unit operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.ByteArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
              index: CONST Int type=kotlin.Int value='0'
              value: CONST Byte type=kotlin.Byte value='1'
            CALL 'iterator(): ByteIterator' type=kotlin.collections.ByteIterator operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.ByteArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
            RETURN type=kotlin.Nothing from='foo(Any): Int'
              CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.ByteArray
                  GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.FloatArray
            GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
          then: BLOCK type=kotlin.Nothing operator=null
            CALL 'get(Int): Float' type=kotlin.Float operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.FloatArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
              index: CONST Int type=kotlin.Int value='0'
            CALL 'set(Int, Float): Unit' type=kotlin.Unit operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.FloatArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
              index: CONST Int type=kotlin.Int value='0'
              value: CALL 'toFloat(): Float' type=kotlin.Float operator=null
                $this: CONST Int type=kotlin.Int value='1'
            CALL 'iterator(): FloatIterator' type=kotlin.collections.FloatIterator operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.FloatArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
            RETURN type=kotlin.Nothing from='foo(Any): Int'
              CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.FloatArray
                  GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.DoubleArray
            GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
          then: BLOCK type=kotlin.Nothing operator=null
            CALL 'get(Int): Double' type=kotlin.Double operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.DoubleArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
              index: CONST Int type=kotlin.Int value='0'
            CALL 'set(Int, Double): Unit' type=kotlin.Unit operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.DoubleArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
              index: CONST Int type=kotlin.Int value='0'
              value: CONST Double type=kotlin.Double value='1.0'
            CALL 'iterator(): DoubleIterator' type=kotlin.collections.DoubleIterator operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.DoubleArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
            RETURN type=kotlin.Nothing from='foo(Any): Int'
              CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.DoubleArray
                  GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.BooleanArray
            GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
          then: BLOCK type=kotlin.Nothing operator=null
            CALL 'get(Int): Boolean' type=kotlin.Boolean operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.BooleanArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
              index: CONST Int type=kotlin.Int value='0'
            CALL 'set(Int, Boolean): Unit' type=kotlin.Unit operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.BooleanArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
              index: CONST Int type=kotlin.Int value='0'
              value: CONST Boolean type=kotlin.Boolean value='false'
            CALL 'iterator(): BooleanIterator' type=kotlin.collections.BooleanIterator operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.BooleanArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
            RETURN type=kotlin.Nothing from='foo(Any): Int'
              CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.BooleanArray
                  GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.CharArray
            GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
          then: BLOCK type=kotlin.Nothing operator=null
            CALL 'get(Int): Char' type=kotlin.Char operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.CharArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
              index: CONST Int type=kotlin.Int value='0'
            CALL 'set(Int, Char): Unit' type=kotlin.Unit operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.CharArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
              index: CONST Int type=kotlin.Int value='0'
              value: CONST Char type=kotlin.Char value='a'
            CALL 'iterator(): CharIterator' type=kotlin.collections.CharIterator operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.CharArray
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
            RETURN type=kotlin.Nothing from='foo(Any): Int'
              CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.CharArray
                  GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Array<*>
            GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
          then: BLOCK type=kotlin.Nothing operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL 'GT0(Int): Boolean' type=kotlin.Boolean operator=GT
                arg0: CALL 'compareTo(Int): Int' type=kotlin.Int operator=GT
                  $this: CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                    $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<out kotlin.Any?>
                      GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
                  other: CONST Int type=kotlin.Int value='0'
              then: CALL 'get(Int): Any?' type=kotlin.Any? operator=null
                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<out kotlin.Any?>
                  GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
                index: CONST Int type=kotlin.Int value='0'
            CALL 'iterator(): Iterator<Any?>' type=kotlin.collections.Iterator<kotlin.Any?> operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<out kotlin.Any?>
                GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
            RETURN type=kotlin.Nothing from='foo(Any): Int'
              CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<out kotlin.Any?>
                  GET_VAR 'value-parameter a: Any' type=kotlin.Any operator=null
        RETURN type=kotlin.Nothing from='foo(Any): Int'
          CONST Int type=kotlin.Int value='0'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val iA: kotlin.IntArray
          CALL 'constructor IntArray(Int)' type=kotlin.IntArray operator=null
            size: CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'foo(Any): Int' type=kotlin.Int operator=null
                a: GET_VAR 'iA: IntArray' type=kotlin.IntArray operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail int[]'
        VAR val sA: kotlin.ShortArray
          CALL 'constructor ShortArray(Int)' type=kotlin.ShortArray operator=null
            size: CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'foo(Any): Int' type=kotlin.Int operator=null
                a: GET_VAR 'sA: ShortArray' type=kotlin.ShortArray operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail short[]'
        VAR val bA: kotlin.ByteArray
          CALL 'constructor ByteArray(Int)' type=kotlin.ByteArray operator=null
            size: CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'foo(Any): Int' type=kotlin.Int operator=null
                a: GET_VAR 'bA: ByteArray' type=kotlin.ByteArray operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail byte[]'
        VAR val fA: kotlin.FloatArray
          CALL 'constructor FloatArray(Int)' type=kotlin.FloatArray operator=null
            size: CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'foo(Any): Int' type=kotlin.Int operator=null
                a: GET_VAR 'fA: FloatArray' type=kotlin.FloatArray operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail float[]'
        VAR val dA: kotlin.DoubleArray
          CALL 'constructor DoubleArray(Int)' type=kotlin.DoubleArray operator=null
            size: CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'foo(Any): Int' type=kotlin.Int operator=null
                a: GET_VAR 'dA: DoubleArray' type=kotlin.DoubleArray operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail double[]'
        VAR val boolA: kotlin.BooleanArray
          CALL 'constructor BooleanArray(Int)' type=kotlin.BooleanArray operator=null
            size: CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'foo(Any): Int' type=kotlin.Int operator=null
                a: GET_VAR 'boolA: BooleanArray' type=kotlin.BooleanArray operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail boolean[]'
        VAR val cA: kotlin.CharArray
          CALL 'constructor CharArray(Int)' type=kotlin.CharArray operator=null
            size: CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'foo(Any): Int' type=kotlin.Int operator=null
                a: GET_VAR 'cA: CharArray' type=kotlin.CharArray operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail char[]'
        VAR val oA: kotlin.Array<kotlin.Int?>
          CALL 'arrayOfNulls(Int): Array<Int?>' type=kotlin.Array<kotlin.Int?> operator=null
            size: CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'foo(Any): Int' type=kotlin.Int operator=null
                a: GET_VAR 'oA: Array<Int?>' type=kotlin.Array<kotlin.Int?> operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail Any[]'
        VAR val sArray: kotlin.Array<kotlin.String?>
          CALL 'arrayOfNulls(Int): Array<String?>' type=kotlin.Array<kotlin.String?> operator=null
            size: CONST Int type=kotlin.Int value='0'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'foo(Any): Int' type=kotlin.Int operator=null
                a: GET_VAR 'sArray: Array<String?>' type=kotlin.Array<kotlin.String?> operator=null
              arg1: CONST Int type=kotlin.Int value='0'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail String[]'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
