MODULE <test-module>
  FILE /propertyAccessorObject.kt
    CLASS INTERFACE Base
      FUN public abstract fun foo(): kotlin.Int
    PROPERTY public val kotlin.Int.getter: kotlin.Int
      PROPERTY_GETTER public fun kotlin.Int.<get-getter>(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='<get-getter>() on Int: Int'
            CALL 'foo(): Int' type=kotlin.Int operator=null
              $this: BLOCK type=<get-getter>.<no name provided> operator=OBJECT_LITERAL
                CLASS CLASS <no name provided>
                  CONSTRUCTOR public constructor <no name provided>()
                    BLOCK_BODY
                      DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
                      INSTANCE_INITIALIZER_CALL classDescriptor='<no name provided>'
                  FUN public open override fun foo(): kotlin.Int
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from='foo(): Int'
                        $RECEIVER of 'getter: Int on Int' type=kotlin.Int
                CALL 'constructor <no name provided>()' type=<get-getter>.<no name provided> operator=OBJECT_LITERAL
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val i: kotlin.Int = 1
          CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-getter>() on Int: Int' type=kotlin.Int operator=GET_PROPERTY
                $receiver: GET_VAR 'i: Int' type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='getter failed'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
