MODULE <test-module>
  FILE /simpleObject.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A<T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      FUN public open fun foo(t: T): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='foo(T): String'
            CONST String type=kotlin.String value='A'
    CLASS OBJECT Z
      CONSTRUCTOR private constructor Z()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor A()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Z'
      FUN public open override fun foo(t: kotlin.String): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='foo(String): String'
            CONST String type=kotlin.String value='Z'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val z: box.<no name provided>
          BLOCK type=box.<no name provided> operator=OBJECT_LITERAL
            CLASS CLASS <no name provided>
              CONSTRUCTOR public constructor <no name provided>()
                BLOCK_BODY
                  DELEGATING_CONSTRUCTOR_CALL 'constructor A()'
                  INSTANCE_INITIALIZER_CALL classDescriptor='<no name provided>'
              FUN public open override fun foo(t: kotlin.String): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='foo(String): String'
                    CONST String type=kotlin.String value='z'
            CALL 'constructor <no name provided>()' type=box.<no name provided> operator=OBJECT_LITERAL
        VAR val az: A<kotlin.String>
          GET_OBJECT 'Z' type=Z
        VAR val a: A<kotlin.String>
          GET_VAR 'z: <no name provided>' type=box.<no name provided> operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=WHEN
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL 'foo(String): String' type=kotlin.String operator=null
                  $this: GET_OBJECT 'Z' type=Z
                  t: CONST String type=kotlin.String value=''
                arg1: CONST String type=kotlin.String value='Z'
            then: CONST String type=kotlin.String value='Fail #1'
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL 'foo(String): String' type=kotlin.String operator=null
                  $this: GET_VAR 'z: <no name provided>' type=box.<no name provided> operator=null
                  t: CONST String type=kotlin.String value=''
                arg1: CONST String type=kotlin.String value='z'
            then: CONST String type=kotlin.String value='Fail #2'
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL 'foo(String): String' type=kotlin.String operator=null
                  $this: GET_VAR 'az: A<String>' type=A<kotlin.String> operator=null
                  t: CONST String type=kotlin.String value=''
                arg1: CONST String type=kotlin.String value='Z'
            then: CONST String type=kotlin.String value='Fail #3'
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL 'foo(String): String' type=kotlin.String operator=null
                  $this: GET_VAR 'a: A<String>' type=A<kotlin.String> operator=null
                  t: CONST String type=kotlin.String value=''
                arg1: CONST String type=kotlin.String value='z'
            then: CONST String type=kotlin.String value='Fail #4'
            else: CONST String type=kotlin.String value='OK'
