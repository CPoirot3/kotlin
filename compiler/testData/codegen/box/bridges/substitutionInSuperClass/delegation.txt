MODULE <test-module>
  FILE /delegation.kt
    CLASS INTERFACE A
      FUN public abstract fun id(t: T): T
    CLASS CLASS B
      CONSTRUCTOR public constructor B()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='B'
      FUN public open override fun id(t: kotlin.String): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='id(String): String'
            GET_VAR 'value-parameter t: String' type=kotlin.String operator=null
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor B()'
          INSTANCE_INITIALIZER_CALL classDescriptor='C'
    CLASS CLASS D
      CONSTRUCTOR public constructor D()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='D'
      PROPERTY val `D$A$delegate`: C
        EXPRESSION_BODY
          CALL 'constructor C()' type=C operator=null
      FUN public open override fun id(t: kotlin.String): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='id(String): String'
            CALL 'id(String): String' type=kotlin.String operator=null
              $this: GET_VAR '`D$A$delegate`: C' type=C operator=null
              t: GET_VAR 'value-parameter t: String' type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val d: D
          CALL 'constructor D()' type=D operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'id(String): String' type=kotlin.String operator=null
                $this: GET_VAR 'd: D' type=D operator=null
                t: CONST String type=kotlin.String value=''
              arg1: CONST String type=kotlin.String value=''
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail'
        VAR val a: A<kotlin.String>
          GET_VAR 'd: D' type=D operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CALL 'id(String): String' type=kotlin.String operator=null
            $this: GET_VAR 'a: A<String>' type=A<kotlin.String> operator=null
            t: CONST String type=kotlin.String value='OK'
