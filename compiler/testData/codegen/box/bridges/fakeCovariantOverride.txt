MODULE <test-module>
  FILE /fakeCovariantOverride.kt
    CLASS INTERFACE A
      FUN public abstract fun foo(): kotlin.Any
    CLASS CLASS B
      CONSTRUCTOR public constructor B()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='B'
      FUN public final fun foo(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='foo(): String'
            CONST String type=kotlin.String value='A'
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor B()'
          INSTANCE_INITIALIZER_CALL classDescriptor='C'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a: A
          CALL 'constructor C()' type=C operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'foo(): Any' type=kotlin.Any operator=null
                $this: GET_VAR 'a: A' type=A operator=null
              arg1: CONST String type=kotlin.String value='A'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail 1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'foo(): String' type=kotlin.String operator=null
                $this: TYPE_OP operator=CAST typeOperand=B
                  GET_VAR 'a: A' type=A operator=null
              arg1: CONST String type=kotlin.String value='A'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail 2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'foo(): String' type=kotlin.String operator=null
                $this: TYPE_OP operator=CAST typeOperand=C
                  GET_VAR 'a: A' type=A operator=null
              arg1: CONST String type=kotlin.String value='A'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail 3'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
