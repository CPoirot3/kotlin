MODULE <test-module>
  FILE /longInRange.kt
    CLASS CLASS LongR
      CONSTRUCTOR public constructor LongR()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='LongR'
      FUN public final operator fun contains(l: kotlin.Long): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='contains(Long): Boolean'
            CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'value-parameter l: Long' type=kotlin.Long operator=null
              arg1: CALL 'toLong(): Long' type=kotlin.Long operator=null
                $this: CONST Int type=kotlin.Int value='5'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=NOT_IN
            arg0: CALL 'contains(Long): Boolean' type=kotlin.Boolean operator=NOT_IN
              $this: CALL 'constructor LongR()' type=LongR operator=null
              l: CONST Long type=kotlin.Long value='5'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail 1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'contains(Long): Boolean' type=kotlin.Boolean operator=IN
            $this: CALL 'constructor LongR()' type=LongR operator=null
            l: CONST Long type=kotlin.Long value='6'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail 2'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
