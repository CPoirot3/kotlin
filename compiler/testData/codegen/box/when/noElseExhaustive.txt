MODULE <test-module>
  FILE /noElseExhaustive.kt
    CLASS ENUM_CLASS En
      CONSTRUCTOR private constructor En()
        BLOCK_BODY
          ENUM_CONSTRUCTOR_CALL 'constructor Enum(String, Int)' super
          INSTANCE_INITIALIZER_CALL classDescriptor='En'
      ENUM_ENTRY enum entry A
        init: ENUM_CONSTRUCTOR_CALL 'constructor En()' A
      ENUM_ENTRY enum entry B
        init: ENUM_CONSTRUCTOR_CALL 'constructor En()' B
      FUN public final fun values(): kotlin.Array<En>
        SYNTHETIC_BODY kind=ENUM_VALUES
      FUN public final fun valueOf(value: kotlin.String): En
        SYNTHETIC_BODY kind=ENUM_VALUEOF
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          BLOCK type=kotlin.String operator=WHEN
            VAR val tmp0_subject: En
              GET_ENUM_VALUE 'A' type=En
            WHEN type=kotlin.String operator=WHEN
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_subject: En' type=En operator=null
                arg1: GET_ENUM_VALUE 'A' type=En
              then: CONST String type=kotlin.String value='OK'
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_subject: En' type=En operator=null
                arg1: GET_ENUM_VALUE 'B' type=En
              then: CONST String type=kotlin.String value='Fail 1'
