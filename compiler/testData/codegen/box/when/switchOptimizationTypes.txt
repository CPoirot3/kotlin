MODULE <test-module>
  FILE /switchOptimizationTypes.kt
    FUN public fun intFoo(x: kotlin.Int): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='intFoo(Int): Int'
          BLOCK type=kotlin.Int operator=WHEN
            VAR val tmp0_subject: kotlin.Int
              GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=null
            WHEN type=kotlin.Int operator=WHEN
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_subject: Int' type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='1'
              then: CONST Int type=kotlin.Int value='5'
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_subject: Int' type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='2'
              then: CONST Int type=kotlin.Int value='6'
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_subject: Int' type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='3'
              then: CONST Int type=kotlin.Int value='7'
              else: CONST Int type=kotlin.Int value='8'
    FUN public fun shortFoo(x: kotlin.Short): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='shortFoo(Short): Int'
          BLOCK type=kotlin.Int operator=WHEN
            VAR val tmp0_subject: kotlin.Short
              GET_VAR 'value-parameter x: Short' type=kotlin.Short operator=null
            WHEN type=kotlin.Int operator=WHEN
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_subject: Short' type=kotlin.Short operator=null
                arg1: CALL 'toShort(): Short' type=kotlin.Short operator=null
                  $this: CONST Int type=kotlin.Int value='1'
              then: CONST Int type=kotlin.Int value='5'
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_subject: Short' type=kotlin.Short operator=null
                arg1: CALL 'toShort(): Short' type=kotlin.Short operator=null
                  $this: CONST Int type=kotlin.Int value='2'
              then: CONST Int type=kotlin.Int value='6'
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_subject: Short' type=kotlin.Short operator=null
                arg1: CALL 'toShort(): Short' type=kotlin.Short operator=null
                  $this: CONST Int type=kotlin.Int value='3'
              then: CONST Int type=kotlin.Int value='7'
              else: CONST Int type=kotlin.Int value='8'
    FUN public fun byteFoo(x: kotlin.Byte): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='byteFoo(Byte): Int'
          BLOCK type=kotlin.Int operator=WHEN
            VAR val tmp0_subject: kotlin.Byte
              GET_VAR 'value-parameter x: Byte' type=kotlin.Byte operator=null
            WHEN type=kotlin.Int operator=WHEN
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_subject: Byte' type=kotlin.Byte operator=null
                arg1: CALL 'toByte(): Byte' type=kotlin.Byte operator=null
                  $this: CONST Int type=kotlin.Int value='1'
              then: CONST Int type=kotlin.Int value='5'
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_subject: Byte' type=kotlin.Byte operator=null
                arg1: CALL 'toByte(): Byte' type=kotlin.Byte operator=null
                  $this: CONST Int type=kotlin.Int value='2'
              then: CONST Int type=kotlin.Int value='6'
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_subject: Byte' type=kotlin.Byte operator=null
                arg1: CALL 'toByte(): Byte' type=kotlin.Byte operator=null
                  $this: CONST Int type=kotlin.Int value='3'
              then: CONST Int type=kotlin.Int value='7'
              else: CONST Int type=kotlin.Int value='8'
    FUN public fun charFoo(x: kotlin.Char): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='charFoo(Char): Int'
          BLOCK type=kotlin.Int operator=WHEN
            VAR val tmp0_subject: kotlin.Char
              GET_VAR 'value-parameter x: Char' type=kotlin.Char operator=null
            WHEN type=kotlin.Int operator=WHEN
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_subject: Char' type=kotlin.Char operator=null
                arg1: CONST Char type=kotlin.Char value='a'
              then: CONST Int type=kotlin.Int value='5'
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_subject: Char' type=kotlin.Char operator=null
                arg1: CONST Char type=kotlin.Char value='b'
              then: CONST Int type=kotlin.Int value='6'
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_subject: Char' type=kotlin.Char operator=null
                arg1: CONST Char type=kotlin.Char value='c'
              then: CONST Int type=kotlin.Int value='7'
              else: CONST Int type=kotlin.Int value='8'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.String
          CALL 'joinToString(CharSequence = ..., CharSequence = ..., CharSequence = ..., Int = ..., CharSequence = ..., ((Int) -> CharSequence)? = ...) on Iterable<Int>: String' type=kotlin.String operator=null
            $receiver: CALL 'map((Int) -> Int) on Iterable<Int>: List<Int>' type=kotlin.collections.List<kotlin.Int> operator=null
              $receiver: CALL 'rangeTo(Int): IntRange' type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='1'
                other: CONST Int type=kotlin.Int value='4'
              transform: CALLABLE_REFERENCE 'intFoo(Int): Int' type=kotlin.reflect.KFunction1<kotlin.Int, kotlin.Int> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'result: String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='5, 6, 7, 8'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='int:'
              other: GET_VAR 'result: String' type=kotlin.String operator=null
        SET_VAR 'result: String' type=kotlin.Unit operator=EQ
          CALL 'joinToString(CharSequence = ..., CharSequence = ..., CharSequence = ..., Int = ..., CharSequence = ..., ((Int) -> CharSequence)? = ...) on Iterable<Int>: String' type=kotlin.String operator=null
            $receiver: CALL 'map((Short) -> Int) on Iterable<Short>: List<Int>' type=kotlin.collections.List<kotlin.Int> operator=null
              $receiver: CALL 'listOf(vararg Short): List<Short>' type=kotlin.collections.List<kotlin.Short> operator=null
                elements: VARARG type=Array<out Short> varargElementType=Short
                  CONST Short type=kotlin.Short value='1'
                  CONST Short type=kotlin.Short value='2'
                  CONST Short type=kotlin.Short value='3'
                  CONST Short type=kotlin.Short value='4'
              transform: CALLABLE_REFERENCE 'shortFoo(Short): Int' type=kotlin.reflect.KFunction1<kotlin.Short, kotlin.Int> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'result: String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='5, 6, 7, 8'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='short:'
              other: GET_VAR 'result: String' type=kotlin.String operator=null
        SET_VAR 'result: String' type=kotlin.Unit operator=EQ
          CALL 'joinToString(CharSequence = ..., CharSequence = ..., CharSequence = ..., Int = ..., CharSequence = ..., ((Int) -> CharSequence)? = ...) on Iterable<Int>: String' type=kotlin.String operator=null
            $receiver: CALL 'map((Byte) -> Int) on Iterable<Byte>: List<Int>' type=kotlin.collections.List<kotlin.Int> operator=null
              $receiver: CALL 'listOf(vararg Byte): List<Byte>' type=kotlin.collections.List<kotlin.Byte> operator=null
                elements: VARARG type=Array<out Byte> varargElementType=Byte
                  CONST Byte type=kotlin.Byte value='1'
                  CONST Byte type=kotlin.Byte value='2'
                  CONST Byte type=kotlin.Byte value='3'
                  CONST Byte type=kotlin.Byte value='4'
              transform: CALLABLE_REFERENCE 'byteFoo(Byte): Int' type=kotlin.reflect.KFunction1<kotlin.Byte, kotlin.Int> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'result: String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='5, 6, 7, 8'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='byte:'
              other: GET_VAR 'result: String' type=kotlin.String operator=null
        SET_VAR 'result: String' type=kotlin.Unit operator=EQ
          CALL 'joinToString(CharSequence = ..., CharSequence = ..., CharSequence = ..., Int = ..., CharSequence = ..., ((Int) -> CharSequence)? = ...) on Iterable<Int>: String' type=kotlin.String operator=null
            $receiver: CALL 'map((Char) -> Int) on Iterable<Char>: List<Int>' type=kotlin.collections.List<kotlin.Int> operator=null
              $receiver: CALL 'rangeTo(Char): CharRange' type=kotlin.ranges.CharRange operator=RANGE
                $this: CONST Char type=kotlin.Char value='a'
                other: CONST Char type=kotlin.Char value='d'
              transform: CALLABLE_REFERENCE 'charFoo(Char): Int' type=kotlin.reflect.KFunction1<kotlin.Char, kotlin.Int> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'result: String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='5, 6, 7, 8'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='int:'
              other: GET_VAR 'result: String' type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
