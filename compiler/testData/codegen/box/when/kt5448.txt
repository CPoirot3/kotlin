MODULE <test-module>
  FILE /kt5448.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
    CLASS CLASS B
      CONSTRUCTOR public constructor B(items: kotlin.collections.Collection<A>)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'items: Collection<A>' type=kotlin.Unit operator=null
            receiver: THIS of 'B' type=B
            value: GET_VAR 'value-parameter items: Collection<A>' type=kotlin.collections.Collection<A> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='B'
      PROPERTY public final val items: kotlin.collections.Collection<A>
        EXPRESSION_BODY
          GET_VAR 'value-parameter items: Collection<A>' type=kotlin.collections.Collection<A> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='C'
      FUN public final fun foo(p: kotlin.Int): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Boolean operator=WHEN
            VAR val tmp0_subject: kotlin.Int
              GET_VAR 'value-parameter p: Int' type=kotlin.Int operator=null
            WHEN type=kotlin.Boolean operator=WHEN
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_subject: Int' type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='1'
              then: CALL 'add(Int): Boolean' type=kotlin.Boolean operator=null
                $this: CALL 'arrayListOf(vararg Int): ArrayList<Int>' type=java.util.ArrayList<kotlin.Int> operator=null
                element: CONST Int type=kotlin.Int value='1'
      FUN public final fun bar(): B
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='bar(): B'
            CALL 'constructor B(Collection<A>)' type=B operator=null
              items: CALL 'map((A) -> A) on Iterable<A>: List<A>' type=kotlin.collections.List<A> operator=null
                $receiver: CALL 'listOf(): List<A>' type=kotlin.collections.List<A> operator=null
                transform: BLOCK type=(A) -> A operator=LAMBDA
                  FUN local final fun <anonymous>(it: A): A
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from='<anonymous>(A): A'
                        GET_VAR 'value-parameter it: A' type=A operator=null
                  CALLABLE_REFERENCE '<anonymous>(A): A' type=(A) -> A operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'foo(Int): Unit' type=kotlin.Unit operator=null
          $this: CALL 'constructor C()' type=C operator=null
          p: CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'isNotEmpty() on Collection<A>: Boolean' type=kotlin.Boolean operator=null
            $receiver: CALL '<get-items>(): Collection<A>' type=kotlin.collections.Collection<A> operator=GET_PROPERTY
              $this: CALL 'bar(): B' type=B operator=null
                $this: CALL 'constructor C()' type=C operator=null
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
