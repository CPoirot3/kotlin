MODULE <test-module>
  FILE /functionLiteralInTopLevel.kt
    CLASS ENUM_CLASS Season
      CONSTRUCTOR private constructor Season()
        BLOCK_BODY
          ENUM_CONSTRUCTOR_CALL 'constructor Enum(String, Int)' super
          INSTANCE_INITIALIZER_CALL classDescriptor='Season'
      ENUM_ENTRY enum entry WINTER
        init: ENUM_CONSTRUCTOR_CALL 'constructor Season()' WINTER
      ENUM_ENTRY enum entry SPRING
        init: ENUM_CONSTRUCTOR_CALL 'constructor Season()' SPRING
      ENUM_ENTRY enum entry SUMMER
        init: ENUM_CONSTRUCTOR_CALL 'constructor Season()' SUMMER
      ENUM_ENTRY enum entry AUTUMN
        init: ENUM_CONSTRUCTOR_CALL 'constructor Season()' AUTUMN
      FUN public final fun values(): kotlin.Array<Season>
        SYNTHETIC_BODY kind=ENUM_VALUES
      FUN public final fun valueOf(value: kotlin.String): Season
        SYNTHETIC_BODY kind=ENUM_VALUEOF
    FUN public fun foo(x: Season, block: (Season) -> kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='foo(Season, (Season) -> String): String'
          CALL 'invoke(Season): String' type=kotlin.String operator=INVOKE
            $this: GET_VAR 'value-parameter block: (Season) -> String' type=(Season) -> kotlin.String operator=VARIABLE_AS_FUNCTION
            p1: GET_VAR 'value-parameter x: Season' type=Season operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          CALL 'foo(Season, (Season) -> String): String' type=kotlin.String operator=null
            x: GET_ENUM_VALUE 'SPRING' type=Season
            block: BLOCK type=(Season) -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(x: Season): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(Season): String'
                    BLOCK type=kotlin.String operator=WHEN
                      VAR val tmp0_subject: Season
                        GET_VAR 'value-parameter x: Season' type=Season operator=null
                      WHEN type=kotlin.String operator=WHEN
                        if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                          arg0: GET_VAR 'tmp0_subject: Season' type=Season operator=null
                          arg1: GET_ENUM_VALUE 'SPRING' type=Season
                        then: CONST String type=kotlin.String value='OK'
                        else: CONST String type=kotlin.String value='fail'
              CALLABLE_REFERENCE '<anonymous>(Season): String' type=(Season) -> kotlin.String operator=LAMBDA
