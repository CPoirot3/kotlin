MODULE <test-module>
  FILE /cloneHierarchy.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      FUN public open override fun clone(): A
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='clone(): A'
            TYPE_OP operator=CAST typeOperand=A
              CALL 'clone(): Any' superQualifier=Cloneable type=kotlin.Any operator=null
                $this: THIS of 'A' type=kotlin.Cloneable
    CLASS CLASS B
      CONSTRUCTOR public constructor B(s: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor A()'
          SET_BACKING_FIELD 's: String' type=kotlin.Unit operator=null
            receiver: THIS of 'B' type=B
            value: GET_VAR 'value-parameter s: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='B'
      PROPERTY public final var s: kotlin.String
        EXPRESSION_BODY
          GET_VAR 'value-parameter s: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public open override fun clone(): B
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='clone(): B'
            TYPE_OP operator=CAST typeOperand=B
              CALL 'clone(): A' superQualifier=A type=A operator=null
                $this: THIS of 'B' type=A
    CLASS CLASS C
      CONSTRUCTOR public constructor C(s: kotlin.String, l: java.util.ArrayList<kotlin.Any>)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor B(String)'
            s: GET_VAR 'value-parameter s: String' type=kotlin.String operator=null
          SET_BACKING_FIELD 'l: ArrayList<Any>' type=kotlin.Unit operator=null
            receiver: THIS of 'C' type=C
            value: GET_VAR 'value-parameter l: ArrayList<Any>' type=java.util.ArrayList<kotlin.Any> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='C'
      PROPERTY public final var l: java.util.ArrayList<kotlin.Any>
        EXPRESSION_BODY
          GET_VAR 'value-parameter l: ArrayList<Any>' type=java.util.ArrayList<kotlin.Any> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public open override fun clone(): C
        BLOCK_BODY
          VAR val result: C
            TYPE_OP operator=CAST typeOperand=C
              CALL 'clone(): B' superQualifier=B type=B operator=null
                $this: THIS of 'C' type=B
          CALL '<set-l>(ArrayList<Any>): Unit' type=kotlin.Unit operator=EQ
            $this: GET_VAR 'result: C' type=C operator=null
            <set-?>: TYPE_OP operator=CAST typeOperand=java.util.ArrayList<kotlin.Any>
              CALL 'clone(): Any' type=kotlin.Any operator=null
                $this: CALL '<get-l>(): ArrayList<Any>' type=java.util.ArrayList<kotlin.Any> operator=GET_PROPERTY
                  $this: THIS of 'C' type=C
          RETURN type=kotlin.Nothing from='clone(): C'
            GET_VAR 'result: C' type=C operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val l: java.util.ArrayList<kotlin.Any>
          CALL 'constructor ArrayList()' type=java.util.ArrayList<kotlin.Any> operator=null
        CALL 'add(Any): Boolean' type=kotlin.Boolean operator=null
          $this: GET_VAR 'l: ArrayList<Any>' type=java.util.ArrayList<kotlin.Any> operator=null
          element: CONST Boolean type=kotlin.Boolean value='true'
        VAR val c: C
          CALL 'constructor C(String, ArrayList<Any>)' type=C operator=null
            s: CONST String type=kotlin.String value='OK'
            l: GET_VAR 'l: ArrayList<Any>' type=java.util.ArrayList<kotlin.Any> operator=null
        VAR val d: C
          CALL 'clone(): C' type=C operator=null
            $this: GET_VAR 'c: C' type=C operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-s>(): String' type=kotlin.String operator=GET_PROPERTY
                $this: GET_VAR 'c: C' type=C operator=null
              arg1: CALL '<get-s>(): String' type=kotlin.String operator=GET_PROPERTY
                $this: GET_VAR 'd: C' type=C operator=null
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail s: '
              CALL '<get-s>(): String' type=kotlin.String operator=GET_PROPERTY
                $this: GET_VAR 'd: C' type=C operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-l>(): ArrayList<Any>' type=java.util.ArrayList<kotlin.Any> operator=GET_PROPERTY
                $this: GET_VAR 'c: C' type=C operator=null
              arg1: CALL '<get-l>(): ArrayList<Any>' type=java.util.ArrayList<kotlin.Any> operator=GET_PROPERTY
                $this: GET_VAR 'd: C' type=C operator=null
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail l: '
              CALL '<get-l>(): ArrayList<Any>' type=java.util.ArrayList<kotlin.Any> operator=GET_PROPERTY
                $this: GET_VAR 'd: C' type=C operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'EQEQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQEQ
            arg0: CALL '<get-l>(): ArrayList<Any>' type=java.util.ArrayList<kotlin.Any> operator=GET_PROPERTY
              $this: GET_VAR 'c: C' type=C operator=null
            arg1: CALL '<get-l>(): ArrayList<Any>' type=java.util.ArrayList<kotlin.Any> operator=GET_PROPERTY
              $this: GET_VAR 'd: C' type=C operator=null
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail list identity'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'EQEQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQEQ
            arg0: GET_VAR 'c: C' type=C operator=null
            arg1: GET_VAR 'd: C' type=C operator=null
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail identity'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
