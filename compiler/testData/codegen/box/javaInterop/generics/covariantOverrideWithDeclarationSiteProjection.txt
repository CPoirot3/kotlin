MODULE <test-module>
  FILE /main.kt
    CLASS CLASS OutPair
      CONSTRUCTOR public constructor OutPair<out X, out Y>(x: X, y: Y)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'x: X' type=kotlin.Unit operator=null
            receiver: THIS of 'OutPair' type=OutPair<X, Y>
            value: GET_VAR 'value-parameter x: X' type=X operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD 'y: Y' type=kotlin.Unit operator=null
            receiver: THIS of 'OutPair' type=OutPair<X, Y>
            value: GET_VAR 'value-parameter y: Y' type=Y operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='OutPair'
      PROPERTY public final val x: X
        EXPRESSION_BODY
          GET_VAR 'value-parameter x: X' type=X operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val y: Y
        EXPRESSION_BODY
          GET_VAR 'value-parameter y: Y' type=Y operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS CLASS In
      CONSTRUCTOR public constructor In<in Z>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='In'
      FUN public final fun make(x: Z): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='make(Z): String'
            CALL 'toString() on Any?: String' type=kotlin.String operator=null
              $receiver: GET_VAR 'value-parameter x: Z' type=Z operator=null
    CLASS INTERFACE A
      FUN public abstract fun foo(): OutPair<@kotlin.jvm.JvmWildcard kotlin.CharSequence, @kotlin.jvm.JvmSuppressWildcards kotlin.Number>
      FUN public abstract fun bar(): In<@kotlin.jvm.JvmWildcard kotlin.String>
    CLASS CLASS B
      CONSTRUCTOR public constructor B()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='B'
      FUN public open override fun foo(): OutPair<kotlin.String, kotlin.Int>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='foo(): OutPair<String, Int>'
            CALL 'constructor OutPair(String, Int)' type=OutPair<kotlin.String, kotlin.Int> operator=null
              x: CONST String type=kotlin.String value='OK'
              y: CONST Int type=kotlin.Int value='123'
      FUN public open override fun bar(): In<kotlin.Any>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='bar(): In<Any>'
            CALL 'constructor In()' type=In<kotlin.Any> operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.String
            CALL 'test(): String!' type=kotlin.String! operator=null
