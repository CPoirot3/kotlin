MODULE <test-module>
  FILE /kt12708.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a: A
          CALL 'constructor B(Int)' type=B operator=null
            x: CONST Int type=kotlin.Int value='1'
        CALL 'copy(Int): A' type=A operator=null
          $this: GET_VAR 'a: A' type=A operator=null
          x: CONST Int type=kotlin.Int value='1'
        CALL 'component1(): Any' type=kotlin.Any operator=null
          $this: GET_VAR 'a: A' type=A operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
    CLASS INTERFACE A
      FUN public abstract fun copy(x: kotlin.Int): A
      FUN public abstract fun component1(): kotlin.Any
    CLASS CLASS B
      CONSTRUCTOR public constructor B(x: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'x: Int' type=kotlin.Unit operator=null
            receiver: THIS of 'B' type=B
            value: GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='B'
      PROPERTY public final val x: kotlin.Int
        EXPRESSION_BODY
          GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator override fun component1(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='component1(): Int'
            CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
              $this: THIS of 'B' type=B
      FUN public final override fun copy(x: kotlin.Int = ...): B
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='copy(Int = ...): B'
            CALL 'constructor B(Int)' type=B operator=null
              x: GET_VAR 'value-parameter x: Int = ...' type=kotlin.Int operator=null
      FUN public open override fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='toString(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='B('
              CONST String type=kotlin.String value='x='
              CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: THIS of 'B' type=B
              CONST String type=kotlin.String value=')'
      FUN public open override fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR 'tmp0_result: Int' type=kotlin.Unit operator=EQ
            CALL 'hashCode(): Int' type=kotlin.Int operator=null
              $this: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: THIS of 'B' type=B
          RETURN type=kotlin.Nothing from='hashCode(): Int'
            GET_VAR 'tmp0_result: Int' type=kotlin.Int operator=null
      FUN public open override fun equals(other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL 'EQEQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS of 'B' type=B
              arg1: GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=B
              GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: B
            TYPE_OP operator=CAST typeOperand=B
              GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS of 'B' type=B
                arg1: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR 'tmp0_other_with_cast: B' type=B operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
            CONST Boolean type=kotlin.Boolean value='true'
