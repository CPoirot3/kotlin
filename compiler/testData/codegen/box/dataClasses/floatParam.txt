MODULE <test-module>
  FILE /floatParam.kt
    PROPERTY public val NAN: kotlin.Float
      EXPRESSION_BODY
        GET_BACKING_FIELD 'NaN: Float' type=kotlin.Float operator=GET_PROPERTY
    CLASS CLASS A
      CONSTRUCTOR public constructor A(x: kotlin.Float)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'x: Float' type=kotlin.Unit operator=null
            receiver: THIS of 'A' type=A
            value: GET_VAR 'value-parameter x: Float' type=kotlin.Float operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      PROPERTY public final val x: kotlin.Float
        EXPRESSION_BODY
          GET_VAR 'value-parameter x: Float' type=kotlin.Float operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator fun component1(): kotlin.Float
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='component1(): Float'
            CALL '<get-x>(): Float' type=kotlin.Float operator=GET_PROPERTY
              $this: THIS of 'A' type=A
      FUN public final fun copy(x: kotlin.Float = ...): A
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='copy(Float = ...): A'
            CALL 'constructor A(Float)' type=A operator=null
              x: GET_VAR 'value-parameter x: Float = ...' type=kotlin.Float operator=null
      FUN public open override fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='toString(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='A('
              CONST String type=kotlin.String value='x='
              CALL '<get-x>(): Float' type=kotlin.Float operator=GET_PROPERTY
                $this: THIS of 'A' type=A
              CONST String type=kotlin.String value=')'
      FUN public open override fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR 'tmp0_result: Int' type=kotlin.Unit operator=EQ
            CALL 'hashCode(): Int' type=kotlin.Int operator=null
              $this: CALL '<get-x>(): Float' type=kotlin.Float operator=GET_PROPERTY
                $this: THIS of 'A' type=A
          RETURN type=kotlin.Nothing from='hashCode(): Int'
            GET_VAR 'tmp0_result: Int' type=kotlin.Int operator=null
      FUN public open override fun equals(other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL 'EQEQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS of 'A' type=A
              arg1: GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=A
              GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: A
            TYPE_OP operator=CAST typeOperand=A
              GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL '<get-x>(): Float' type=kotlin.Float operator=GET_PROPERTY
                  $this: THIS of 'A' type=A
                arg1: CALL '<get-x>(): Float' type=kotlin.Float operator=GET_PROPERTY
                  $this: GET_VAR 'tmp0_other_with_cast: A' type=A operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
            CONST Boolean type=kotlin.Boolean value='true'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
            arg0: CALL 'constructor A(Float)' type=A operator=null
              x: CONST Float type=kotlin.Float value='0.0'
            arg1: CALL 'constructor A(Float)' type=A operator=null
              x: CONST Float type=kotlin.Float value='-0.0'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail: +0 == -0'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
            arg0: CALL 'hashCode(): Int' type=kotlin.Int operator=null
              $this: CALL 'constructor A(Float)' type=A operator=null
                x: CONST Float type=kotlin.Float value='0.0'
            arg1: CALL 'hashCode(): Int' type=kotlin.Int operator=null
              $this: CALL 'constructor A(Float)' type=A operator=null
                x: CONST Float type=kotlin.Float value='-0.0'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail: hash(+0) == hash(-0)'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'constructor A(Float)' type=A operator=null
                x: CALL '<get-NAN>(): Float' type=kotlin.Float operator=GET_PROPERTY
              arg1: CALL 'constructor A(Float)' type=A operator=null
                x: CALL '<get-NAN>(): Float' type=kotlin.Float operator=GET_PROPERTY
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail: NaN != NaN'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor A(Float)' type=A operator=null
                  x: CALL '<get-NAN>(): Float' type=kotlin.Float operator=GET_PROPERTY
              arg1: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor A(Float)' type=A operator=null
                  x: CALL '<get-NAN>(): Float' type=kotlin.Float operator=GET_PROPERTY
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail: hash(NaN) != hash(NaN)'
        VAR val s: java.util.HashSet<A>
          CALL 'constructor HashSet()' type=java.util.HashSet<A> operator=null
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL 'iterator(): IntIterator' type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL 'rangeTo(Int): IntRange' type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='1'
                other: CONST Int type=kotlin.Int value='5'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val times: kotlin.Int
                CALL 'next(): Int' type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Boolean operator=null
                CALL 'add(A): Boolean' type=kotlin.Boolean operator=null
                  $this: GET_VAR 's: HashSet<A>' type=java.util.HashSet<A> operator=null
                  element: CALL 'constructor A(Float)' type=A operator=null
                    x: CONST Float type=kotlin.Float value='3.14'
                CALL 'add(A): Boolean' type=kotlin.Boolean operator=null
                  $this: GET_VAR 's: HashSet<A>' type=java.util.HashSet<A> operator=null
                  element: CALL 'constructor A(Float)' type=A operator=null
                    x: CONST Float type=kotlin.Float value='0.0'
                CALL 'add(A): Boolean' type=kotlin.Boolean operator=null
                  $this: GET_VAR 's: HashSet<A>' type=java.util.HashSet<A> operator=null
                  element: CALL 'constructor A(Float)' type=A operator=null
                    x: CONST Float type=kotlin.Float value='-0.0'
                CALL 'add(A): Boolean' type=kotlin.Boolean operator=null
                  $this: GET_VAR 's: HashSet<A>' type=java.util.HashSet<A> operator=null
                  element: CALL 'constructor A(Float)' type=A operator=null
                    x: CONST Float type=kotlin.Float value='-2.72'
                CALL 'add(A): Boolean' type=kotlin.Boolean operator=null
                  $this: GET_VAR 's: HashSet<A>' type=java.util.HashSet<A> operator=null
                  element: CALL 'constructor A(Float)' type=A operator=null
                    x: CALL '<get-NAN>(): Float' type=kotlin.Float operator=GET_PROPERTY
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=NOT_IN
            arg0: CALL 'contains(A): Boolean' type=kotlin.Boolean operator=NOT_IN
              $this: GET_VAR 's: HashSet<A>' type=java.util.HashSet<A> operator=null
              element: CALL 'constructor A(Float)' type=A operator=null
                x: CONST Float type=kotlin.Float value='3.14'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail: 3.14 not found'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=NOT_IN
            arg0: CALL 'contains(A): Boolean' type=kotlin.Boolean operator=NOT_IN
              $this: GET_VAR 's: HashSet<A>' type=java.util.HashSet<A> operator=null
              element: CALL 'constructor A(Float)' type=A operator=null
                x: CONST Float type=kotlin.Float value='0.0'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail: +0 not found'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=NOT_IN
            arg0: CALL 'contains(A): Boolean' type=kotlin.Boolean operator=NOT_IN
              $this: GET_VAR 's: HashSet<A>' type=java.util.HashSet<A> operator=null
              element: CALL 'constructor A(Float)' type=A operator=null
                x: CONST Float type=kotlin.Float value='-0.0'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail: -0 not found'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=NOT_IN
            arg0: CALL 'contains(A): Boolean' type=kotlin.Boolean operator=NOT_IN
              $this: GET_VAR 's: HashSet<A>' type=java.util.HashSet<A> operator=null
              element: CALL 'constructor A(Float)' type=A operator=null
                x: CONST Float type=kotlin.Float value='-2.72'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail: -2.72 not found'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=NOT_IN
            arg0: CALL 'contains(A): Boolean' type=kotlin.Boolean operator=NOT_IN
              $this: GET_VAR 's: HashSet<A>' type=java.util.HashSet<A> operator=null
              element: CALL 'constructor A(Float)' type=A operator=null
                x: CALL '<get-NAN>(): Float' type=kotlin.Float operator=GET_PROPERTY
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail: NaN not found'
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR 's: HashSet<A>' type=java.util.HashSet<A> operator=null
              arg1: CONST Int type=kotlin.Int value='5'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail '
              GET_VAR 's: HashSet<A>' type=java.util.HashSet<A> operator=null
