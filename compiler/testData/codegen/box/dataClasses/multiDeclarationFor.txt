MODULE <test-module>
  FILE /multiDeclarationFor.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(x: kotlin.Int, y: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'x: Int' type=kotlin.Unit operator=null
            receiver: THIS of 'A' type=A
            value: GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD 'y: String' type=kotlin.Unit operator=null
            receiver: THIS of 'A' type=A
            value: GET_VAR 'value-parameter y: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      PROPERTY public final val x: kotlin.Int
        EXPRESSION_BODY
          GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val y: kotlin.String
        EXPRESSION_BODY
          GET_VAR 'value-parameter y: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator fun component1(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='component1(): Int'
            CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
              $this: THIS of 'A' type=A
      FUN public final operator fun component2(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='component2(): String'
            CALL '<get-y>(): String' type=kotlin.String operator=GET_PROPERTY
              $this: THIS of 'A' type=A
      FUN public final fun copy(x: kotlin.Int = ..., y: kotlin.String = ...): A
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='copy(Int = ..., String = ...): A'
            CALL 'constructor A(Int, String)' type=A operator=null
              x: GET_VAR 'value-parameter x: Int = ...' type=kotlin.Int operator=null
              y: GET_VAR 'value-parameter y: String = ...' type=kotlin.String operator=null
      FUN public open override fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='toString(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='A('
              CONST String type=kotlin.String value='x='
              CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: THIS of 'A' type=A
              CONST String type=kotlin.String value=', '
              CONST String type=kotlin.String value='y='
              CALL '<get-y>(): String' type=kotlin.String operator=GET_PROPERTY
                $this: THIS of 'A' type=A
              CONST String type=kotlin.String value=')'
      FUN public open override fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR 'tmp0_result: Int' type=kotlin.Unit operator=EQ
            CALL 'hashCode(): Int' type=kotlin.Int operator=null
              $this: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: THIS of 'A' type=A
          SET_VAR 'tmp0_result: Int' type=kotlin.Unit operator=EQ
            CALL 'plus(Int): Int' type=kotlin.Int operator=null
              $this: CALL 'times(Int): Int' type=kotlin.Int operator=null
                $this: GET_VAR 'tmp0_result: Int' type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='31'
              other: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                $this: CALL '<get-y>(): String' type=kotlin.String operator=GET_PROPERTY
                  $this: THIS of 'A' type=A
          RETURN type=kotlin.Nothing from='hashCode(): Int'
            GET_VAR 'tmp0_result: Int' type=kotlin.Int operator=null
      FUN public open override fun equals(other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL 'EQEQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS of 'A' type=A
              arg1: GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=A
              GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: A
            TYPE_OP operator=CAST typeOperand=A
              GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS of 'A' type=A
                arg1: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR 'tmp0_other_with_cast: A' type=A operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          WHEN type=kotlin.Unit operator=null
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL '<get-y>(): String' type=kotlin.String operator=GET_PROPERTY
                  $this: THIS of 'A' type=A
                arg1: CALL '<get-y>(): String' type=kotlin.String operator=GET_PROPERTY
                  $this: GET_VAR 'tmp0_other_with_cast: A' type=A operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
            CONST Boolean type=kotlin.Boolean value='true'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val arr: kotlin.Array<A>
          CALL 'constructor Array(Int, (Int) -> A)' type=kotlin.Array<A> operator=null
            size: CONST Int type=kotlin.Int value='5'
            init: BLOCK type=(kotlin.Int) -> A operator=LAMBDA
              FUN local final fun <anonymous>(i: kotlin.Int): A
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(Int): A'
                    CALL 'constructor A(Int, String)' type=A operator=null
                      x: GET_VAR 'value-parameter i: Int' type=kotlin.Int operator=null
                      y: CALL 'toString(): String' type=kotlin.String operator=null
                        $this: GET_VAR 'value-parameter i: Int' type=kotlin.Int operator=null
              CALLABLE_REFERENCE '<anonymous>(Int): A' type=(kotlin.Int) -> A operator=LAMBDA
        VAR var sum: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        VAR var str: kotlin.String
          CONST String type=kotlin.String value=''
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<A>
            CALL 'iterator(): Iterator<A>' type=kotlin.collections.Iterator<A> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR 'arr: Array<A>' type=kotlin.Array<A> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp0_iterator: Iterator<A>' type=kotlin.collections.Iterator<A> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val tmp1_loop_parameter: A
                CALL 'next(): A' type=A operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp0_iterator: Iterator<A>' type=kotlin.collections.Iterator<A> operator=null
              VAR val x: kotlin.Int
                CALL 'component1(): Int' type=kotlin.Int operator=COMPONENT_N(index=1)
                  $this: GET_VAR 'tmp1_loop_parameter: A' type=A operator=null
              VAR val y: kotlin.String
                CALL 'component2(): String' type=kotlin.String operator=COMPONENT_N(index=2)
                  $this: GET_VAR 'tmp1_loop_parameter: A' type=A operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR 'sum: Int' type=kotlin.Unit operator=PLUSEQ
                  CALL 'plus(Int): Int' type=kotlin.Int operator=PLUSEQ
                    $this: GET_VAR 'sum: Int' type=kotlin.Int operator=PLUSEQ
                    other: GET_VAR 'x: Int' type=kotlin.Int operator=null
                SET_VAR 'str: String' type=kotlin.Unit operator=PLUSEQ
                  CALL 'plus(Any?): String' type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR 'str: String' type=kotlin.String operator=PLUSEQ
                    other: GET_VAR 'y: String' type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: WHEN type=kotlin.Boolean operator=ANDAND
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'sum: Int' type=kotlin.Int operator=null
                arg1: CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                  $this: CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                    $this: CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                      $this: CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                        $this: CONST Int type=kotlin.Int value='0'
                        other: CONST Int type=kotlin.Int value='1'
                      other: CONST Int type=kotlin.Int value='2'
                    other: CONST Int type=kotlin.Int value='3'
                  other: CONST Int type=kotlin.Int value='4'
              then: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'str: String' type=kotlin.String operator=null
                arg1: CONST String type=kotlin.String value='01234'
              else: CONST Boolean type=kotlin.Boolean value='false'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail '
              GET_VAR 'sum: Int' type=kotlin.Int operator=null
              CONST String type=kotlin.String value=' '
              GET_VAR 'str: String' type=kotlin.String operator=null
