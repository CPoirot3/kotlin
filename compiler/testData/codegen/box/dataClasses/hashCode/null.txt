MODULE <test-module>
  FILE /null.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(a: kotlin.Any?, x: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'a: Any?' type=kotlin.Unit operator=null
            receiver: THIS of 'A' type=A
            value: GET_VAR 'value-parameter a: Any?' type=kotlin.Any? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD 'x: Int' type=kotlin.Unit operator=null
            receiver: THIS of 'A' type=A
            value: GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      PROPERTY public final val a: kotlin.Any?
        EXPRESSION_BODY
          GET_VAR 'value-parameter a: Any?' type=kotlin.Any? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final var x: kotlin.Int
        EXPRESSION_BODY
          GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator fun component1(): kotlin.Any?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='component1(): Any?'
            CALL '<get-a>(): Any?' type=kotlin.Any? operator=GET_PROPERTY
              $this: THIS of 'A' type=A
      FUN public final operator fun component2(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='component2(): Int'
            CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
              $this: THIS of 'A' type=A
      FUN public final fun copy(a: kotlin.Any? = ..., x: kotlin.Int = ...): A
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='copy(Any? = ..., Int = ...): A'
            CALL 'constructor A(Any?, Int)' type=A operator=null
              a: GET_VAR 'value-parameter a: Any? = ...' type=kotlin.Any? operator=null
              x: GET_VAR 'value-parameter x: Int = ...' type=kotlin.Int operator=null
      FUN public open override fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='toString(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='A('
              CONST String type=kotlin.String value='a='
              CALL '<get-a>(): Any?' type=kotlin.Any? operator=GET_PROPERTY
                $this: THIS of 'A' type=A
              CONST String type=kotlin.String value=', '
              CONST String type=kotlin.String value='x='
              CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: THIS of 'A' type=A
              CONST String type=kotlin.String value=')'
      FUN public open override fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR 'tmp0_result: Int' type=kotlin.Unit operator=EQ
            BLOCK type=kotlin.Int operator=null
              VAR val tmp1: kotlin.Any?
                CALL '<get-a>(): Any?' type=kotlin.Any? operator=GET_PROPERTY
                  $this: THIS of 'A' type=A
              WHEN type=kotlin.Int operator=null
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR 'tmp1: Any?' type=kotlin.Any? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CONST Int type=kotlin.Int value='0'
                else: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                  $this: GET_VAR 'tmp1: Any?' type=kotlin.Any? operator=null
          SET_VAR 'tmp0_result: Int' type=kotlin.Unit operator=EQ
            CALL 'plus(Int): Int' type=kotlin.Int operator=null
              $this: CALL 'times(Int): Int' type=kotlin.Int operator=null
                $this: GET_VAR 'tmp0_result: Int' type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='31'
              other: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                $this: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS of 'A' type=A
          RETURN type=kotlin.Nothing from='hashCode(): Int'
            GET_VAR 'tmp0_result: Int' type=kotlin.Int operator=null
      FUN public open override fun equals(other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL 'EQEQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS of 'A' type=A
              arg1: GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=A
              GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: A
            TYPE_OP operator=CAST typeOperand=A
              GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL '<get-a>(): Any?' type=kotlin.Any? operator=GET_PROPERTY
                  $this: THIS of 'A' type=A
                arg1: CALL '<get-a>(): Any?' type=kotlin.Any? operator=GET_PROPERTY
                  $this: GET_VAR 'tmp0_other_with_cast: A' type=A operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          WHEN type=kotlin.Unit operator=null
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS of 'A' type=A
                arg1: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR 'tmp0_other_with_cast: A' type=A operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
            CONST Boolean type=kotlin.Boolean value='true'
    CLASS CLASS B
      CONSTRUCTOR public constructor B(a: kotlin.Any?)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'a: Any?' type=kotlin.Unit operator=null
            receiver: THIS of 'B' type=B
            value: GET_VAR 'value-parameter a: Any?' type=kotlin.Any? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='B'
      PROPERTY public final val a: kotlin.Any?
        EXPRESSION_BODY
          GET_VAR 'value-parameter a: Any?' type=kotlin.Any? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator fun component1(): kotlin.Any?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='component1(): Any?'
            CALL '<get-a>(): Any?' type=kotlin.Any? operator=GET_PROPERTY
              $this: THIS of 'B' type=B
      FUN public final fun copy(a: kotlin.Any? = ...): B
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='copy(Any? = ...): B'
            CALL 'constructor B(Any?)' type=B operator=null
              a: GET_VAR 'value-parameter a: Any? = ...' type=kotlin.Any? operator=null
      FUN public open override fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='toString(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='B('
              CONST String type=kotlin.String value='a='
              CALL '<get-a>(): Any?' type=kotlin.Any? operator=GET_PROPERTY
                $this: THIS of 'B' type=B
              CONST String type=kotlin.String value=')'
      FUN public open override fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR 'tmp0_result: Int' type=kotlin.Unit operator=EQ
            BLOCK type=kotlin.Int operator=null
              VAR val tmp1: kotlin.Any?
                CALL '<get-a>(): Any?' type=kotlin.Any? operator=GET_PROPERTY
                  $this: THIS of 'B' type=B
              WHEN type=kotlin.Int operator=null
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR 'tmp1: Any?' type=kotlin.Any? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CONST Int type=kotlin.Int value='0'
                else: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                  $this: GET_VAR 'tmp1: Any?' type=kotlin.Any? operator=null
          RETURN type=kotlin.Nothing from='hashCode(): Int'
            GET_VAR 'tmp0_result: Int' type=kotlin.Int operator=null
      FUN public open override fun equals(other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL 'EQEQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS of 'B' type=B
              arg1: GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=B
              GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: B
            TYPE_OP operator=CAST typeOperand=B
              GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL '<get-a>(): Any?' type=kotlin.Any? operator=GET_PROPERTY
                  $this: THIS of 'B' type=B
                arg1: CALL '<get-a>(): Any?' type=kotlin.Any? operator=GET_PROPERTY
                  $this: GET_VAR 'tmp0_other_with_cast: B' type=B operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
            CONST Boolean type=kotlin.Boolean value='true'
    CLASS CLASS C
      CONSTRUCTOR public constructor C(a: kotlin.Int, x: kotlin.Int?)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'a: Int' type=kotlin.Unit operator=null
            receiver: THIS of 'C' type=C
            value: GET_VAR 'value-parameter a: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD 'x: Int?' type=kotlin.Unit operator=null
            receiver: THIS of 'C' type=C
            value: GET_VAR 'value-parameter x: Int?' type=kotlin.Int? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='C'
      PROPERTY public final val a: kotlin.Int
        EXPRESSION_BODY
          GET_VAR 'value-parameter a: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final var x: kotlin.Int?
        EXPRESSION_BODY
          GET_VAR 'value-parameter x: Int?' type=kotlin.Int? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator fun component1(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='component1(): Int'
            CALL '<get-a>(): Int' type=kotlin.Int operator=GET_PROPERTY
              $this: THIS of 'C' type=C
      FUN public final operator fun component2(): kotlin.Int?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='component2(): Int?'
            CALL '<get-x>(): Int?' type=kotlin.Int? operator=GET_PROPERTY
              $this: THIS of 'C' type=C
      FUN public final fun copy(a: kotlin.Int = ..., x: kotlin.Int? = ...): C
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='copy(Int = ..., Int? = ...): C'
            CALL 'constructor C(Int, Int?)' type=C operator=null
              a: GET_VAR 'value-parameter a: Int = ...' type=kotlin.Int operator=null
              x: GET_VAR 'value-parameter x: Int? = ...' type=kotlin.Int? operator=null
      FUN public open override fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='toString(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='C('
              CONST String type=kotlin.String value='a='
              CALL '<get-a>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: THIS of 'C' type=C
              CONST String type=kotlin.String value=', '
              CONST String type=kotlin.String value='x='
              CALL '<get-x>(): Int?' type=kotlin.Int? operator=GET_PROPERTY
                $this: THIS of 'C' type=C
              CONST String type=kotlin.String value=')'
      FUN public open override fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR 'tmp0_result: Int' type=kotlin.Unit operator=EQ
            CALL 'hashCode(): Int' type=kotlin.Int operator=null
              $this: CALL '<get-a>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: THIS of 'C' type=C
          SET_VAR 'tmp0_result: Int' type=kotlin.Unit operator=EQ
            CALL 'plus(Int): Int' type=kotlin.Int operator=null
              $this: CALL 'times(Int): Int' type=kotlin.Int operator=null
                $this: GET_VAR 'tmp0_result: Int' type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='31'
              other: BLOCK type=kotlin.Int operator=null
                VAR val tmp1: kotlin.Int?
                  CALL '<get-x>(): Int?' type=kotlin.Int? operator=GET_PROPERTY
                    $this: THIS of 'C' type=C
                WHEN type=kotlin.Int operator=null
                  if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR 'tmp1: Int?' type=kotlin.Int? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Int type=kotlin.Int value='0'
                  else: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                    $this: GET_VAR 'tmp1: Int?' type=kotlin.Int? operator=null
          RETURN type=kotlin.Nothing from='hashCode(): Int'
            GET_VAR 'tmp0_result: Int' type=kotlin.Int operator=null
      FUN public open override fun equals(other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL 'EQEQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS of 'C' type=C
              arg1: GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=C
              GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: C
            TYPE_OP operator=CAST typeOperand=C
              GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL '<get-a>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS of 'C' type=C
                arg1: CALL '<get-a>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR 'tmp0_other_with_cast: C' type=C operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          WHEN type=kotlin.Unit operator=null
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL '<get-x>(): Int?' type=kotlin.Int? operator=GET_PROPERTY
                  $this: THIS of 'C' type=C
                arg1: CALL '<get-x>(): Int?' type=kotlin.Int? operator=GET_PROPERTY
                  $this: GET_VAR 'tmp0_other_with_cast: C' type=C operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
            CONST Boolean type=kotlin.Boolean value='true'
    CLASS CLASS D
      CONSTRUCTOR public constructor D(a: kotlin.Int?)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'a: Int?' type=kotlin.Unit operator=null
            receiver: THIS of 'D' type=D
            value: GET_VAR 'value-parameter a: Int?' type=kotlin.Int? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='D'
      PROPERTY public final val a: kotlin.Int?
        EXPRESSION_BODY
          GET_VAR 'value-parameter a: Int?' type=kotlin.Int? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator fun component1(): kotlin.Int?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='component1(): Int?'
            CALL '<get-a>(): Int?' type=kotlin.Int? operator=GET_PROPERTY
              $this: THIS of 'D' type=D
      FUN public final fun copy(a: kotlin.Int? = ...): D
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='copy(Int? = ...): D'
            CALL 'constructor D(Int?)' type=D operator=null
              a: GET_VAR 'value-parameter a: Int? = ...' type=kotlin.Int? operator=null
      FUN public open override fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='toString(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='D('
              CONST String type=kotlin.String value='a='
              CALL '<get-a>(): Int?' type=kotlin.Int? operator=GET_PROPERTY
                $this: THIS of 'D' type=D
              CONST String type=kotlin.String value=')'
      FUN public open override fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR 'tmp0_result: Int' type=kotlin.Unit operator=EQ
            BLOCK type=kotlin.Int operator=null
              VAR val tmp1: kotlin.Int?
                CALL '<get-a>(): Int?' type=kotlin.Int? operator=GET_PROPERTY
                  $this: THIS of 'D' type=D
              WHEN type=kotlin.Int operator=null
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR 'tmp1: Int?' type=kotlin.Int? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CONST Int type=kotlin.Int value='0'
                else: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                  $this: GET_VAR 'tmp1: Int?' type=kotlin.Int? operator=null
          RETURN type=kotlin.Nothing from='hashCode(): Int'
            GET_VAR 'tmp0_result: Int' type=kotlin.Int operator=null
      FUN public open override fun equals(other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL 'EQEQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS of 'D' type=D
              arg1: GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=D
              GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: D
            TYPE_OP operator=CAST typeOperand=D
              GET_VAR 'value-parameter other: Any?' type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL '<get-a>(): Int?' type=kotlin.Int? operator=GET_PROPERTY
                  $this: THIS of 'D' type=D
                arg1: CALL '<get-a>(): Int?' type=kotlin.Int? operator=GET_PROPERTY
                  $this: GET_VAR 'tmp0_other_with_cast: D' type=D operator=null
            then: RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
            CONST Boolean type=kotlin.Boolean value='true'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor A(Any?, Int)' type=A operator=null
                  a: CONST Null type=kotlin.Nothing? value='null'
                  x: CONST Int type=kotlin.Int value='19'
              arg1: CONST Int type=kotlin.Int value='19'
          then: CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor A(Any?, Int)' type=A operator=null
                  a: CONST Int type=kotlin.Int value='239'
                  x: CONST Int type=kotlin.Int value='19'
              arg1: CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                $this: CALL 'times(Int): Int' type=kotlin.Int operator=MUL
                  $this: CONST Int type=kotlin.Int value='239'
                  other: CONST Int type=kotlin.Int value='31'
                other: CONST Int type=kotlin.Int value='19'
          then: CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor B(Any?)' type=B operator=null
                  a: CONST Null type=kotlin.Nothing? value='null'
              arg1: CONST Int type=kotlin.Int value='0'
          then: CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor B(Any?)' type=B operator=null
                  a: CONST Int type=kotlin.Int value='239'
              arg1: CONST Int type=kotlin.Int value='239'
          then: CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor C(Int, Int?)' type=C operator=null
                  a: CONST Int type=kotlin.Int value='239'
                  x: CONST Int type=kotlin.Int value='19'
              arg1: CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                $this: CALL 'times(Int): Int' type=kotlin.Int operator=MUL
                  $this: CONST Int type=kotlin.Int value='239'
                  other: CONST Int type=kotlin.Int value='31'
                other: CONST Int type=kotlin.Int value='19'
          then: CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor C(Int, Int?)' type=C operator=null
                  a: CONST Int type=kotlin.Int value='239'
                  x: CONST Null type=kotlin.Nothing? value='null'
              arg1: CALL 'times(Int): Int' type=kotlin.Int operator=MUL
                $this: CONST Int type=kotlin.Int value='239'
                other: CONST Int type=kotlin.Int value='31'
          then: CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor D(Int?)' type=D operator=null
                  a: CONST Int type=kotlin.Int value='239'
              arg1: CONST Int type=kotlin.Int value='239'
          then: CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor D(Int?)' type=D operator=null
                  a: CONST Null type=kotlin.Nothing? value='null'
              arg1: CONST Int type=kotlin.Int value='0'
          then: CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
