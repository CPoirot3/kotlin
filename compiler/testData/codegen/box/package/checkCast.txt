MODULE <test-module>
  FILE /checkCast.kt
    CLASS CLASS C
      CONSTRUCTOR public constructor C(x: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'x: Int' type=kotlin.Unit operator=null
            receiver: THIS of 'C' type=C
            value: GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='C'
      PROPERTY public final val x: kotlin.Int
        EXPRESSION_BODY
          GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public open override fun equals(rhs: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=IF
            if: TYPE_OP operator=INSTANCEOF typeOperand=C
              GET_VAR 'value-parameter rhs: Any?' type=kotlin.Any? operator=null
            then: BLOCK type=kotlin.Nothing operator=null
              VAR val rhsC: C
                TYPE_OP operator=CAST typeOperand=C
                  GET_VAR 'value-parameter rhs: Any?' type=kotlin.Any? operator=null
              RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
                CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                    $this: GET_VAR 'rhsC: C' type=C operator=null
                  arg1: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                    $this: THIS of 'C' type=C
          RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
            CONST Boolean type=kotlin.Boolean value='false'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val c1: C
          CALL 'constructor C(Int)' type=C operator=null
            x: CONST Int type=kotlin.Int value='10'
        VAR val c2: C
          CALL 'constructor C(Int)' type=C operator=null
            x: CONST Int type=kotlin.Int value='10'
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'c1: C' type=C operator=null
              arg1: GET_VAR 'c2: C' type=C operator=null
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
