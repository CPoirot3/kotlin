MODULE <test-module>
  FILE /capturedLocalValNoInline.kt
    FUN public fun <T> run(f: () -> T): T
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='run(() -> T): T'
          CALL 'invoke(): T' type=T operator=INVOKE
            $this: GET_VAR 'value-parameter f: () -> T' type=() -> T operator=VARIABLE_AS_FUNCTION
    CLASS CLASS Delegate
      CONSTRUCTOR public constructor Delegate()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Delegate'
      FUN public final operator fun getValue(t: kotlin.Any?, p: kotlin.reflect.KProperty<*>): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getValue(Any?, KProperty<*>): Int'
            CONST Int type=kotlin.Int value='1'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        LOCAL_DELEGATED_PROPERTY val prop: kotlin.Int
          VAR val `prop$delegate`: foo.Delegate
            CALL 'constructor Delegate()' type=foo.Delegate operator=null
          LOCAL_PROPERTY_ACCESSOR <get-prop>(): Int
            BLOCK_BODY
              RETURN type=kotlin.Nothing from='<get-prop>(): Int'
                CALL 'getValue(Any?, KProperty<*>): Int' type=kotlin.Int operator=null
                  $this: GET_VAR '`prop$delegate`: Delegate' type=foo.Delegate operator=null
                  t: CONST Null type=kotlin.Nothing? value='null'
                  p: CALLABLE_REFERENCE 'prop: Int' type=kotlin.reflect.KProperty0<kotlin.Int> operator=PROPERTY_REFERENCE_FOR_DELEGATE
        RETURN type=kotlin.Nothing from='box(): String'
          CALL 'run(() -> String): String' type=kotlin.String operator=null
            f: BLOCK type=() -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(): String'
                    WHEN type=kotlin.String operator=IF
                      if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                        arg0: CALL '<get-prop>(): Int' type=kotlin.Int operator=GET_LOCAL_PROPERTY
                        arg1: CONST Int type=kotlin.Int value='1'
                      then: CONST String type=kotlin.String value='OK'
                      else: CONST String type=kotlin.String value='fail'
              CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
