MODULE <test-module>
  FILE /kt1770.kt
    CLASS CLASS MyElement
      CONSTRUCTOR public constructor MyElement(e: org.w3c.dom.Element)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='MyElement'
      PROPERTY val `MyElement$Element$delegate`: org.w3c.dom.Element
        EXPRESSION_BODY
          GET_VAR 'value-parameter e: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun appendChild(p0: org.w3c.dom.Node!): org.w3c.dom.Node!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='appendChild(Node!): Node!'
            CALL 'appendChild(Node!): Node!' type=org.w3c.dom.Node! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: Node!' type=org.w3c.dom.Node! operator=null
      FUN public open override fun cloneNode(p0: kotlin.Boolean): org.w3c.dom.Node!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='cloneNode(Boolean): Node!'
            CALL 'cloneNode(Boolean): Node!' type=org.w3c.dom.Node! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: Boolean' type=kotlin.Boolean operator=null
      FUN public open override fun compareDocumentPosition(p0: org.w3c.dom.Node!): kotlin.Short
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='compareDocumentPosition(Node!): Short'
            CALL 'compareDocumentPosition(Node!): Short' type=kotlin.Short operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: Node!' type=org.w3c.dom.Node! operator=null
      FUN public open override fun getAttribute(p0: kotlin.String!): kotlin.String!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getAttribute(String!): String!'
            CALL 'getAttribute(String!): String!' type=kotlin.String! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
      FUN public open override fun getAttributeNS(p0: kotlin.String!, p1: kotlin.String!): kotlin.String!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getAttributeNS(String!, String!): String!'
            CALL 'getAttributeNS(String!, String!): String!' type=kotlin.String! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
              p1: GET_VAR 'value-parameter p1: String!' type=kotlin.String! operator=null
      FUN public open override fun getAttributeNode(p0: kotlin.String!): org.w3c.dom.Attr!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getAttributeNode(String!): Attr!'
            CALL 'getAttributeNode(String!): Attr!' type=org.w3c.dom.Attr! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
      FUN public open override fun getAttributeNodeNS(p0: kotlin.String!, p1: kotlin.String!): org.w3c.dom.Attr!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getAttributeNodeNS(String!, String!): Attr!'
            CALL 'getAttributeNodeNS(String!, String!): Attr!' type=org.w3c.dom.Attr! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
              p1: GET_VAR 'value-parameter p1: String!' type=kotlin.String! operator=null
      FUN public open override fun getAttributes(): org.w3c.dom.NamedNodeMap!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getAttributes(): NamedNodeMap!'
            CALL 'getAttributes(): NamedNodeMap!' type=org.w3c.dom.NamedNodeMap! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getBaseURI(): kotlin.String!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getBaseURI(): String!'
            CALL 'getBaseURI(): String!' type=kotlin.String! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getChildNodes(): org.w3c.dom.NodeList!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getChildNodes(): NodeList!'
            CALL 'getChildNodes(): NodeList!' type=org.w3c.dom.NodeList! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getElementsByTagName(p0: kotlin.String!): org.w3c.dom.NodeList!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getElementsByTagName(String!): NodeList!'
            CALL 'getElementsByTagName(String!): NodeList!' type=org.w3c.dom.NodeList! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
      FUN public open override fun getElementsByTagNameNS(p0: kotlin.String!, p1: kotlin.String!): org.w3c.dom.NodeList!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getElementsByTagNameNS(String!, String!): NodeList!'
            CALL 'getElementsByTagNameNS(String!, String!): NodeList!' type=org.w3c.dom.NodeList! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
              p1: GET_VAR 'value-parameter p1: String!' type=kotlin.String! operator=null
      FUN public open override fun getFeature(p0: kotlin.String!, p1: kotlin.String!): kotlin.Any!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getFeature(String!, String!): Any!'
            CALL 'getFeature(String!, String!): Any!' type=kotlin.Any! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
              p1: GET_VAR 'value-parameter p1: String!' type=kotlin.String! operator=null
      FUN public open override fun getFirstChild(): org.w3c.dom.Node!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getFirstChild(): Node!'
            CALL 'getFirstChild(): Node!' type=org.w3c.dom.Node! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getLastChild(): org.w3c.dom.Node!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getLastChild(): Node!'
            CALL 'getLastChild(): Node!' type=org.w3c.dom.Node! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getLocalName(): kotlin.String!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getLocalName(): String!'
            CALL 'getLocalName(): String!' type=kotlin.String! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getNamespaceURI(): kotlin.String!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getNamespaceURI(): String!'
            CALL 'getNamespaceURI(): String!' type=kotlin.String! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getNextSibling(): org.w3c.dom.Node!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getNextSibling(): Node!'
            CALL 'getNextSibling(): Node!' type=org.w3c.dom.Node! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getNodeName(): kotlin.String!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getNodeName(): String!'
            CALL 'getNodeName(): String!' type=kotlin.String! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getNodeType(): kotlin.Short
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getNodeType(): Short'
            CALL 'getNodeType(): Short' type=kotlin.Short operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getNodeValue(): kotlin.String!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getNodeValue(): String!'
            CALL 'getNodeValue(): String!' type=kotlin.String! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getOwnerDocument(): org.w3c.dom.Document!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getOwnerDocument(): Document!'
            CALL 'getOwnerDocument(): Document!' type=org.w3c.dom.Document! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getParentNode(): org.w3c.dom.Node!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getParentNode(): Node!'
            CALL 'getParentNode(): Node!' type=org.w3c.dom.Node! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getPrefix(): kotlin.String!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getPrefix(): String!'
            CALL 'getPrefix(): String!' type=kotlin.String! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getPreviousSibling(): org.w3c.dom.Node!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getPreviousSibling(): Node!'
            CALL 'getPreviousSibling(): Node!' type=org.w3c.dom.Node! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getSchemaTypeInfo(): org.w3c.dom.TypeInfo!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getSchemaTypeInfo(): TypeInfo!'
            CALL 'getSchemaTypeInfo(): TypeInfo!' type=org.w3c.dom.TypeInfo! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getTagName(): kotlin.String!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getTagName(): String!'
            CALL 'getTagName(): String!' type=kotlin.String! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getTextContent(): kotlin.String!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getTextContent(): String!'
            CALL 'getTextContent(): String!' type=kotlin.String! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun getUserData(p0: kotlin.String!): kotlin.Any!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getUserData(String!): Any!'
            CALL 'getUserData(String!): Any!' type=kotlin.Any! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
      FUN public open override fun hasAttribute(p0: kotlin.String!): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='hasAttribute(String!): Boolean'
            CALL 'hasAttribute(String!): Boolean' type=kotlin.Boolean operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
      FUN public open override fun hasAttributeNS(p0: kotlin.String!, p1: kotlin.String!): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='hasAttributeNS(String!, String!): Boolean'
            CALL 'hasAttributeNS(String!, String!): Boolean' type=kotlin.Boolean operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
              p1: GET_VAR 'value-parameter p1: String!' type=kotlin.String! operator=null
      FUN public open override fun hasAttributes(): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='hasAttributes(): Boolean'
            CALL 'hasAttributes(): Boolean' type=kotlin.Boolean operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun hasChildNodes(): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='hasChildNodes(): Boolean'
            CALL 'hasChildNodes(): Boolean' type=kotlin.Boolean operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun insertBefore(p0: org.w3c.dom.Node!, p1: org.w3c.dom.Node!): org.w3c.dom.Node!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='insertBefore(Node!, Node!): Node!'
            CALL 'insertBefore(Node!, Node!): Node!' type=org.w3c.dom.Node! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: Node!' type=org.w3c.dom.Node! operator=null
              p1: GET_VAR 'value-parameter p1: Node!' type=org.w3c.dom.Node! operator=null
      FUN public open override fun isDefaultNamespace(p0: kotlin.String!): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='isDefaultNamespace(String!): Boolean'
            CALL 'isDefaultNamespace(String!): Boolean' type=kotlin.Boolean operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
      FUN public open override fun isEqualNode(p0: org.w3c.dom.Node!): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='isEqualNode(Node!): Boolean'
            CALL 'isEqualNode(Node!): Boolean' type=kotlin.Boolean operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: Node!' type=org.w3c.dom.Node! operator=null
      FUN public open override fun isSameNode(p0: org.w3c.dom.Node!): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='isSameNode(Node!): Boolean'
            CALL 'isSameNode(Node!): Boolean' type=kotlin.Boolean operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: Node!' type=org.w3c.dom.Node! operator=null
      FUN public open override fun isSupported(p0: kotlin.String!, p1: kotlin.String!): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='isSupported(String!, String!): Boolean'
            CALL 'isSupported(String!, String!): Boolean' type=kotlin.Boolean operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
              p1: GET_VAR 'value-parameter p1: String!' type=kotlin.String! operator=null
      FUN public open override fun lookupNamespaceURI(p0: kotlin.String!): kotlin.String!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='lookupNamespaceURI(String!): String!'
            CALL 'lookupNamespaceURI(String!): String!' type=kotlin.String! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
      FUN public open override fun lookupPrefix(p0: kotlin.String!): kotlin.String!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='lookupPrefix(String!): String!'
            CALL 'lookupPrefix(String!): String!' type=kotlin.String! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
      FUN public open override fun normalize(): kotlin.Unit
        BLOCK_BODY
          CALL 'normalize(): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
      FUN public open override fun removeAttribute(p0: kotlin.String!): kotlin.Unit
        BLOCK_BODY
          CALL 'removeAttribute(String!): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
            p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
      FUN public open override fun removeAttributeNS(p0: kotlin.String!, p1: kotlin.String!): kotlin.Unit
        BLOCK_BODY
          CALL 'removeAttributeNS(String!, String!): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
            p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
            p1: GET_VAR 'value-parameter p1: String!' type=kotlin.String! operator=null
      FUN public open override fun removeAttributeNode(p0: org.w3c.dom.Attr!): org.w3c.dom.Attr!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='removeAttributeNode(Attr!): Attr!'
            CALL 'removeAttributeNode(Attr!): Attr!' type=org.w3c.dom.Attr! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: Attr!' type=org.w3c.dom.Attr! operator=null
      FUN public open override fun removeChild(p0: org.w3c.dom.Node!): org.w3c.dom.Node!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='removeChild(Node!): Node!'
            CALL 'removeChild(Node!): Node!' type=org.w3c.dom.Node! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: Node!' type=org.w3c.dom.Node! operator=null
      FUN public open override fun replaceChild(p0: org.w3c.dom.Node!, p1: org.w3c.dom.Node!): org.w3c.dom.Node!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='replaceChild(Node!, Node!): Node!'
            CALL 'replaceChild(Node!, Node!): Node!' type=org.w3c.dom.Node! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: Node!' type=org.w3c.dom.Node! operator=null
              p1: GET_VAR 'value-parameter p1: Node!' type=org.w3c.dom.Node! operator=null
      FUN public open override fun setAttribute(p0: kotlin.String!, p1: kotlin.String!): kotlin.Unit
        BLOCK_BODY
          CALL 'setAttribute(String!, String!): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
            p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
            p1: GET_VAR 'value-parameter p1: String!' type=kotlin.String! operator=null
      FUN public open override fun setAttributeNS(p0: kotlin.String!, p1: kotlin.String!, p2: kotlin.String!): kotlin.Unit
        BLOCK_BODY
          CALL 'setAttributeNS(String!, String!, String!): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
            p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
            p1: GET_VAR 'value-parameter p1: String!' type=kotlin.String! operator=null
            p2: GET_VAR 'value-parameter p2: String!' type=kotlin.String! operator=null
      FUN public open override fun setAttributeNode(p0: org.w3c.dom.Attr!): org.w3c.dom.Attr!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='setAttributeNode(Attr!): Attr!'
            CALL 'setAttributeNode(Attr!): Attr!' type=org.w3c.dom.Attr! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: Attr!' type=org.w3c.dom.Attr! operator=null
      FUN public open override fun setAttributeNodeNS(p0: org.w3c.dom.Attr!): org.w3c.dom.Attr!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='setAttributeNodeNS(Attr!): Attr!'
            CALL 'setAttributeNodeNS(Attr!): Attr!' type=org.w3c.dom.Attr! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: Attr!' type=org.w3c.dom.Attr! operator=null
      FUN public open override fun setIdAttribute(p0: kotlin.String!, p1: kotlin.Boolean): kotlin.Unit
        BLOCK_BODY
          CALL 'setIdAttribute(String!, Boolean): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
            p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
            p1: GET_VAR 'value-parameter p1: Boolean' type=kotlin.Boolean operator=null
      FUN public open override fun setIdAttributeNS(p0: kotlin.String!, p1: kotlin.String!, p2: kotlin.Boolean): kotlin.Unit
        BLOCK_BODY
          CALL 'setIdAttributeNS(String!, String!, Boolean): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
            p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
            p1: GET_VAR 'value-parameter p1: String!' type=kotlin.String! operator=null
            p2: GET_VAR 'value-parameter p2: Boolean' type=kotlin.Boolean operator=null
      FUN public open override fun setIdAttributeNode(p0: org.w3c.dom.Attr!, p1: kotlin.Boolean): kotlin.Unit
        BLOCK_BODY
          CALL 'setIdAttributeNode(Attr!, Boolean): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
            p0: GET_VAR 'value-parameter p0: Attr!' type=org.w3c.dom.Attr! operator=null
            p1: GET_VAR 'value-parameter p1: Boolean' type=kotlin.Boolean operator=null
      FUN public open override fun setNodeValue(p0: kotlin.String!): kotlin.Unit
        BLOCK_BODY
          CALL 'setNodeValue(String!): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
            p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
      FUN public open override fun setPrefix(p0: kotlin.String!): kotlin.Unit
        BLOCK_BODY
          CALL 'setPrefix(String!): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
            p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
      FUN public open override fun setTextContent(p0: kotlin.String!): kotlin.Unit
        BLOCK_BODY
          CALL 'setTextContent(String!): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
            p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
      FUN public open override fun setUserData(p0: kotlin.String!, p1: kotlin.Any!, p2: org.w3c.dom.UserDataHandler!): kotlin.Any!
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='setUserData(String!, Any!, UserDataHandler!): Any!'
            CALL 'setUserData(String!, Any!, UserDataHandler!): Any!' type=kotlin.Any! operator=null
              $this: GET_VAR '`MyElement$Element$delegate`: Element' type=org.w3c.dom.Element operator=null
              p0: GET_VAR 'value-parameter p0: String!' type=kotlin.String! operator=null
              p1: GET_VAR 'value-parameter p1: Any!' type=kotlin.Any! operator=null
              p2: GET_VAR 'value-parameter p2: UserDataHandler!' type=org.w3c.dom.UserDataHandler! operator=null
      FUN public final fun bar(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='bar(): String'
            CONST String type=kotlin.String value='OK'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val factory: javax.xml.parsers.DocumentBuilderFactory
          BLOCK type=javax.xml.parsers.DocumentBuilderFactory operator=EXCLEXCL
            VAR val tmp0_notnull: javax.xml.parsers.DocumentBuilderFactory!
              CALL 'newInstance(): DocumentBuilderFactory!' type=javax.xml.parsers.DocumentBuilderFactory! operator=null
            WHEN type=javax.xml.parsers.DocumentBuilderFactory operator=null
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_notnull: DocumentBuilderFactory!' type=javax.xml.parsers.DocumentBuilderFactory! operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
              else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=javax.xml.parsers.DocumentBuilderFactory
                GET_VAR 'tmp0_notnull: DocumentBuilderFactory!' type=javax.xml.parsers.DocumentBuilderFactory! operator=null
        VAR val builder: javax.xml.parsers.DocumentBuilder
          BLOCK type=javax.xml.parsers.DocumentBuilder operator=EXCLEXCL
            VAR val tmp1_notnull: javax.xml.parsers.DocumentBuilder!
              CALL 'newDocumentBuilder(): DocumentBuilder!' type=javax.xml.parsers.DocumentBuilder! operator=null
                $this: GET_VAR 'factory: DocumentBuilderFactory' type=javax.xml.parsers.DocumentBuilderFactory operator=null
            WHEN type=javax.xml.parsers.DocumentBuilder operator=null
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp1_notnull: DocumentBuilder!' type=javax.xml.parsers.DocumentBuilder! operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
              else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=javax.xml.parsers.DocumentBuilder
                GET_VAR 'tmp1_notnull: DocumentBuilder!' type=javax.xml.parsers.DocumentBuilder! operator=null
        VAR val source: org.xml.sax.InputSource
          CALL 'constructor InputSource(Reader!)' type=org.xml.sax.InputSource operator=null
            p0: CALL 'constructor StringReader(String!)' type=java.io.StringReader operator=null
              p0: CONST String type=kotlin.String value='<OK></OK>'
        VAR val doc: org.w3c.dom.Document
          BLOCK type=org.w3c.dom.Document operator=EXCLEXCL
            VAR val tmp2_notnull: org.w3c.dom.Document!
              CALL 'parse(InputSource!): Document!' type=org.w3c.dom.Document! operator=null
                $this: GET_VAR 'builder: DocumentBuilder' type=javax.xml.parsers.DocumentBuilder operator=null
                p0: GET_VAR 'source: InputSource' type=org.xml.sax.InputSource operator=null
            WHEN type=org.w3c.dom.Document operator=null
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp2_notnull: Document!' type=org.w3c.dom.Document! operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
              else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=org.w3c.dom.Document
                GET_VAR 'tmp2_notnull: Document!' type=org.w3c.dom.Document! operator=null
        VAR val myElement: MyElement
          CALL 'constructor MyElement(Element)' type=MyElement operator=null
            e: BLOCK type=org.w3c.dom.Element operator=EXCLEXCL
              VAR val tmp3_notnull: org.w3c.dom.Element!
                CALL 'getDocumentElement(): Element!' type=org.w3c.dom.Element! operator=null
                  $this: GET_VAR 'doc: Document' type=org.w3c.dom.Document operator=null
              WHEN type=org.w3c.dom.Element operator=null
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR 'tmp3_notnull: Element!' type=org.w3c.dom.Element! operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=org.w3c.dom.Element
                  GET_VAR 'tmp3_notnull: Element!' type=org.w3c.dom.Element! operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          BLOCK type=kotlin.String operator=EXCLEXCL
            VAR val tmp4_notnull: kotlin.String!
              CALL 'getTagName(): String!' type=kotlin.String! operator=null
                $this: GET_VAR 'myElement: MyElement' type=MyElement operator=null
            WHEN type=kotlin.String operator=null
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp4_notnull: String!' type=kotlin.String! operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
              else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.String
                GET_VAR 'tmp4_notnull: String!' type=kotlin.String! operator=null
