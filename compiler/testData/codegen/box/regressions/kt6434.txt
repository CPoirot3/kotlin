MODULE <test-module>
  FILE /kt6434.kt
    CLASS ENUM_CLASS E
      CONSTRUCTOR private constructor E()
        BLOCK_BODY
          ENUM_CONSTRUCTOR_CALL 'constructor Enum(String, Int)' super
          INSTANCE_INITIALIZER_CALL classDescriptor='E'
      ENUM_ENTRY enum entry VALUE
        init: ENUM_CONSTRUCTOR_CALL 'constructor E()' VALUE
      ENUM_ENTRY enum entry VALUE2
        init: ENUM_CONSTRUCTOR_CALL 'constructor E()' VALUE2
      FUN public final fun values(): kotlin.Array<E>
        SYNTHETIC_BODY kind=ENUM_VALUES
      FUN public final fun valueOf(value: kotlin.String): E
        SYNTHETIC_BODY kind=ENUM_VALUEOF
    CLASS CLASS C
      CONSTRUCTOR public constructor C(nums: kotlin.collections.Map<E, kotlin.Int>)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'nums: Map<E, Int>' type=kotlin.Unit operator=null
            receiver: THIS of 'C' type=C
            value: GET_VAR 'value-parameter nums: Map<E, Int>' type=kotlin.collections.Map<E, kotlin.Int> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='C'
      PROPERTY public final val nums: kotlin.collections.Map<E, kotlin.Int>
        EXPRESSION_BODY
          GET_VAR 'value-parameter nums: Map<E, Int>' type=kotlin.collections.Map<E, kotlin.Int> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val normalizedNums: kotlin.collections.Map<E, kotlin.Float>
        EXPRESSION_BODY
          CALL 'loadNormalizedNums(): Map<E, Float>' type=kotlin.collections.Map<E, kotlin.Float> operator=null
            $this: THIS of 'C' type=C
      FUN private final fun loadNormalizedNums(): kotlin.collections.Map<E, kotlin.Float>
        BLOCK_BODY
          VAR val vals: kotlin.collections.Collection<kotlin.Int>
            CALL '<get-values>(): Collection<Int>' type=kotlin.collections.Collection<kotlin.Int> operator=GET_PROPERTY
              $this: CALL '<get-nums>(): Map<E, Int>' type=kotlin.collections.Map<E, kotlin.Int> operator=GET_PROPERTY
                $this: THIS of 'C' type=C
          VAR val min: kotlin.Int
            BLOCK type=kotlin.Int operator=EXCLEXCL
              VAR val tmp0_notnull: kotlin.Int?
                CALL 'min() on Iterable<Int>: Int?' type=kotlin.Int? operator=null
                  $receiver: GET_VAR 'vals: Collection<Int>' type=kotlin.collections.Collection<kotlin.Int> operator=null
              WHEN type=kotlin.Int operator=null
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR 'tmp0_notnull: Int?' type=kotlin.Int? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                else: GET_VAR 'tmp0_notnull: Int?' type=kotlin.Int? operator=null
          VAR val max: kotlin.Int
            BLOCK type=kotlin.Int operator=EXCLEXCL
              VAR val tmp1_notnull: kotlin.Int?
                CALL 'max() on Iterable<Int>: Int?' type=kotlin.Int? operator=null
                  $receiver: GET_VAR 'vals: Collection<Int>' type=kotlin.collections.Collection<kotlin.Int> operator=null
              WHEN type=kotlin.Int operator=null
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR 'tmp1_notnull: Int?' type=kotlin.Int? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                else: GET_VAR 'tmp1_notnull: Int?' type=kotlin.Int? operator=null
          VAR val rangeDiff: kotlin.Float
            CALL 'toFloat(): Float' type=kotlin.Float operator=null
              $this: CALL 'minus(Int): Int' type=kotlin.Int operator=MINUS
                $this: GET_VAR 'max: Int' type=kotlin.Int operator=null
                other: GET_VAR 'min: Int' type=kotlin.Int operator=null
          VAR val normalizedNums: kotlin.collections.Map<E, kotlin.Float>
            CALL 'toMap() on Iterable<Pair<E, Float>>: Map<E, Float>' type=kotlin.collections.Map<E, kotlin.Float> operator=null
              $receiver: CALL 'map((Map.Entry<E, Int>) -> Pair<E, Float>) on Map<out E, Int>: List<Pair<E, Float>>' type=kotlin.collections.List<kotlin.Pair<E, kotlin.Float>> operator=null
                $receiver: CALL '<get-nums>(): Map<E, Int>' type=kotlin.collections.Map<E, kotlin.Int> operator=GET_PROPERTY
                  $this: THIS of 'C' type=C
                transform: BLOCK type=(kotlin.collections.Map.Entry<E, kotlin.Int>) -> kotlin.Pair<E, kotlin.Float> operator=LAMBDA
                  FUN local final fun <anonymous>(kvp: kotlin.collections.Map.Entry<E, kotlin.Int>): kotlin.Pair<E, kotlin.Float>
                    BLOCK_BODY
                      BLOCK type=kotlin.Unit operator=DESTRUCTURING_DECLARATION
                        VAR val tmp0_container: kotlin.collections.Map.Entry<E, kotlin.Int>
                          GET_VAR 'value-parameter kvp: Map.Entry<E, Int>' type=kotlin.collections.Map.Entry<E, kotlin.Int> operator=null
                        VAR val e: E
                          CALL 'component1() on Map.Entry<E, Int>: E' type=E operator=COMPONENT_N(index=1)
                            $receiver: GET_VAR 'tmp0_container: Map.Entry<E, Int>' type=kotlin.collections.Map.Entry<E, kotlin.Int> operator=null
                        VAR val num: kotlin.Int
                          CALL 'component2() on Map.Entry<E, Int>: Int' type=kotlin.Int operator=COMPONENT_N(index=2)
                            $receiver: GET_VAR 'tmp0_container: Map.Entry<E, Int>' type=kotlin.collections.Map.Entry<E, kotlin.Int> operator=null
                      VAR val normalized: kotlin.Float
                        CALL 'div(Float): Float' type=kotlin.Float operator=DIV
                          $this: CALL 'minus(Int): Int' type=kotlin.Int operator=MINUS
                            $this: GET_VAR 'num: Int' type=kotlin.Int operator=null
                            other: GET_VAR 'min: Int' type=kotlin.Int operator=null
                          other: GET_VAR 'rangeDiff: Float' type=kotlin.Float operator=null
                      RETURN type=kotlin.Nothing from='<anonymous>(Map.Entry<E, Int>): Pair<E, Float>'
                        CALL 'constructor Pair(E, Float)' type=kotlin.Pair<E, kotlin.Float> operator=null
                          first: GET_VAR 'e: E' type=E operator=null
                          second: GET_VAR 'normalized: Float' type=kotlin.Float operator=null
                  CALLABLE_REFERENCE '<anonymous>(Map.Entry<E, Int>): Pair<E, Float>' type=(kotlin.collections.Map.Entry<E, kotlin.Int>) -> kotlin.Pair<E, kotlin.Float> operator=LAMBDA
          RETURN type=kotlin.Nothing from='loadNormalizedNums(): Map<E, Float>'
            GET_VAR 'normalizedNums: Map<E, Float>' type=kotlin.collections.Map<E, kotlin.Float> operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val res: kotlin.String
          CALL 'joinToString(CharSequence = ..., CharSequence = ..., CharSequence = ..., Int = ..., CharSequence = ..., ((Float) -> CharSequence)? = ...) on Iterable<Float>: String' type=kotlin.String operator=null
            $receiver: CALL 'sorted() on Iterable<Float>: List<Float>' type=kotlin.collections.List<kotlin.Float> operator=null
              $receiver: CALL '<get-values>(): Collection<Float>' type=kotlin.collections.Collection<kotlin.Float> operator=GET_PROPERTY
                $this: CALL '<get-normalizedNums>(): Map<E, Float>' type=kotlin.collections.Map<E, kotlin.Float> operator=GET_PROPERTY
                  $this: CALL 'constructor C(Map<E, Int>)' type=C operator=null
                    nums: CALL 'hashMapOf(vararg Pair<E, Int>): HashMap<E, Int>' type=java.util.HashMap<E, kotlin.Int> operator=null
                      pairs: VARARG type=Array<out Pair<E, Int>> varargElementType=Pair<E, Int>
                        CALL 'to(Int) on E: Pair<E, Int>' type=kotlin.Pair<E, kotlin.Int> operator=null
                          $receiver: GET_ENUM_VALUE 'VALUE' type=E
                          that: CONST Int type=kotlin.Int value='11'
                        CALL 'to(Int) on E: Pair<E, Int>' type=kotlin.Pair<E, kotlin.Int> operator=null
                          $receiver: GET_ENUM_VALUE 'VALUE2' type=E
                          that: CONST Int type=kotlin.Int value='12'
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CONST String type=kotlin.String value='0.0, 1.0'
              arg1: GET_VAR 'res: String' type=kotlin.String operator=null
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail '
              GET_VAR 'res: String' type=kotlin.String operator=null
