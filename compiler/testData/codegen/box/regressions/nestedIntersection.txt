MODULE <test-module>
  FILE /nestedIntersection.kt
    CLASS INTERFACE In
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
    CLASS CLASS B
      CONSTRUCTOR public constructor B()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='B'
    FUN public inline fun <reified T : kotlin.Any> select(x: T, y: T): kotlin.String!
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='select(T, T): String!'
          CALL '<get-simpleName>() on Class<T>: String!' type=kotlin.String! operator=GET_PROPERTY
            $receiver: CALL '<get-java>() on KClass<T>: Class<T>' type=java.lang.Class<T> operator=GET_PROPERTY
              $receiver: CLASS_REFERENCE '<reified T : Any>' type=kotlin.reflect.KClass<T>
    FUN public fun foo(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='foo(): String'
          TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.String
            CALL 'select(In<{A & B}>, In<{A & B}>): String!' type=kotlin.String! operator=null
              x: CALL 'constructor A()' type=A operator=null
              y: CALL 'constructor B()' type=B operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'foo(): String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='In'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
