MODULE <test-module>
  FILE /primitiveOverrideDelegateAccessor.kt
    CLASS CLASS Holder
      CONSTRUCTOR public constructor Holder(value: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'value: Int' type=kotlin.Unit operator=null
            receiver: THIS of 'Holder' type=Holder
            value: GET_VAR 'value-parameter value: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='Holder'
      PROPERTY public final var value: kotlin.Int
        EXPRESSION_BODY
          GET_VAR 'value-parameter value: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator fun getValue(that: kotlin.Any?, desc: kotlin.reflect.KProperty<*>): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getValue(Any?, KProperty<*>): Int'
            CALL '<get-value>(): Int' type=kotlin.Int operator=GET_PROPERTY
              $this: THIS of 'Holder' type=Holder
      FUN public final operator fun setValue(that: kotlin.Any?, desc: kotlin.reflect.KProperty<*>, newValue: kotlin.Int): kotlin.Unit
        BLOCK_BODY
          CALL '<set-value>(Int): Unit' type=kotlin.Unit operator=EQ
            $this: THIS of 'Holder' type=Holder
            <set-?>: GET_VAR 'value-parameter newValue: Int' type=kotlin.Int operator=null
    CLASS INTERFACE R
      PROPERTY public abstract var value: T
    CLASS CLASS A
      CONSTRUCTOR public constructor A(start: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      PROPERTY public open override var value: kotlin.Int
        delegate: PROPERTY val `value$delegate`: Holder
          EXPRESSION_BODY
            CALL 'constructor Holder(Int)' type=Holder operator=null
              value: GET_VAR 'value-parameter start: Int' type=kotlin.Int operator=null
        PROPERTY_GETTER public open override fun <get-value>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='<get-value>(): Int'
              CALL 'getValue(Any?, KProperty<*>): Int' type=kotlin.Int operator=null
                $this: GET_BACKING_FIELD '`value$delegate`: Holder' type=Holder operator=null
                  receiver: THIS of 'A' type=A
                that: THIS of 'A' type=A
                desc: CALLABLE_REFERENCE 'value: Int' type=kotlin.reflect.KMutableProperty1<A, kotlin.Int> operator=PROPERTY_REFERENCE_FOR_DELEGATE
        PROPERTY_SETTER public open override fun <set-value>(<set-?>: kotlin.Int): kotlin.Unit
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='<set-value>(Int): Unit'
              CALL 'setValue(Any?, KProperty<*>, Int): Unit' type=kotlin.Unit operator=null
                $this: GET_BACKING_FIELD '`value$delegate`: Holder' type=Holder operator=null
                  receiver: THIS of 'A' type=A
                that: THIS of 'A' type=A
                desc: CALLABLE_REFERENCE 'value: Int' type=kotlin.reflect.KMutableProperty1<A, kotlin.Int> operator=PROPERTY_REFERENCE_FOR_DELEGATE
                newValue: GET_VAR 'value-parameter <set-?>: Int' type=kotlin.Int operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a: A
          CALL 'constructor A(Int)' type=A operator=null
            start: CONST Int type=kotlin.Int value='239'
        CALL '<set-value>(Int): Unit' type=kotlin.Unit operator=EQ
          $this: GET_VAR 'a: A' type=A operator=null
          <set-?>: CONST Int type=kotlin.Int value='42'
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CALL '<get-value>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR 'a: A' type=A operator=null
              arg1: CONST Int type=kotlin.Int value='42'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='Fail 1'
