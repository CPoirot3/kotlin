MODULE <test-module>
  FILE /kt1714.kt
    CLASS INTERFACE A
      PROPERTY public abstract val method: (() -> kotlin.Unit)?
      PROPERTY public abstract val test: java.lang.Integer
    CLASS CLASS AImpl
      CONSTRUCTOR public constructor AImpl()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='AImpl'
      PROPERTY public open override val method: (() -> kotlin.Unit)?
        EXPRESSION_BODY
          BLOCK type=() -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): Unit'
            CALLABLE_REFERENCE '<anonymous>(): Unit' type=() -> kotlin.Unit operator=LAMBDA
      PROPERTY public open override val test: java.lang.Integer
        EXPRESSION_BODY
          CALL 'constructor Integer(Int)' type=java.lang.Integer operator=null
            p0: CONST Int type=kotlin.Int value='777'
    FUN public fun test(a: A): kotlin.Unit
      BLOCK_BODY
        VAR val method: (() -> kotlin.Unit)?
          CALL '<get-method>(): (() -> Unit)?' type=(() -> kotlin.Unit)? operator=GET_PROPERTY
            $this: GET_VAR 'value-parameter a: A' type=A operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'method: (() -> Unit)?' type=(() -> kotlin.Unit)? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
          then: BLOCK type=kotlin.Unit operator=null
            CALL 'invoke(): Unit' type=kotlin.Unit operator=INVOKE
              $this: GET_VAR 'method: (() -> Unit)?' type=(() -> kotlin.Unit)? operator=VARIABLE_AS_FUNCTION
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL '<get-test>(): Integer' type=java.lang.Integer operator=GET_PROPERTY
          $this: CALL 'constructor AImpl()' type=AImpl operator=null
        CALL 'test(A): Unit' type=kotlin.Unit operator=null
          a: CALL 'constructor AImpl()' type=AImpl operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
