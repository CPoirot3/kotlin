MODULE <test-module>
  FILE /kotlin.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      PROPERTY @kotlin.jvm.JvmField public final var foo: kotlin.String
        EXPRESSION_BODY
          CONST String type=kotlin.String value='fail'
      CLASS OBJECT companion object of A
        CONSTRUCTOR private constructor Companion()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL 'constructor JavaBaseClass()'
            INSTANCE_INITIALIZER_CALL classDescriptor='companion object of A'
        FUN @kotlin.jvm.JvmStatic public final fun test(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='test(): String'
              CALL 'runSlowly(() -> String): String' type=kotlin.String operator=null
                f: BLOCK type=() -> kotlin.String! operator=LAMBDA
                  FUN local final fun <anonymous>(): kotlin.String!
                    BLOCK_BODY
                      CALL '<set-foo>(String!) on A.Companion: Unit' type=kotlin.Unit operator=EQ
                        $receiver: THIS of 'companion object of A' type=z.A.Companion
                        <set-?>: CONST String type=kotlin.String value='OK'
                      RETURN type=kotlin.Nothing from='<anonymous>(): String!'
                        CALL '<get-foo>() on A.Companion: String!' type=kotlin.String! operator=GET_PROPERTY
                          $receiver: THIS of 'companion object of A' type=z.A.Companion
                  CALLABLE_REFERENCE '<anonymous>(): String!' type=() -> kotlin.String! operator=LAMBDA
    FUN public fun runSlowly(f: () -> kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='runSlowly(() -> String): String'
          CALL 'invoke(): String' type=kotlin.String operator=INVOKE
            $this: GET_VAR 'value-parameter f: () -> String' type=() -> kotlin.String operator=VARIABLE_AS_FUNCTION
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a: z.A
          CALL 'constructor A()' type=z.A operator=null
        CALL '<set-foo>(String): Unit' type=kotlin.Unit operator=EQ
          $this: GET_VAR 'a: A' type=z.A operator=null
          <set-?>: CONST String type=kotlin.String value='Kotlin'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-foo>(): String' type=kotlin.String operator=GET_PROPERTY
                $this: GET_VAR 'a: A' type=z.A operator=null
              arg1: CONST String type=kotlin.String value='Kotlin'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from='box(): String'
          CALL 'test(): String' type=kotlin.String operator=null
            $this: GET_OBJECT 'companion object of A' type=z.A.Companion
