MODULE <test-module>
  FILE /nestedObjectWithSuperclass.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(s: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 's: Int' type=kotlin.Unit operator=null
            receiver: THIS of 'A' type=A
            value: GET_VAR 'value-parameter s: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      PROPERTY public final val s: kotlin.Int
        EXPRESSION_BODY
          GET_VAR 'value-parameter s: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public open fun foo(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='foo(): Int'
            CALL '<get-s>(): Int' type=kotlin.Int operator=GET_PROPERTY
              $this: THIS of 'A' type=A
    CLASS OBJECT Outer
      CONSTRUCTOR private constructor Outer()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor A(Int)'
            s: CONST Int type=kotlin.Int value='1'
          INSTANCE_INITIALIZER_CALL classDescriptor='Outer'
      CLASS OBJECT O
        CONSTRUCTOR private constructor O()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL 'constructor A(Int)'
              s: CONST Int type=kotlin.Int value='2'
            INSTANCE_INITIALIZER_CALL classDescriptor='O'
        FUN public open override fun foo(): kotlin.Int
          BLOCK_BODY
            VAR val s: kotlin.Int
              CALL 'foo(): Int' superQualifier=A type=kotlin.Int operator=null
                $this: THIS of 'O' type=A
            RETURN type=kotlin.Nothing from='foo(): Int'
              CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                $this: GET_VAR 's: Int' type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='3'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CALL 'foo(): Int' type=kotlin.Int operator=null
                $this: GET_OBJECT 'O' type=Outer.O
              arg1: CONST Int type=kotlin.Int value='5'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
