MODULE <test-module>
  FILE /lambdaArgumentWithoutType.kt
    CLASS CLASS Foo
      CONSTRUCTOR public constructor Foo(s: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 's: String' type=kotlin.Unit operator=null
            receiver: THIS of 'Foo' type=Foo
            value: GET_VAR 'value-parameter s: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='Foo'
      PROPERTY public final val s: kotlin.String
        EXPRESSION_BODY
          GET_VAR 'value-parameter s: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public fun foo(): Foo?
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='foo(): Foo?'
          CALL 'constructor Foo(String)' type=Foo operator=null
            s: CONST String type=kotlin.String value='OK'
    FUN public fun <T> run(f: () -> T): T
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='run(() -> T): T'
          CALL 'invoke(): T' type=T operator=INVOKE
            $this: GET_VAR 'value-parameter f: () -> T' type=() -> T operator=VARIABLE_AS_FUNCTION
    PROPERTY public val foo: Foo
      EXPRESSION_BODY
        CALL 'run(() -> Foo): Foo' type=Foo operator=null
          f: BLOCK type=() -> Foo operator=LAMBDA
            FUN local final fun <anonymous>(): Foo
              BLOCK_BODY
                VAR val x: Foo?
                  CALL 'foo(): Foo?' type=Foo? operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR 'x: Foo?' type=Foo? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: THROW type=kotlin.Nothing
                    CALL 'constructor Exception()' type=java.lang.Exception operator=null
                RETURN type=kotlin.Nothing from='<anonymous>(): Foo'
                  GET_VAR 'x: Foo?' type=Foo? operator=null
            CALLABLE_REFERENCE '<anonymous>(): Foo' type=() -> Foo operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          CALL '<get-s>(): String' type=kotlin.String operator=GET_PROPERTY
            $this: CALL '<get-foo>(): Foo' type=Foo operator=GET_PROPERTY
