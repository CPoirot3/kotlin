MODULE <test-module>
  FILE /defaultsNotAtEnd.kt
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='C'
      FUN @kotlin.jvm.JvmOverloads public final fun foo(o: kotlin.String = ..., i1: kotlin.Int, k: kotlin.String = ..., i2: kotlin.Int): kotlin.String
        o: EXPRESSION_BODY
          CONST String type=kotlin.String value='O'
        k: EXPRESSION_BODY
          CONST String type=kotlin.String value='K'
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='foo(String = ..., Int, String = ..., Int): String'
            CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: GET_VAR 'value-parameter o: String = ...' type=kotlin.String operator=null
              other: GET_VAR 'value-parameter k: String = ...' type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val c: C
          CALL 'constructor C()' type=C operator=null
        VAR val m: java.lang.reflect.Method!
          CALL 'getMethod(String!, vararg Class<*>!): Method!' type=java.lang.reflect.Method! operator=null
            $this: CALL '<get-javaClass>() on C: Class<C>' type=java.lang.Class<C> operator=GET_PROPERTY
              $receiver: GET_VAR 'c: C' type=C operator=null
            p0: CONST String type=kotlin.String value='foo'
            p1: VARARG type=(kotlin.Array<(java.lang.Class<*>..java.lang.Class<*>?)>..kotlin.Array<out (java.lang.Class<*>..java.lang.Class<*>?)>?) varargElementType=(java.lang.Class<*>..java.lang.Class<*>?)
              CALL '<get-java>() on KClass<Int>: Class<Int>' type=java.lang.Class<kotlin.Int> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'Int' type=kotlin.reflect.KClass<kotlin.Int>
              CALL '<get-java>() on KClass<Int>: Class<Int>' type=java.lang.Class<kotlin.Int> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'Int' type=kotlin.reflect.KClass<kotlin.Int>
        RETURN type=kotlin.Nothing from='box(): String'
          TYPE_OP operator=CAST typeOperand=kotlin.String
            CALL 'invoke(Any!, vararg Any!): Any!' type=kotlin.Any! operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                GET_VAR 'm: Method!' type=java.lang.reflect.Method! operator=null
              p0: GET_VAR 'c: C' type=C operator=null
              p1: VARARG type=(kotlin.Array<(kotlin.Any..kotlin.Any?)>..kotlin.Array<out (kotlin.Any..kotlin.Any?)>?) varargElementType=(kotlin.Any..kotlin.Any?)
                CONST Int type=kotlin.Int value='1'
                CONST Int type=kotlin.Int value='2'
