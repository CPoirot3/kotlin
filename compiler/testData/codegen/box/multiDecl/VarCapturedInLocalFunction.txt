MODULE <test-module>
  FILE /VarCapturedInLocalFunction.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
    FUN public operator fun A.component1(): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='component1() on A: Int'
          CONST Int type=kotlin.Int value='1'
    FUN public operator fun A.component2(): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='component2() on A: Int'
          CONST Int type=kotlin.Int value='2'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=DESTRUCTURING_DECLARATION
          VAR val tmp0_container: A
            CALL 'constructor A()' type=A operator=null
          VAR var a: kotlin.Int
            CALL 'component1() on A: Int' type=kotlin.Int operator=COMPONENT_N(index=1)
              $receiver: GET_VAR 'tmp0_container: A' type=A operator=null
          VAR var b: kotlin.Int
            CALL 'component2() on A: Int' type=kotlin.Int operator=COMPONENT_N(index=2)
              $receiver: GET_VAR 'tmp0_container: A' type=A operator=null
        FUN local final fun local(): kotlin.Unit
          BLOCK_BODY
            SET_VAR 'a: Int' type=kotlin.Unit operator=EQ
              CONST Int type=kotlin.Int value='3'
        CALL 'local(): Unit' type=kotlin.Unit operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: WHEN type=kotlin.Boolean operator=ANDAND
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'a: Int' type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='3'
              then: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'b: Int' type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='2'
              else: CONST Boolean type=kotlin.Boolean value='false'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
