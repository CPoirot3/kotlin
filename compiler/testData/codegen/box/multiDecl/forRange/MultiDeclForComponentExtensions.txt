MODULE <test-module>
  FILE /MultiDeclForComponentExtensions.kt
    CLASS CLASS Range
      CONSTRUCTOR public constructor Range(from: C, to: C)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'from: C' type=kotlin.Unit operator=null
            receiver: THIS of 'Range' type=Range
            value: GET_VAR 'value-parameter from: C' type=C operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD 'to: C' type=kotlin.Unit operator=null
            receiver: THIS of 'Range' type=Range
            value: GET_VAR 'value-parameter to: C' type=C operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='Range'
      PROPERTY public final val from: C
        EXPRESSION_BODY
          GET_VAR 'value-parameter from: C' type=C operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val to: C
        EXPRESSION_BODY
          GET_VAR 'value-parameter to: C' type=C operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator fun iterator(): It
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='iterator(): It'
            CALL 'constructor It(C, C)' type=It operator=null
              from: CALL '<get-from>(): C' type=C operator=GET_PROPERTY
                $this: THIS of 'Range' type=Range
              to: CALL '<get-to>(): C' type=C operator=GET_PROPERTY
                $this: THIS of 'Range' type=Range
    CLASS CLASS It
      CONSTRUCTOR public constructor It(from: C, to: C)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'from: C' type=kotlin.Unit operator=null
            receiver: THIS of 'It' type=It
            value: GET_VAR 'value-parameter from: C' type=C operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD 'to: C' type=kotlin.Unit operator=null
            receiver: THIS of 'It' type=It
            value: GET_VAR 'value-parameter to: C' type=C operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='It'
      PROPERTY public final val from: C
        EXPRESSION_BODY
          GET_VAR 'value-parameter from: C' type=C operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val to: C
        EXPRESSION_BODY
          GET_VAR 'value-parameter to: C' type=C operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final var c: kotlin.Int
        EXPRESSION_BODY
          CALL '<get-i>(): Int' type=kotlin.Int operator=GET_PROPERTY
            $this: CALL '<get-from>(): C' type=C operator=GET_PROPERTY
              $this: THIS of 'It' type=It
      FUN public final operator fun next(): C
        BLOCK_BODY
          VAR val next: C
            CALL 'constructor C(Int)' type=C operator=null
              i: CALL '<get-c>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: THIS of 'It' type=It
          BLOCK type=kotlin.Int operator=POSTFIX_INCR
            VAR val tmp0_this: It
              THIS of 'It' type=It
            BLOCK type=kotlin.Int operator=POSTFIX_INCR
              VAR val tmp1: kotlin.Int
                CALL '<get-c>(): Int' type=kotlin.Int operator=POSTFIX_INCR
                  $this: GET_VAR 'tmp0_this: It' type=It operator=null
              CALL '<set-c>(Int): Unit' type=kotlin.Unit operator=POSTFIX_INCR
                $this: GET_VAR 'tmp0_this: It' type=It operator=null
                <set-?>: CALL 'inc(): Int' type=kotlin.Int operator=POSTFIX_INCR
                  $this: GET_VAR 'tmp1: Int' type=kotlin.Int operator=null
              GET_VAR 'tmp1: Int' type=kotlin.Int operator=null
          RETURN type=kotlin.Nothing from='next(): C'
            GET_VAR 'next: C' type=C operator=null
      FUN public final operator fun hasNext(): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='hasNext(): Boolean'
            CALL 'LTEQ0(Int): Boolean' type=kotlin.Boolean operator=LTEQ
              arg0: CALL 'compareTo(Int): Int' type=kotlin.Int operator=LTEQ
                $this: CALL '<get-c>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS of 'It' type=It
                other: CALL '<get-i>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: CALL '<get-to>(): C' type=C operator=GET_PROPERTY
                    $this: THIS of 'It' type=It
    CLASS CLASS C
      CONSTRUCTOR public constructor C(i: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'i: Int' type=kotlin.Unit operator=null
            receiver: THIS of 'C' type=C
            value: GET_VAR 'value-parameter i: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='C'
      PROPERTY public final val i: kotlin.Int
        EXPRESSION_BODY
          GET_VAR 'value-parameter i: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator fun rangeTo(c: C): Range
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='rangeTo(C): Range'
            CALL 'constructor Range(C, C)' type=Range operator=null
              from: THIS of 'C' type=C
              to: GET_VAR 'value-parameter c: C' type=C operator=null
    FUN public operator fun C.component1(): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='component1() on C: Int'
          CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
            $this: CALL '<get-i>(): Int' type=kotlin.Int operator=GET_PROPERTY
              $this: $RECEIVER of 'component1() on C: Int' type=C
            other: CONST Int type=kotlin.Int value='1'
    FUN public operator fun C.component2(): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='component2() on C: Int'
          CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
            $this: CALL '<get-i>(): Int' type=kotlin.Int operator=GET_PROPERTY
              $this: $RECEIVER of 'component2() on C: Int' type=C
            other: CONST Int type=kotlin.Int value='2'
    FUN public fun doTest(): kotlin.String
      BLOCK_BODY
        VAR var s: kotlin.String
          CONST String type=kotlin.String value=''
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: It
            CALL 'iterator(): It' type=It operator=FOR_LOOP_ITERATOR
              $this: CALL 'rangeTo(C): Range' type=Range operator=RANGE
                $this: CALL 'constructor C(Int)' type=C operator=null
                  i: CONST Int type=kotlin.Int value='0'
                c: CALL 'constructor C(Int)' type=C operator=null
                  i: CONST Int type=kotlin.Int value='2'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp0_iterator: It' type=It operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val tmp1_loop_parameter: C
                CALL 'next(): C' type=C operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp0_iterator: It' type=It operator=null
              VAR val a: kotlin.Int
                CALL 'component1() on C: Int' type=kotlin.Int operator=COMPONENT_N(index=1)
                  $receiver: GET_VAR 'tmp1_loop_parameter: C' type=C operator=null
              VAR val b: kotlin.Int
                CALL 'component2() on C: Int' type=kotlin.Int operator=COMPONENT_N(index=2)
                  $receiver: GET_VAR 'tmp1_loop_parameter: C' type=C operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR 's: String' type=kotlin.Unit operator=PLUSEQ
                  CALL 'plus(Any?): String' type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR 's: String' type=kotlin.String operator=PLUSEQ
                    other: STRING_CONCATENATION type=kotlin.String
                      GET_VAR 'a: Int' type=kotlin.Int operator=null
                      CONST String type=kotlin.String value=':'
                      GET_VAR 'b: Int' type=kotlin.Int operator=null
                      CONST String type=kotlin.String value=';'
        RETURN type=kotlin.Nothing from='doTest(): String'
          GET_VAR 's: String' type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val s: kotlin.String
          CALL 'doTest(): String' type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 's: String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='1:2;2:3;3:4;'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: '
              GET_VAR 's: String' type=kotlin.String operator=null
