MODULE <test-module>
  FILE /MultiDeclForComponentExtensionsValCaptured.kt
    FUN public operator fun kotlin.Int.component1(): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='component1() on Int: Int'
          CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
            $this: $RECEIVER of 'component1() on Int: Int' type=kotlin.Int
            other: CONST Int type=kotlin.Int value='1'
    FUN public operator fun kotlin.Int.component2(): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='component2() on Int: Int'
          CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
            $this: $RECEIVER of 'component2() on Int: Int' type=kotlin.Int
            other: CONST Int type=kotlin.Int value='2'
    FUN public fun doTest(): kotlin.String
      BLOCK_BODY
        VAR var s: kotlin.String
          CONST String type=kotlin.String value=''
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL 'iterator(): IntIterator' type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL 'rangeTo(Int): IntRange' type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='0'
                other: CONST Int type=kotlin.Int value='2'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val tmp1_loop_parameter: kotlin.Int
                CALL 'next(): Int' type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
              VAR val a: kotlin.Int
                CALL 'component1() on Int: Int' type=kotlin.Int operator=COMPONENT_N(index=1)
                  $receiver: GET_VAR 'tmp1_loop_parameter: Int' type=kotlin.Int operator=null
              VAR val b: kotlin.Int
                CALL 'component2() on Int: Int' type=kotlin.Int operator=COMPONENT_N(index=2)
                  $receiver: GET_VAR 'tmp1_loop_parameter: Int' type=kotlin.Int operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR 's: String' type=kotlin.Unit operator=PLUSEQ
                  CALL 'plus(Any?): String' type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR 's: String' type=kotlin.String operator=PLUSEQ
                    other: CALL 'invoke(): String' type=kotlin.String operator=null
                      $this: BLOCK type=() -> kotlin.String operator=LAMBDA
                        FUN local final fun <anonymous>(): kotlin.String
                          BLOCK_BODY
                            RETURN type=kotlin.Nothing from='<anonymous>(): String'
                              STRING_CONCATENATION type=kotlin.String
                                GET_VAR 'a: Int' type=kotlin.Int operator=null
                                CONST String type=kotlin.String value=':'
                                GET_VAR 'b: Int' type=kotlin.Int operator=null
                                CONST String type=kotlin.String value=';'
                        CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
        RETURN type=kotlin.Nothing from='doTest(): String'
          GET_VAR 's: String' type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val s: kotlin.String
          CALL 'doTest(): String' type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 's: String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='1:2;2:3;3:4;'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: '
              GET_VAR 's: String' type=kotlin.String operator=null
