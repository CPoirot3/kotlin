MODULE <test-module>
  FILE /kt910.kt
    FUN public fun foo(): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='foo(): Int'
          TRY_CATCH type=kotlin.Int
            try: BLOCK type=kotlin.Int operator=null
              CONST Int type=kotlin.Int value='2'
            finally: BLOCK type=kotlin.String operator=null
              CONST String type=kotlin.String value='s'
    FUN public fun bar(set: kotlin.collections.MutableSet<kotlin.Int>): kotlin.collections.Set<kotlin.Int>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='bar(MutableSet<Int>): Set<Int>'
          TRY_CATCH type=kotlin.collections.MutableSet<kotlin.Int>
            try: BLOCK type=kotlin.collections.MutableSet<kotlin.Int> operator=null
              GET_VAR 'value-parameter set: MutableSet<Int>' type=kotlin.collections.MutableSet<kotlin.Int> operator=null
            finally: BLOCK type=kotlin.Boolean operator=null
              CALL 'add(Int): Boolean' type=kotlin.Boolean operator=null
                $this: GET_VAR 'value-parameter set: MutableSet<Int>' type=kotlin.collections.MutableSet<kotlin.Int> operator=null
                element: CONST Int type=kotlin.Int value='42'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'foo(): Int' type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='2'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail 1'
        VAR val s: kotlin.collections.Set<kotlin.Int>
          CALL 'bar(MutableSet<Int>): Set<Int>' type=kotlin.collections.Set<kotlin.Int> operator=null
            set: CALL 'constructor HashSet()' type=java.util.HashSet<kotlin.Int> operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'contains(Int): Boolean' type=kotlin.Boolean operator=null
              $this: GET_VAR 's: Set<Int>' type=kotlin.collections.Set<kotlin.Int> operator=null
              element: CONST Int type=kotlin.Int value='42'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail 2'
