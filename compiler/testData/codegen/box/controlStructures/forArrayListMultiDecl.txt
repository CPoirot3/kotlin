MODULE <test-module>
  FILE /forArrayListMultiDecl.kt
    PROPERTY public val alist: java.util.ArrayList<kotlin.Pair<kotlin.Int, kotlin.Int>>
      EXPRESSION_BODY
        CALL 'arrayListOf(vararg Pair<Int, Int>): ArrayList<Pair<Int, Int>>' type=java.util.ArrayList<kotlin.Pair<kotlin.Int, kotlin.Int>> operator=null
          elements: VARARG type=Array<out Pair<Int, Int>> varargElementType=Pair<Int, Int>
            CALL 'to(Int) on Int: Pair<Int, Int>' type=kotlin.Pair<kotlin.Int, kotlin.Int> operator=null
              $receiver: CONST Int type=kotlin.Int value='1'
              that: CONST Int type=kotlin.Int value='2'
            CALL 'to(Int) on Int: Pair<Int, Int>' type=kotlin.Pair<kotlin.Int, kotlin.Int> operator=null
              $receiver: CONST Int type=kotlin.Int value='2'
              that: CONST Int type=kotlin.Int value='3'
            CALL 'to(Int) on Int: Pair<Int, Int>' type=kotlin.Pair<kotlin.Int, kotlin.Int> operator=null
              $receiver: CONST Int type=kotlin.Int value='3'
              that: CONST Int type=kotlin.Int value='4'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.MutableIterator<kotlin.Pair<kotlin.Int, kotlin.Int>>
            CALL 'iterator(): MutableIterator<Pair<Int, Int>>' type=kotlin.collections.MutableIterator<kotlin.Pair<kotlin.Int, kotlin.Int>> operator=FOR_LOOP_ITERATOR
              $this: CALL '<get-alist>(): ArrayList<Pair<Int, Int>>' type=java.util.ArrayList<kotlin.Pair<kotlin.Int, kotlin.Int>> operator=GET_PROPERTY
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp0_iterator: MutableIterator<Pair<Int, Int>>' type=kotlin.collections.MutableIterator<kotlin.Pair<kotlin.Int, kotlin.Int>> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val tmp1_loop_parameter: kotlin.Pair<kotlin.Int, kotlin.Int>
                CALL 'next(): Pair<Int, Int>' type=kotlin.Pair<kotlin.Int, kotlin.Int> operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp0_iterator: MutableIterator<Pair<Int, Int>>' type=kotlin.collections.MutableIterator<kotlin.Pair<kotlin.Int, kotlin.Int>> operator=null
              VAR val i: kotlin.Int
                CALL 'component1(): Int' type=kotlin.Int operator=COMPONENT_N(index=1)
                  $this: GET_VAR 'tmp1_loop_parameter: Pair<Int, Int>' type=kotlin.Pair<kotlin.Int, kotlin.Int> operator=null
              VAR val z: kotlin.Int
                CALL 'component2(): Int' type=kotlin.Int operator=COMPONENT_N(index=2)
                  $this: GET_VAR 'tmp1_loop_parameter: Pair<Int, Int>' type=kotlin.Pair<kotlin.Int, kotlin.Int> operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR 'result: Int' type=kotlin.Unit operator=PLUSEQ
                  CALL 'plus(Int): Int' type=kotlin.Int operator=PLUSEQ
                    $this: GET_VAR 'result: Int' type=kotlin.Int operator=PLUSEQ
                    other: CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                      $this: GET_VAR 'i: Int' type=kotlin.Int operator=null
                      other: GET_VAR 'z: Int' type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'result: Int' type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='15'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: '
              GET_VAR 'result: Int' type=kotlin.Int operator=null
