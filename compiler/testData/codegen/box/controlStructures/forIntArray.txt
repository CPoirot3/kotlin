MODULE <test-module>
  FILE /forIntArray.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a: kotlin.Array<kotlin.Int?>
          CALL 'arrayOfNulls(Int): Array<Int?>' type=kotlin.Array<kotlin.Int?> operator=null
            size: CONST Int type=kotlin.Int value='5'
        VAR var i: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        VAR var sum: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL 'iterator(): IntIterator' type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL 'rangeTo(Int): IntRange' type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='0'
                other: CONST Int type=kotlin.Int value='4'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val el: kotlin.Int
                CALL 'next(): Int' type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL 'set(Int, Int?): Unit' type=kotlin.Unit operator=EQ
                  $this: GET_VAR 'a: Array<Int?>' type=kotlin.Array<kotlin.Int?> operator=null
                  index: GET_VAR 'i: Int' type=kotlin.Int operator=null
                  value: BLOCK type=kotlin.Int operator=POSTFIX_INCR
                    VAR val tmp1: kotlin.Int
                      GET_VAR 'i: Int' type=kotlin.Int operator=POSTFIX_INCR
                    SET_VAR 'i: Int' type=kotlin.Unit operator=POSTFIX_INCR
                      CALL 'inc(): Int' type=kotlin.Int operator=POSTFIX_INCR
                        $this: GET_VAR 'tmp1: Int' type=kotlin.Int operator=null
                    GET_VAR 'tmp1: Int' type=kotlin.Int operator=null
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp2_iterator: kotlin.collections.Iterator<kotlin.Int>
            CALL 'iterator(): Iterator<Int>' type=kotlin.collections.Iterator<kotlin.Int> operator=FOR_LOOP_ITERATOR
              $this: TYPE_OP operator=CAST typeOperand=kotlin.Array<kotlin.Int>
                GET_VAR 'a: Array<Int?>' type=kotlin.Array<kotlin.Int?> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp2_iterator: Iterator<Int>' type=kotlin.collections.Iterator<kotlin.Int> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val el: kotlin.Int
                CALL 'next(): Int' type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp2_iterator: Iterator<Int>' type=kotlin.collections.Iterator<kotlin.Int> operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR 'sum: Int' type=kotlin.Unit operator=EQ
                  CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                    $this: GET_VAR 'sum: Int' type=kotlin.Int operator=null
                    other: GET_VAR 'el: Int' type=kotlin.Int operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'sum: Int' type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='10'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='a failed'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
