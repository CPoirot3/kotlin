MODULE <test-module>
  FILE /compareBoxedIntegerToZero.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val x: kotlin.Int? = 0
          CONST Int type=kotlin.Int value='0'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'x: Int?' type=kotlin.Int? operator=null
              arg1: CONST Int type=kotlin.Int value='0'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail '
              GET_VAR 'x: Int?' type=kotlin.Int? operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CONST Int type=kotlin.Int value='0'
              arg1: GET_VAR 'x: Int?' type=kotlin.Int? operator=null
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail '
              GET_VAR 'x: Int?' type=kotlin.Int? operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'not(): Boolean' type=kotlin.Boolean operator=EXCL
            $this: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'x: Int?' type=kotlin.Int? operator=null
              arg1: CONST Int type=kotlin.Int value='0'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail '
              GET_VAR 'x: Int?' type=kotlin.Int? operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'not(): Boolean' type=kotlin.Boolean operator=EXCL
            $this: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CONST Int type=kotlin.Int value='0'
              arg1: GET_VAR 'x: Int?' type=kotlin.Int? operator=null
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail '
              GET_VAR 'x: Int?' type=kotlin.Int? operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
