MODULE <test-module>
  FILE /kt299.kt
    CLASS CLASS MyRange1
      CONSTRUCTOR public constructor MyRange1()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='MyRange1'
      PROPERTY public open override val start: kotlin.Int
        PROPERTY_GETTER public open override fun <get-start>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='<get-start>(): Int'
              CONST Int type=kotlin.Int value='0'
      PROPERTY public open override val endInclusive: kotlin.Int
        PROPERTY_GETTER public open override fun <get-endInclusive>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='<get-endInclusive>(): Int'
              CONST Int type=kotlin.Int value='0'
      FUN public open override fun contains(item: kotlin.Int): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='contains(Int): Boolean'
            CONST Boolean type=kotlin.Boolean value='true'
    CLASS CLASS MyRange2
      CONSTRUCTOR public constructor MyRange2()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='MyRange2'
      FUN public final operator fun contains(item: kotlin.Int): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='contains(Int): Boolean'
            CONST Boolean type=kotlin.Boolean value='true'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'contains(Int): Boolean' type=kotlin.Boolean operator=IN
            $this: CALL 'constructor MyRange1()' type=MyRange1 operator=null
            item: CONST Int type=kotlin.Int value='1'
          then: BLOCK type=kotlin.Nothing operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL 'contains(Int): Boolean' type=kotlin.Boolean operator=IN
                $this: CALL 'constructor MyRange2()' type=MyRange2 operator=null
                item: CONST Int type=kotlin.Int value='1'
              then: BLOCK type=kotlin.Nothing operator=null
                RETURN type=kotlin.Nothing from='box(): String'
                  CONST String type=kotlin.String value='OK'
            RETURN type=kotlin.Nothing from='box(): String'
              CONST String type=kotlin.String value='fail 2'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='fail 1'
