MODULE <test-module>
  FILE /deadTryCatch.kt
    FUN public inline fun catchAll(x: kotlin.String, block: () -> kotlin.Unit): kotlin.String
      BLOCK_BODY
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Unit operator=null
            CALL 'invoke(): Unit' type=kotlin.Unit operator=INVOKE
              $this: GET_VAR 'value-parameter block: () -> Unit' type=() -> kotlin.Unit operator=VARIABLE_AS_FUNCTION
          catch e: BLOCK type=kotlin.Unit operator=null
        RETURN type=kotlin.Nothing from='catchAll(String, () -> Unit): String'
          GET_VAR 'value-parameter x: String' type=kotlin.String operator=null
    FUN public inline fun tryTwice(block: () -> kotlin.Unit): kotlin.Unit
      BLOCK_BODY
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Unit operator=null
            CALL 'invoke(): Unit' type=kotlin.Unit operator=INVOKE
              $this: GET_VAR 'value-parameter block: () -> Unit' type=() -> kotlin.Unit operator=VARIABLE_AS_FUNCTION
            TRY_CATCH type=kotlin.Unit
              try: BLOCK type=kotlin.Unit operator=null
                CALL 'invoke(): Unit' type=kotlin.Unit operator=INVOKE
                  $this: GET_VAR 'value-parameter block: () -> Unit' type=() -> kotlin.Unit operator=VARIABLE_AS_FUNCTION
              catch e: BLOCK type=kotlin.Unit operator=null
          catch e: BLOCK type=kotlin.Unit operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          CALL 'catchAll(String, () -> Unit): String' type=kotlin.String operator=null
            x: CONST String type=kotlin.String value='OK'
            block: BLOCK type=() -> kotlin.Unit operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(): Unit'
                    CALL 'tryTwice(() -> Unit): Unit' type=kotlin.Unit operator=null
                      block: BLOCK type=() -> kotlin.Unit operator=LAMBDA
                        FUN local final fun <anonymous>(): kotlin.Unit
                          BLOCK_BODY
                            THROW type=kotlin.Nothing
                              CALL 'constructor Exception()' type=java.lang.Exception operator=null
                        CALLABLE_REFERENCE '<anonymous>(): Unit' type=() -> kotlin.Unit operator=LAMBDA
              CALLABLE_REFERENCE '<anonymous>(): Unit' type=() -> kotlin.Unit operator=LAMBDA
