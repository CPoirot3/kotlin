MODULE <test-module>
  FILE /inlineTryExpr.kt
    FUN public inline fun <T> tryOrElse(f1: () -> T, f2: () -> T): T
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='tryOrElse(() -> T, () -> T): T'
          TRY_CATCH type=T
            try: BLOCK type=T operator=null
              CALL 'invoke(): T' type=T operator=INVOKE
                $this: GET_VAR 'value-parameter f1: () -> T' type=() -> T operator=VARIABLE_AS_FUNCTION
            catch e: BLOCK type=T operator=null
              CALL 'invoke(): T' type=T operator=INVOKE
                $this: GET_VAR 'value-parameter f2: () -> T' type=() -> T operator=VARIABLE_AS_FUNCTION
    FUN public fun testIt(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='testIt(): String'
          CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
            $this: CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='abc'
              other: CALL 'tryOrElse(() -> String, () -> String): String' type=kotlin.String operator=null
                f1: BLOCK type=() -> kotlin.String operator=LAMBDA
                  FUN local final fun <anonymous>(): kotlin.String
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from='<anonymous>(): String'
                        TRY_CATCH type=kotlin.String
                          try: BLOCK type=kotlin.String operator=null
                            CONST String type=kotlin.String value='def'
                          catch e: BLOCK type=kotlin.String operator=null
                            CONST String type=kotlin.String value='oops!'
                  CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
                f2: BLOCK type=() -> kotlin.String operator=LAMBDA
                  FUN local final fun <anonymous>(): kotlin.String
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from='<anonymous>(): String'
                        CONST String type=kotlin.String value='hmmm...'
                  CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
            other: CONST String type=kotlin.String value='ghi'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val test: kotlin.String
          CALL 'testIt(): String' type=kotlin.String operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'test: String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='abcdefghi'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Failed, test=='
              GET_VAR 'test: String' type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
