MODULE <test-module>
  FILE /kt4119_2.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        FUN local final infix fun kotlin.Int.foo(a: kotlin.Int): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='foo(Int) on Int: Int'
              CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                $this: GET_VAR 'value-parameter a: Int' type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='2'
        VAR val s: box.<no name provided>
          BLOCK type=box.<no name provided> operator=OBJECT_LITERAL
            CLASS CLASS <no name provided>
              CONSTRUCTOR public constructor <no name provided>()
                BLOCK_BODY
                  DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
                  INSTANCE_INITIALIZER_CALL classDescriptor='<no name provided>'
              FUN public final fun test(): kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='test(): Int'
                    CALL 'foo(Int) on Int: Int' type=kotlin.Int operator=null
                      $receiver: CONST Int type=kotlin.Int value='1'
                      a: CONST Int type=kotlin.Int value='1'
            CALL 'constructor <no name provided>()' type=box.<no name provided> operator=OBJECT_LITERAL
        FUN local final fun local(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='local(): Int'
              CALL 'foo(Int) on Int: Int' type=kotlin.Int operator=null
                $receiver: CONST Int type=kotlin.Int value='1'
                a: CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'test(): Int' type=kotlin.Int operator=null
                $this: GET_VAR 's: <no name provided>' type=box.<no name provided> operator=null
              arg1: CONST Int type=kotlin.Int value='3'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'local(): Int' type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='3'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
