MODULE <test-module>
  FILE /defaultargs4.kt
    CLASS INTERFACE A
      FUN public abstract fun bar2(arg: kotlin.Int = ...): kotlin.Int
        arg: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='239'
      FUN public open fun bar(arg: kotlin.Int = ...): kotlin.Int
        arg: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='240'
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='bar(Int = ...): Int'
            CALL 'bar2(Int = ...): Int' type=kotlin.Int operator=null
              $this: THIS of 'A' type=A
              arg: CALL 'div(Int): Int' type=kotlin.Int operator=DIV
                $this: GET_VAR 'value-parameter arg: Int = ...' type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='2'
    CLASS CLASS B
      CONSTRUCTOR public constructor B()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='B'
      FUN public open override fun bar2(arg: kotlin.Int = ...): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='bar2(Int = ...): Int'
            GET_VAR 'value-parameter arg: Int = ...' type=kotlin.Int operator=null
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor B()'
          INSTANCE_INITIALIZER_CALL classDescriptor='C'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'bar(Int = ...): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor C()' type=C operator=null
                arg: CONST Int type=kotlin.Int value='10'
              arg1: CONST Int type=kotlin.Int value='5'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'bar(Int = ...): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor C()' type=C operator=null
              arg1: CONST Int type=kotlin.Int value='120'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'bar2(Int = ...): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor C()' type=C operator=null
              arg1: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'bar2(Int = ...): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor C()' type=C operator=null
                arg: CONST Int type=kotlin.Int value='10'
              arg1: CONST Int type=kotlin.Int value='10'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
