MODULE <test-module>
  FILE /kt3190.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val test: Cached<kotlin.Int, kotlin.Int>
          CALL 'constructor Cached((Int) -> Int)' type=Cached<kotlin.Int, kotlin.Int> operator=null
            generate: BLOCK type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
              FUN local final fun <anonymous>(it: kotlin.Int): kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(Int): Int'
                    CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                      $this: GET_VAR 'value-parameter it: Int' type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='2'
              CALLABLE_REFERENCE '<anonymous>(Int): Int' type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CALL 'invoke(Int): Int' type=kotlin.Int operator=INVOKE
                $this: GET_VAR 'test: Cached<Int, Int>' type=Cached<kotlin.Int, kotlin.Int> operator=VARIABLE_AS_FUNCTION
                p1: CONST Int type=kotlin.Int value='1'
              arg1: CONST Int type=kotlin.Int value='3'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
    CLASS CLASS Cached
      CONSTRUCTOR public constructor Cached<K, V>(generate: (K) -> V)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'generate: (K) -> V' type=kotlin.Unit operator=null
            receiver: THIS of 'Cached' type=Cached<K, V>
            value: GET_VAR 'value-parameter generate: (K) -> V' type=(K) -> V operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='Cached'
      PROPERTY private final val generate: (K) -> V
        EXPRESSION_BODY
          GET_VAR 'value-parameter generate: (K) -> V' type=(K) -> V operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val store: java.util.HashMap<K, V>
        EXPRESSION_BODY
          CALL 'constructor HashMap()' type=java.util.HashMap<K, V> operator=null
      FUN public open override fun invoke(p1: K): V
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='invoke(K): V'
            CALL 'getOrPut(K, () -> V) on MutableMap<K, V>: V' type=V operator=null
              $receiver: CALL '<get-store>(): HashMap<K, V>' type=java.util.HashMap<K, V> operator=GET_PROPERTY
                $this: THIS of 'Cached' type=Cached<K, V>
              key: GET_VAR 'value-parameter p1: K' type=K operator=null
              defaultValue: BLOCK type=() -> V operator=LAMBDA
                FUN local final fun <anonymous>(): V
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='<anonymous>(): V'
                      CALL 'invoke(K): V' type=V operator=INVOKE
                        $this: CALL '<get-generate>(): (K) -> V' type=(K) -> V operator=GET_PROPERTY
                          $this: THIS of 'Cached' type=Cached<K, V>
                        p1: GET_VAR 'value-parameter p1: K' type=K operator=null
                CALLABLE_REFERENCE '<anonymous>(): V' type=() -> V operator=LAMBDA
    FUN public fun <K, V> kotlin.collections.MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V
      BLOCK_BODY
        WHEN type=kotlin.Nothing operator=IF
          if: CALL 'containsKey(K): Boolean' type=kotlin.Boolean operator=null
            $this: $RECEIVER of 'getOrPut(K, () -> V) on MutableMap<K, V>: V' type=kotlin.collections.MutableMap<K, V>
            key: GET_VAR 'value-parameter key: K' type=K operator=null
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from='getOrPut(K, () -> V) on MutableMap<K, V>: V'
              TYPE_OP operator=CAST typeOperand=V
                CALL 'get(K): V?' type=V? operator=null
                  $this: $RECEIVER of 'getOrPut(K, () -> V) on MutableMap<K, V>: V' type=kotlin.collections.MutableMap<K, V>
                  key: GET_VAR 'value-parameter key: K' type=K operator=null
          else: BLOCK type=kotlin.Nothing operator=null
            VAR val answer: V
              CALL 'invoke(): V' type=V operator=INVOKE
                $this: GET_VAR 'value-parameter defaultValue: () -> V' type=() -> V operator=VARIABLE_AS_FUNCTION
            CALL 'put(K, V): V?' type=V? operator=null
              $this: $RECEIVER of 'getOrPut(K, () -> V) on MutableMap<K, V>: V' type=kotlin.collections.MutableMap<K, V>
              key: GET_VAR 'value-parameter key: K' type=K operator=null
              value: GET_VAR 'answer: V' type=V operator=null
            RETURN type=kotlin.Nothing from='getOrPut(K, () -> V) on MutableMap<K, V>: V'
              GET_VAR 'answer: V' type=V operator=null
