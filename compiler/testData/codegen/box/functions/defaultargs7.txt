MODULE <test-module>
  FILE /defaultargs7.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(expected: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'expected: Int' type=kotlin.Unit operator=null
            receiver: THIS of 'A' type=A
            value: GET_VAR 'value-parameter expected: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      PROPERTY public final val expected: kotlin.Int
        EXPRESSION_BODY
          GET_VAR 'value-parameter expected: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final fun foo(x: kotlin.Int, y: kotlin.Int = ..., z: kotlin.Int = ...): kotlin.Boolean
        y: EXPRESSION_BODY
          CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
            $this: GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=null
            other: CONST Int type=kotlin.Int value='20'
        z: EXPRESSION_BODY
          CALL 'times(Int): Int' type=kotlin.Int operator=MUL
            $this: GET_VAR 'value-parameter y: Int = ...' type=kotlin.Int operator=null
            other: CONST Int type=kotlin.Int value='2'
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='foo(Int, Int = ..., Int = ...): Boolean'
            CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'value-parameter z: Int = ...' type=kotlin.Int operator=null
              arg1: CALL '<get-expected>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: THIS of 'A' type=A
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'foo(Int, Int = ..., Int = ...): Boolean' type=kotlin.Boolean operator=null
              $this: CALL 'constructor A(Int)' type=A operator=null
                expected: CONST Int type=kotlin.Int value='42'
              x: CONST Int type=kotlin.Int value='1'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='Fail'
