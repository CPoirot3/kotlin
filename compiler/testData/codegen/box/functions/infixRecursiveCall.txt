MODULE <test-module>
  FILE /infixRecursiveCall.kt
    FUN public infix fun kotlin.Int.test(x: kotlin.Int): kotlin.Int
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'GT0(Int): Boolean' type=kotlin.Boolean operator=GT
            arg0: CALL 'compareTo(Int): Int' type=kotlin.Int operator=GT
              $this: $RECEIVER of 'test(Int) on Int: Int' type=kotlin.Int
              other: CONST Int type=kotlin.Int value='1'
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from='test(Int) on Int: Int'
              CALL 'test(Int) on Int: Int' type=kotlin.Int operator=null
                $receiver: CALL 'minus(Int): Int' type=kotlin.Int operator=MINUS
                  $this: $RECEIVER of 'test(Int) on Int: Int' type=kotlin.Int
                  other: CONST Int type=kotlin.Int value='1'
                x: GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from='test(Int) on Int: Int'
          $RECEIVER of 'test(Int) on Int: Int' type=kotlin.Int
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CALL 'test(Int) on Int: Int' type=kotlin.Int operator=null
                $receiver: CONST Int type=kotlin.Int value='10'
                x: CONST Int type=kotlin.Int value='10'
              arg1: CONST Int type=kotlin.Int value='1'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='FAIL'
