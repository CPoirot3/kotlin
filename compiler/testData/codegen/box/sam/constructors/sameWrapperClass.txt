MODULE <test-module>
  FILE /sameWrapperClass.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val f: () -> kotlin.Unit
          BLOCK type=() -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): Unit'
            CALLABLE_REFERENCE '<anonymous>(): Unit' type=() -> kotlin.Unit operator=LAMBDA
        VAR val class1: java.lang.Class<*>!
          CALL 'getClass(): Class<*>!' type=java.lang.Class<*>! operator=null
            $this: TYPE_OP operator=CAST typeOperand=java.lang.Object
              CALL 'Runnable(() -> Unit): Runnable' type=java.lang.Runnable operator=null
                function: GET_VAR 'f: () -> Unit' type=() -> kotlin.Unit operator=null
        VAR val class2: java.lang.Class<*>!
          CALL 'getClass(): Class<*>!' type=java.lang.Class<*>! operator=null
            $this: TYPE_OP operator=CAST typeOperand=java.lang.Object
              CALL 'Runnable(() -> Unit): Runnable' type=java.lang.Runnable operator=null
                function: GET_VAR 'f: () -> Unit' type=() -> kotlin.Unit operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'class1: Class<*>!' type=java.lang.Class<*>! operator=null
              arg1: GET_VAR 'class2: Class<*>!' type=java.lang.Class<*>! operator=null
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              GET_VAR 'class1: Class<*>!' type=java.lang.Class<*>! operator=null
              CONST String type=kotlin.String value=' '
              GET_VAR 'class2: Class<*>!' type=java.lang.Class<*>! operator=null
