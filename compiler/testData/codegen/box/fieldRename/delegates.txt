MODULE <test-module>
  FILE /delegates.kt
    CLASS CLASS TestDelegate
      CONSTRUCTOR public constructor TestDelegate<T : kotlin.Any>(initializer: () -> T)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'initializer: () -> T' type=kotlin.Unit operator=null
            receiver: THIS of 'TestDelegate' type=TestDelegate<T>
            value: GET_VAR 'value-parameter initializer: () -> T' type=() -> T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='TestDelegate'
      PROPERTY private final val initializer: () -> T
        EXPRESSION_BODY
          GET_VAR 'value-parameter initializer: () -> T' type=() -> T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY private final var value: T?
        EXPRESSION_BODY
          CONST Null type=kotlin.Nothing? value='null'
      FUN public open operator fun getValue(thisRef: kotlin.Any?, desc: kotlin.reflect.KProperty<*>): T
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CALL '<get-value>(): T?' type=T? operator=GET_PROPERTY
                $this: THIS of 'TestDelegate' type=TestDelegate<T>
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: BLOCK type=kotlin.Unit operator=null
              CALL '<set-value>(T?): Unit' type=kotlin.Unit operator=EQ
                $this: THIS of 'TestDelegate' type=TestDelegate<T>
                <set-?>: CALL 'invoke(): T' type=T operator=INVOKE
                  $this: CALL '<get-initializer>(): () -> T' type=() -> T operator=GET_PROPERTY
                    $this: THIS of 'TestDelegate' type=TestDelegate<T>
          RETURN type=kotlin.Nothing from='getValue(Any?, KProperty<*>): T'
            BLOCK type=T operator=EXCLEXCL
              VAR val tmp0_notnull: T?
                CALL '<get-value>(): T?' type=T? operator=GET_PROPERTY
                  $this: THIS of 'TestDelegate' type=TestDelegate<T>
              WHEN type=T operator=null
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR 'tmp0_notnull: T?' type=T? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                else: GET_VAR 'tmp0_notnull: T?' type=T? operator=null
      FUN public open operator fun setValue(thisRef: kotlin.Any?, desc: kotlin.reflect.KProperty<*>, svalue: T): kotlin.Unit
        BLOCK_BODY
          CALL '<set-value>(T?): Unit' type=kotlin.Unit operator=EQ
            $this: THIS of 'TestDelegate' type=TestDelegate<T>
            <set-?>: GET_VAR 'value-parameter svalue: T' type=T operator=null
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
    CLASS CLASS B
      CONSTRUCTOR public constructor B()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='B'
    PROPERTY public val A.s: kotlin.String
      delegate: PROPERTY val `s$delegate`: TestDelegate<kotlin.String>
        EXPRESSION_BODY
          CALL 'constructor TestDelegate(() -> String)' type=TestDelegate<kotlin.String> operator=null
            initializer: BLOCK type=() -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(): String'
                    CONST String type=kotlin.String value='OK2'
              CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
      PROPERTY_GETTER public fun A.<get-s>(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='<get-s>() on A: String'
            CALL 'getValue(Any?, KProperty<*>): String' type=kotlin.String operator=null
              $this: GET_BACKING_FIELD '`s$delegate`: TestDelegate<String>' type=TestDelegate<kotlin.String> operator=null
              thisRef: $RECEIVER of 's: String on A' type=A
              desc: CALLABLE_REFERENCE 's: String on A' type=kotlin.reflect.KProperty1<A, kotlin.String> operator=PROPERTY_REFERENCE_FOR_DELEGATE
    PROPERTY public val B.s: kotlin.String
      delegate: PROPERTY val `s$delegate`: TestDelegate<kotlin.String>
        EXPRESSION_BODY
          CALL 'constructor TestDelegate(() -> String)' type=TestDelegate<kotlin.String> operator=null
            initializer: BLOCK type=() -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(): String'
                    CONST String type=kotlin.String value='OK'
              CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
      PROPERTY_GETTER public fun B.<get-s>(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='<get-s>() on B: String'
            CALL 'getValue(Any?, KProperty<*>): String' type=kotlin.String operator=null
              $this: GET_BACKING_FIELD '`s$delegate`: TestDelegate<String>' type=TestDelegate<kotlin.String> operator=null
              thisRef: $RECEIVER of 's: String on B' type=B
              desc: CALLABLE_REFERENCE 's: String on B' type=kotlin.reflect.KProperty1<B, kotlin.String> operator=PROPERTY_REFERENCE_FOR_DELEGATE
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-s>() on A: String' type=kotlin.String operator=GET_PROPERTY
                $receiver: CALL 'constructor A()' type=A operator=null
              arg1: CONST String type=kotlin.String value='OK2'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail1'
        RETURN type=kotlin.Nothing from='box(): String'
          CALL '<get-s>() on B: String' type=kotlin.String operator=GET_PROPERTY
            $receiver: CALL 'constructor B()' type=B operator=null
