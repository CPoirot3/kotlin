MODULE <test-module>
  FILE /constructorAndClassObject.kt
    CLASS CLASS Test
      CONSTRUCTOR public constructor Test(prop: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'prop: String' type=kotlin.Unit operator=null
            receiver: THIS of 'Test' type=Test
            value: GET_VAR 'value-parameter prop: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='Test'
      PROPERTY public final val prop: kotlin.String
        EXPRESSION_BODY
          GET_VAR 'value-parameter prop: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      CLASS OBJECT companion object of Test
        CONSTRUCTOR private constructor Companion()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
            INSTANCE_INITIALIZER_CALL classDescriptor='companion object of Test'
        PROPERTY public final val prop: kotlin.String = "CO"
          EXPRESSION_BODY
            CONST String type=kotlin.String value='CO'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val obj: Test
          CALL 'constructor Test(String)' type=Test operator=null
            prop: CONST String type=kotlin.String value='OK'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-prop>(): String' type=kotlin.String operator=GET_PROPERTY
                $this: GET_OBJECT 'companion object of Test' type=Test.Companion
              arg1: CONST String type=kotlin.String value='CO'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail1'
        RETURN type=kotlin.Nothing from='box(): String'
          CALL '<get-prop>(): String' type=kotlin.String operator=GET_PROPERTY
            $this: GET_VAR 'obj: Test' type=Test operator=null
