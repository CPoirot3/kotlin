MODULE <test-module>
  FILE /newArrayInt.kt
    FUN public inline fun <reified T> createArray(n: kotlin.Int, crossinline block: () -> T): kotlin.Array<T>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='createArray(Int, crossinline () -> T): Array<T>'
          CALL 'constructor Array(Int, (Int) -> T)' type=kotlin.Array<T> operator=null
            size: GET_VAR 'value-parameter n: Int' type=kotlin.Int operator=null
            init: BLOCK type=(kotlin.Int) -> T operator=LAMBDA
              FUN local final fun <anonymous>(it: kotlin.Int): T
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(Int): T'
                    CALL 'invoke(): T' type=T operator=INVOKE
                      $this: GET_VAR 'value-parameter crossinline block: () -> T' type=() -> T operator=VARIABLE_AS_FUNCTION
              CALLABLE_REFERENCE '<anonymous>(Int): T' type=(kotlin.Int) -> T operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val x: kotlin.Array<kotlin.Int>
          CALL 'createArray(Int, crossinline () -> Int): Array<Int>' type=kotlin.Array<kotlin.Int> operator=null
            n: CONST Int type=kotlin.Int value='5'
            block: BLOCK type=() -> kotlin.Int operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(): Int'
                    CONST Int type=kotlin.Int value='3'
              CALLABLE_REFERENCE '<anonymous>(): Int' type=() -> kotlin.Int operator=LAMBDA
        CALL 'assert(Boolean): Unit' type=kotlin.Unit operator=null
          value: CALL 'all((Int) -> Boolean) on Array<out Int>: Boolean' type=kotlin.Boolean operator=null
            $receiver: GET_VAR 'x: Array<Int>' type=kotlin.Array<kotlin.Int> operator=null
            predicate: BLOCK type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(it: kotlin.Int): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(Int): Boolean'
                    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                      arg0: GET_VAR 'value-parameter it: Int' type=kotlin.Int operator=null
                      arg1: CONST Int type=kotlin.Int value='3'
              CALLABLE_REFERENCE '<anonymous>(Int): Boolean' type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
