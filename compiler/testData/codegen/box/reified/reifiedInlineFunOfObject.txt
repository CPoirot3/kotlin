MODULE <test-module>
  FILE /reifiedInlineFunOfObject.kt
    FUN public fun foo(block: () -> kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='foo(() -> String): String'
          CALL 'invoke(): String' type=kotlin.String operator=INVOKE
            $this: GET_VAR 'value-parameter block: () -> String' type=() -> kotlin.String operator=VARIABLE_AS_FUNCTION
    CLASS INTERFACE A
      FUN public abstract fun f(): kotlin.String
      FUN public abstract fun g(): kotlin.String
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val x: A
          BLOCK type=box.<no name provided> operator=OBJECT_LITERAL
            CLASS CLASS <no name provided>
              CONSTRUCTOR public constructor <no name provided>()
                BLOCK_BODY
                  DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
                  INSTANCE_INITIALIZER_CALL classDescriptor='<no name provided>'
              FUN private final inline fun <reified T : kotlin.Any> localClassName(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='localClassName(): String'
                    TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.String
                      CALL 'getName(): String!' type=kotlin.String! operator=null
                        $this: CALL '<get-java>() on KClass<T>: Class<T>' type=java.lang.Class<T> operator=GET_PROPERTY
                          $receiver: CLASS_REFERENCE '<reified T : Any>' type=kotlin.reflect.KClass<T>
              FUN public open override fun f(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='f(): String'
                    CALL 'foo(() -> String): String' type=kotlin.String operator=null
                      block: BLOCK type=() -> kotlin.String operator=LAMBDA
                        FUN local final fun <anonymous>(): kotlin.String
                          BLOCK_BODY
                            RETURN type=kotlin.Nothing from='<anonymous>(): String'
                              CALL 'localClassName(): String' type=kotlin.String operator=null
                                $this: THIS of '<no name provided>' type=box.<no name provided>
                        CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
              FUN public open override fun g(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='g(): String'
                    CALL 'foo(() -> String): String' type=kotlin.String operator=null
                      block: BLOCK type=() -> kotlin.String operator=LAMBDA
                        FUN local final fun <anonymous>(): kotlin.String
                          BLOCK_BODY
                            RETURN type=kotlin.Nothing from='<anonymous>(): String'
                              CALL 'localClassName(): String' type=kotlin.String operator=null
                                $this: THIS of '<no name provided>' type=box.<no name provided>
                        CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
            CALL 'constructor <no name provided>()' type=box.<no name provided> operator=OBJECT_LITERAL
        CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='java.lang.String'
          actual: CALL 'f(): String' type=kotlin.String operator=null
            $this: GET_VAR 'x: A' type=A operator=null
        CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='java.lang.Integer'
          actual: CALL 'g(): String' type=kotlin.String operator=null
            $this: GET_VAR 'x: A' type=A operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
