MODULE <test-module>
  FILE /enum.kt
    CLASS ENUM_CLASS A
      CONSTRUCTOR private constructor A(a: kotlin.Int = ...)
        a: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='1'
        BLOCK_BODY
          ENUM_CONSTRUCTOR_CALL 'constructor Enum(String, Int)' super
          SET_BACKING_FIELD 'a: Int' type=kotlin.Unit operator=null
            receiver: THIS of 'A' type=A
            value: GET_VAR 'value-parameter a: Int = ...' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      PROPERTY public final val a: kotlin.Int
        EXPRESSION_BODY
          GET_VAR 'value-parameter a: Int = ...' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      ENUM_ENTRY enum entry FIRST
        init: ENUM_CONSTRUCTOR_CALL 'constructor A(Int = ...)' FIRST
      ENUM_ENTRY enum entry SECOND
        init: ENUM_CONSTRUCTOR_CALL 'constructor A(Int = ...)' SECOND
          a: CONST Int type=kotlin.Int value='2'
      FUN public final fun values(): kotlin.Array<A>
        SYNTHETIC_BODY kind=ENUM_VALUES
      FUN public final fun valueOf(value: kotlin.String): A
        SYNTHETIC_BODY kind=ENUM_VALUEOF
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=ANDAND
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CALL '<get-a>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: GET_ENUM_VALUE 'FIRST' type=A
              arg1: CONST Int type=kotlin.Int value='1'
            then: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CALL '<get-a>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: GET_ENUM_VALUE 'SECOND' type=A
              arg1: CONST Int type=kotlin.Int value='2'
            else: CONST Boolean type=kotlin.Boolean value='false'
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from='box(): String'
              CONST String type=kotlin.String value='OK'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='fail'
