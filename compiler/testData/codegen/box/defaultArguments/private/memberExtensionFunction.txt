MODULE <test-module>
  FILE /memberExtensionFunction.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      FUN private final fun kotlin.Int.foo(other: kotlin.Int = ...): kotlin.Int
        other: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='5'
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='foo(Int = ...) on Int: Int'
            CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
              $this: $RECEIVER of 'foo(Int = ...) on Int: Int' type=kotlin.Int
              other: GET_VAR 'value-parameter other: Int = ...' type=kotlin.Int operator=null
      CLASS CLASS B
        CONSTRUCTOR public constructor B()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
            INSTANCE_INITIALIZER_CALL classDescriptor='B'
        FUN public final fun bar(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='bar(): Int'
              CALL 'foo(Int = ...) on Int: Int' type=kotlin.Int operator=null
                $this: THIS of 'A' type=A
                $receiver: CONST Int type=kotlin.Int value='37'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CALL 'bar(): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor B()' type=A.B operator=null
                  $this: CALL 'constructor A()' type=A operator=null
              arg1: CONST Int type=kotlin.Int value='42'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='Fail'
