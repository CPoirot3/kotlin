MODULE <test-module>
  FILE /privateOuterProperty.kt
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='C'
      PROPERTY private final var v: kotlin.Int
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value='0'
      FUN public final fun foo(): kotlin.Int
        BLOCK_BODY
          CALL 'invoke(): Unit' type=kotlin.Unit operator=null
            $this: BLOCK type=() -> kotlin.Unit operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(): Unit'
                    CALL '<set-v>(Int): Unit' type=kotlin.Unit operator=EQ
                      $this: THIS of 'C' type=C
                      <set-?>: CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                        $this: CALL '<get-v>(): Int' type=kotlin.Int operator=GET_PROPERTY
                          $this: THIS of 'C' type=C
                        other: CONST Int type=kotlin.Int value='1'
              CALLABLE_REFERENCE '<anonymous>(): Unit' type=() -> kotlin.Unit operator=LAMBDA
          CALL 'run(): Unit' type=kotlin.Unit operator=null
            $this: BLOCK type=C.foo.<no name provided> operator=OBJECT_LITERAL
              CLASS CLASS <no name provided>
                CONSTRUCTOR public constructor <no name provided>()
                  BLOCK_BODY
                    DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
                    INSTANCE_INITIALIZER_CALL classDescriptor='<no name provided>'
                FUN public open override fun run(): kotlin.Unit
                  BLOCK_BODY
                    CALL '<set-v>(Int): Unit' type=kotlin.Unit operator=EQ
                      $this: THIS of 'C' type=C
                      <set-?>: CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                        $this: CALL '<get-v>(): Int' type=kotlin.Int operator=GET_PROPERTY
                          $this: THIS of 'C' type=C
                        other: CONST Int type=kotlin.Int value='1'
              CALL 'constructor <no name provided>()' type=C.foo.<no name provided> operator=OBJECT_LITERAL
          CALL 'innerFun(): Unit' type=kotlin.Unit operator=null
            $this: CALL 'constructor Inner()' type=C.Inner operator=null
              $this: THIS of 'C' type=C
          RETURN type=kotlin.Nothing from='foo(): Int'
            CALL '<get-v>(): Int' type=kotlin.Int operator=GET_PROPERTY
              $this: THIS of 'C' type=C
      CLASS CLASS Inner
        CONSTRUCTOR public constructor Inner()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
            INSTANCE_INITIALIZER_CALL classDescriptor='Inner'
        FUN public final fun innerFun(): kotlin.Unit
          BLOCK_BODY
            CALL '<set-v>(Int): Unit' type=kotlin.Unit operator=EQ
              $this: THIS of 'C' type=C
              <set-?>: CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                $this: CALL '<get-v>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS of 'C' type=C
                other: CONST Int type=kotlin.Int value='1'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CALL 'foo(): Int' type=kotlin.Int operator=null
                $this: CALL 'constructor C()' type=C operator=null
              arg1: CONST Int type=kotlin.Int value='3'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='NOT OK'
