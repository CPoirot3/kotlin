MODULE <test-module>
  FILE /kt1247.kt
    FUN public fun f(a: kotlin.Int?, b: kotlin.Int.(kotlin.Int) -> kotlin.Int): kotlin.Int?
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='f(Int?, Int.(Int) -> Int): Int?'
          BLOCK type=kotlin.Int? operator=SAFE_CALL
            VAR val tmp0_safe_receiver: kotlin.Int?
              GET_VAR 'value-parameter a: Int?' type=kotlin.Int? operator=null
            WHEN type=kotlin.Int? operator=SAFE_CALL
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_safe_receiver: Int?' type=kotlin.Int? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CONST Null type=kotlin.Nothing? value='null'
              else: CALL 'invoke(Int) on Int: Int' type=kotlin.Int operator=INVOKE
                $this: GET_VAR 'value-parameter b: Int.(Int) -> Int' type=kotlin.Int.(kotlin.Int) -> kotlin.Int operator=VARIABLE_AS_FUNCTION
                $receiver: GET_VAR 'tmp0_safe_receiver: Int?' type=kotlin.Int? operator=null
                p2: CONST Int type=kotlin.Int value='1'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val x: kotlin.Int?
          CALL 'f(Int?, Int.(Int) -> Int): Int?' type=kotlin.Int? operator=null
            a: CONST Int type=kotlin.Int value='1'
            b: BLOCK type=kotlin.Int.(kotlin.Int) -> kotlin.Int operator=LAMBDA
              FUN local final fun kotlin.Int.<anonymous>(it: kotlin.Int): kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(Int) on Int: Int'
                    CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                      $this: CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                        $this: $RECEIVER of '<anonymous>(Int) on Int: Int' type=kotlin.Int
                        other: GET_VAR 'value-parameter it: Int' type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='2'
              CALLABLE_REFERENCE '<anonymous>(Int) on Int: Int' type=kotlin.Int.(kotlin.Int) -> kotlin.Int operator=LAMBDA
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'x: Int?' type=kotlin.Int? operator=null
              arg1: CONST Int type=kotlin.Int value='4'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
