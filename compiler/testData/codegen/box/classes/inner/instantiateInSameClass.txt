MODULE <test-module>
  FILE /instantiateInSameClass.kt
    CLASS CLASS C
      CONSTRUCTOR public constructor C(value: kotlin.String = ...)
        value: EXPRESSION_BODY
          CONST String type=kotlin.String value='C'
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'value: String' type=kotlin.Unit operator=null
            receiver: THIS of 'C' type=C
            value: GET_VAR 'value-parameter value: String = ...' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='C'
      PROPERTY public final val value: kotlin.String
        EXPRESSION_BODY
          GET_VAR 'value-parameter value: String = ...' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      CLASS CLASS B
        CONSTRUCTOR public constructor B(s: kotlin.String)
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
            SET_BACKING_FIELD 's: String' type=kotlin.Unit operator=null
              receiver: THIS of 'B' type=C.B
              value: GET_VAR 'value-parameter s: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
            INSTANCE_INITIALIZER_CALL classDescriptor='B'
        PROPERTY public final val s: kotlin.String
          EXPRESSION_BODY
            GET_VAR 'value-parameter s: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
        PROPERTY public final val result: kotlin.String
          EXPRESSION_BODY
            CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
                $this: CALL '<get-value>(): String' type=kotlin.String operator=GET_PROPERTY
                  $this: THIS of 'C' type=C
                other: CONST String type=kotlin.String value='_'
              other: CALL '<get-s>(): String' type=kotlin.String operator=GET_PROPERTY
                $this: THIS of 'B' type=C.B
      FUN public final fun classReceiver(): C.B
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='classReceiver(): C.B'
            CALL 'constructor B(String)' type=C.B operator=null
              $this: THIS of 'C' type=C
              s: CONST String type=kotlin.String value='OK'
      FUN public final fun newCReceiver(): C.B
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='newCReceiver(): C.B'
            CALL 'constructor B(String)' type=C.B operator=null
              $this: CALL 'constructor C(String = ...)' type=C operator=null
                value: CONST String type=kotlin.String value='newC'
              s: CONST String type=kotlin.String value='OK'
      FUN public final fun cReceiver(): C.B
        BLOCK_BODY
          VAR val c: C
            CALL 'constructor C(String = ...)' type=C operator=null
              value: CONST String type=kotlin.String value='newC'
          RETURN type=kotlin.Nothing from='cReceiver(): C.B'
            CALL 'constructor B(String)' type=C.B operator=null
              $this: GET_VAR 'c: C' type=C operator=null
              s: CONST String type=kotlin.String value='OK'
      FUN public final fun C.extReceiver1(): C.B
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='extReceiver1() on C: C.B'
            CALL 'constructor B(String)' type=C.B operator=null
              $this: $RECEIVER of 'extReceiver1() on C: C.B' type=C
              s: CONST String type=kotlin.String value='OK'
      FUN public final fun extReceiver(): C.B
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='extReceiver(): C.B'
            CALL 'extReceiver1() on C: C.B' type=C.B operator=null
              $this: THIS of 'C' type=C
              $receiver: CALL 'constructor C(String = ...)' type=C operator=null
                value: CONST String type=kotlin.String value='newC'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val receiver: C
          CALL 'constructor C(String = ...)' type=C operator=null
        VAR var result: kotlin.String
          CALL '<get-result>(): String' type=kotlin.String operator=GET_PROPERTY
            $this: CALL 'classReceiver(): C.B' type=C.B operator=null
              $this: GET_VAR 'receiver: C' type=C operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'result: String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='C_OK'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 1: '
              GET_VAR 'result: String' type=kotlin.String operator=null
        SET_VAR 'result: String' type=kotlin.Unit operator=EQ
          CALL '<get-result>(): String' type=kotlin.String operator=GET_PROPERTY
            $this: CALL 'cReceiver(): C.B' type=C.B operator=null
              $this: GET_VAR 'receiver: C' type=C operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'result: String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='newC_OK'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 3: '
              GET_VAR 'result: String' type=kotlin.String operator=null
        SET_VAR 'result: String' type=kotlin.Unit operator=EQ
          CALL '<get-result>(): String' type=kotlin.String operator=GET_PROPERTY
            $this: CALL 'newCReceiver(): C.B' type=C.B operator=null
              $this: GET_VAR 'receiver: C' type=C operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'result: String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='newC_OK'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 3: '
              GET_VAR 'result: String' type=kotlin.String operator=null
        SET_VAR 'result: String' type=kotlin.Unit operator=EQ
          CALL '<get-result>(): String' type=kotlin.String operator=GET_PROPERTY
            $this: CALL 'extReceiver(): C.B' type=C.B operator=null
              $this: GET_VAR 'receiver: C' type=C operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'result: String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='newC_OK'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 3: '
              GET_VAR 'result: String' type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
