MODULE <test-module>
  FILE /simple.kt
    FUN public inline fun <R> foo(x: R, block: (R) -> R): R
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='foo(R, (R) -> R): R'
          CALL 'invoke(R): R' type=R operator=INVOKE
            $this: GET_VAR 'value-parameter block: (R) -> R' type=(R) -> R operator=VARIABLE_AS_FUNCTION
            p1: GET_VAR 'value-parameter x: R' type=R operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val result: kotlin.Int
          CALL 'foo(Int, (Int) -> Int): Int' type=kotlin.Int operator=null
            x: CONST Int type=kotlin.Int value='1'
            block: BLOCK type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
              FUN local final fun <anonymous>(x: kotlin.Int): kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(Int): Int'
                    CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                      $this: GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='1'
              CALLABLE_REFERENCE '<anonymous>(Int): Int' type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
        CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='2'
          actual: GET_VAR 'result: Int' type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
