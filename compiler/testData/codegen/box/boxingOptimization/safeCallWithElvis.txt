MODULE <test-module>
  FILE /safeCallWithElvis.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(x: kotlin.Int, y: A?)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'x: Int' type=kotlin.Unit operator=null
            receiver: THIS of 'A' type=A
            value: GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD 'y: A?' type=kotlin.Unit operator=null
            receiver: THIS of 'A' type=A
            value: GET_VAR 'value-parameter y: A?' type=A? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      PROPERTY public final val x: kotlin.Int
        EXPRESSION_BODY
          GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val y: A?
        EXPRESSION_BODY
          GET_VAR 'value-parameter y: A?' type=A? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public fun check(a: A?): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='check(A?): Int'
          BLOCK type=kotlin.Int operator=ELVIS
            VAR val tmp4_elvis_lhs: kotlin.Int?
              BLOCK type=kotlin.Int? operator=SAFE_CALL
                VAR val tmp1_safe_receiver: A?
                  BLOCK type=A? operator=SAFE_CALL
                    VAR val tmp0_safe_receiver: A?
                      GET_VAR 'value-parameter a: A?' type=A? operator=null
                    WHEN type=A? operator=SAFE_CALL
                      if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                        arg0: GET_VAR 'tmp0_safe_receiver: A?' type=A? operator=null
                        arg1: CONST Null type=kotlin.Nothing? value='null'
                      then: CONST Null type=kotlin.Nothing? value='null'
                      else: CALL '<get-y>(): A?' type=A? operator=GET_PROPERTY
                        $this: GET_VAR 'tmp0_safe_receiver: A?' type=A? operator=null
                WHEN type=kotlin.Int? operator=SAFE_CALL
                  if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR 'tmp1_safe_receiver: A?' type=A? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Null type=kotlin.Nothing? value='null'
                  else: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                    $this: GET_VAR 'tmp1_safe_receiver: A?' type=A? operator=null
            WHEN type=kotlin.Int operator=null
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp4_elvis_lhs: Int?' type=kotlin.Int? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: BLOCK type=kotlin.Int operator=ELVIS
                VAR val tmp3_elvis_lhs: kotlin.Int?
                  BLOCK type=kotlin.Int? operator=SAFE_CALL
                    VAR val tmp2_safe_receiver: A?
                      GET_VAR 'value-parameter a: A?' type=A? operator=null
                    WHEN type=kotlin.Int? operator=SAFE_CALL
                      if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                        arg0: GET_VAR 'tmp2_safe_receiver: A?' type=A? operator=null
                        arg1: CONST Null type=kotlin.Nothing? value='null'
                      then: CONST Null type=kotlin.Nothing? value='null'
                      else: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR 'tmp2_safe_receiver: A?' type=A? operator=null
                WHEN type=kotlin.Int operator=null
                  if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR 'tmp3_elvis_lhs: Int?' type=kotlin.Int? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Int type=kotlin.Int value='3'
                  else: GET_VAR 'tmp3_elvis_lhs: Int?' type=kotlin.Int? operator=null
              else: GET_VAR 'tmp4_elvis_lhs: Int?' type=kotlin.Int? operator=null
    FUN public fun checkLeftAssoc(a: A?): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='checkLeftAssoc(A?): Int'
          BLOCK type=kotlin.Int operator=ELVIS
            VAR val tmp4_elvis_lhs: kotlin.Int?
              BLOCK type=kotlin.Int? operator=ELVIS
                VAR val tmp3_elvis_lhs: kotlin.Int?
                  BLOCK type=kotlin.Int? operator=SAFE_CALL
                    VAR val tmp1_safe_receiver: A?
                      BLOCK type=A? operator=SAFE_CALL
                        VAR val tmp0_safe_receiver: A?
                          GET_VAR 'value-parameter a: A?' type=A? operator=null
                        WHEN type=A? operator=SAFE_CALL
                          if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                            arg0: GET_VAR 'tmp0_safe_receiver: A?' type=A? operator=null
                            arg1: CONST Null type=kotlin.Nothing? value='null'
                          then: CONST Null type=kotlin.Nothing? value='null'
                          else: CALL '<get-y>(): A?' type=A? operator=GET_PROPERTY
                            $this: GET_VAR 'tmp0_safe_receiver: A?' type=A? operator=null
                    WHEN type=kotlin.Int? operator=SAFE_CALL
                      if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                        arg0: GET_VAR 'tmp1_safe_receiver: A?' type=A? operator=null
                        arg1: CONST Null type=kotlin.Nothing? value='null'
                      then: CONST Null type=kotlin.Nothing? value='null'
                      else: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR 'tmp1_safe_receiver: A?' type=A? operator=null
                WHEN type=kotlin.Int? operator=null
                  if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR 'tmp3_elvis_lhs: Int?' type=kotlin.Int? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: BLOCK type=kotlin.Int? operator=SAFE_CALL
                    VAR val tmp2_safe_receiver: A?
                      GET_VAR 'value-parameter a: A?' type=A? operator=null
                    WHEN type=kotlin.Int? operator=SAFE_CALL
                      if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                        arg0: GET_VAR 'tmp2_safe_receiver: A?' type=A? operator=null
                        arg1: CONST Null type=kotlin.Nothing? value='null'
                      then: CONST Null type=kotlin.Nothing? value='null'
                      else: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR 'tmp2_safe_receiver: A?' type=A? operator=null
                  else: GET_VAR 'tmp3_elvis_lhs: Int?' type=kotlin.Int? operator=null
            WHEN type=kotlin.Int operator=null
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp4_elvis_lhs: Int?' type=kotlin.Int? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CONST Int type=kotlin.Int value='3'
              else: GET_VAR 'tmp4_elvis_lhs: Int?' type=kotlin.Int? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a1: A
          CALL 'constructor A(Int, A?)' type=A operator=null
            x: CONST Int type=kotlin.Int value='2'
            y: CALL 'constructor A(Int, A?)' type=A operator=null
              x: CONST Int type=kotlin.Int value='1'
              y: CONST Null type=kotlin.Nothing? value='null'
        VAR val a2: A
          CALL 'constructor A(Int, A?)' type=A operator=null
            x: CONST Int type=kotlin.Int value='2'
            y: CONST Null type=kotlin.Nothing? value='null'
        VAR val a3: kotlin.Nothing? = null
          CONST Null type=kotlin.Nothing? value='null'
        CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='1'
          actual: CALL 'check(A?): Int' type=kotlin.Int operator=null
            a: GET_VAR 'a1: A' type=A operator=null
        CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='2'
          actual: CALL 'check(A?): Int' type=kotlin.Int operator=null
            a: GET_VAR 'a2: A' type=A operator=null
        CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='3'
          actual: CALL 'check(A?): Int' type=kotlin.Int operator=null
            a: GET_VAR 'a3: Nothing?' type=kotlin.Nothing? operator=null
        CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='1'
          actual: CALL 'checkLeftAssoc(A?): Int' type=kotlin.Int operator=null
            a: GET_VAR 'a1: A' type=A operator=null
        CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='2'
          actual: CALL 'checkLeftAssoc(A?): Int' type=kotlin.Int operator=null
            a: GET_VAR 'a2: A' type=A operator=null
        CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='3'
          actual: CALL 'checkLeftAssoc(A?): Int' type=kotlin.Int operator=null
            a: GET_VAR 'a3: Nothing?' type=kotlin.Nothing? operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
