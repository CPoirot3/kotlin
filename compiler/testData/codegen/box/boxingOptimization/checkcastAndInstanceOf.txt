MODULE <test-module>
  FILE /checkcastAndInstanceOf.kt
    FUN public inline fun <R, T> foo(x: R, y: R, block: (R) -> T): T
      BLOCK_BODY
        VAR val a: kotlin.Boolean
          TYPE_OP operator=INSTANCEOF typeOperand=kotlin.Number
            GET_VAR 'value-parameter x: R' type=R operator=null
        VAR val b: kotlin.Boolean
          TYPE_OP operator=INSTANCEOF typeOperand=java.lang.Object
            GET_VAR 'value-parameter x: R' type=R operator=null
        VAR val b1: java.lang.Object
          TYPE_OP operator=CAST typeOperand=java.lang.Object
            GET_VAR 'value-parameter x: R' type=R operator=null
        WHEN type=kotlin.Nothing operator=IF
          if: WHEN type=kotlin.Boolean operator=ANDAND
            if: GET_VAR 'a: Boolean' type=kotlin.Boolean operator=null
            then: GET_VAR 'b: Boolean' type=kotlin.Boolean operator=null
            else: CONST Boolean type=kotlin.Boolean value='false'
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from='foo(R, R, (R) -> T): T'
              CALL 'invoke(R): T' type=T operator=INVOKE
                $this: GET_VAR 'value-parameter block: (R) -> T' type=(R) -> T operator=VARIABLE_AS_FUNCTION
                p1: GET_VAR 'value-parameter x: R' type=R operator=null
          else: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from='foo(R, R, (R) -> T): T'
              CALL 'invoke(R): T' type=T operator=INVOKE
                $this: GET_VAR 'value-parameter block: (R) -> T' type=(R) -> T operator=VARIABLE_AS_FUNCTION
                p1: GET_VAR 'value-parameter y: R' type=R operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='1'
          actual: CALL 'foo(Int, Int, (Int) -> Int): Int' type=kotlin.Int operator=null
            x: CONST Int type=kotlin.Int value='1'
            y: CONST Int type=kotlin.Int value='2'
            block: BLOCK type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
              FUN local final fun <anonymous>(x: kotlin.Int): kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(Int): Int'
                    TYPE_OP operator=CAST typeOperand=kotlin.Int
                      GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=null
              CALLABLE_REFERENCE '<anonymous>(Int): Int' type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
        CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='def'
          actual: CALL 'foo(String, String, (String) -> String): String' type=kotlin.String operator=null
            x: CONST String type=kotlin.String value='abc'
            y: CONST String type=kotlin.String value='def'
            block: BLOCK type=(kotlin.String) -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(x: kotlin.String): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(String): String'
                    TYPE_OP operator=CAST typeOperand=kotlin.String
                      GET_VAR 'value-parameter x: String' type=kotlin.String operator=null
              CALLABLE_REFERENCE '<anonymous>(String): String' type=(kotlin.String) -> kotlin.String operator=LAMBDA
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
