MODULE <test-module>
  FILE /unsafeRemoving.kt
    FUN public fun returningBoxed(): kotlin.Int?
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='returningBoxed(): Int?'
          CONST Int type=kotlin.Int value='1'
    FUN public fun acceptingBoxed(x: kotlin.Int?): kotlin.Int?
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='acceptingBoxed(Int?): Int?'
          GET_VAR 'value-parameter x: Int?' type=kotlin.Int? operator=null
    CLASS CLASS A
      CONSTRUCTOR public constructor A(x: kotlin.Int? = ...)
        x: EXPRESSION_BODY
          CONST Null type=kotlin.Nothing? value='null'
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'x: Int?' type=kotlin.Unit operator=null
            receiver: THIS of 'A' type=A
            value: GET_VAR 'value-parameter x: Int? = ...' type=kotlin.Int? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      PROPERTY public final var x: kotlin.Int?
        EXPRESSION_BODY
          GET_VAR 'value-parameter x: Int? = ...' type=kotlin.Int? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'assertEquals(Int?, Int?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='1'
          actual: CALL 'returningBoxed(): Int?' type=kotlin.Int? operator=null
        CALL 'assertEquals(Int?, Int?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='1'
          actual: CALL 'acceptingBoxed(Int?): Int?' type=kotlin.Int? operator=null
            x: CONST Int type=kotlin.Int value='1'
        VAR val a: A
          CALL 'constructor A(Int? = ...)' type=A operator=null
        CALL '<set-x>(Int?): Unit' type=kotlin.Unit operator=EQ
          $this: GET_VAR 'a: A' type=A operator=null
          <set-?>: CONST Int type=kotlin.Int value='1'
        CALL 'assertEquals(Int?, Int?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='1'
          actual: CALL '<get-x>(): Int?' type=kotlin.Int? operator=GET_PROPERTY
            $this: GET_VAR 'a: A' type=A operator=null
        VAR val b: kotlin.Array<kotlin.Int?>
          CALL 'constructor Array(Int, (Int) -> Int?)' type=kotlin.Array<kotlin.Int?> operator=null
            size: CONST Int type=kotlin.Int value='1'
            init: BLOCK type=(kotlin.Int) -> kotlin.Nothing? operator=LAMBDA
              FUN local final fun <anonymous>(it: kotlin.Int): kotlin.Nothing?
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(Int): Nothing?'
                    CONST Null type=kotlin.Nothing? value='null'
              CALLABLE_REFERENCE '<anonymous>(Int): Nothing?' type=(kotlin.Int) -> kotlin.Nothing? operator=LAMBDA
        CALL 'set(Int, Int?): Unit' type=kotlin.Unit operator=EQ
          $this: GET_VAR 'b: Array<Int?>' type=kotlin.Array<kotlin.Int?> operator=null
          index: CONST Int type=kotlin.Int value='0'
          value: CONST Int type=kotlin.Int value='1'
        CALL 'assertEquals(Int?, Int?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='1'
          actual: CALL 'get(Int): Int?' type=kotlin.Int? operator=GET_ARRAY_ELEMENT
            $this: GET_VAR 'b: Array<Int?>' type=kotlin.Array<kotlin.Int?> operator=null
            index: CONST Int type=kotlin.Int value='0'
        VAR val x: kotlin.Int? = 1
          CONST Int type=kotlin.Int value='1'
        CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='1'
          actual: CALL 'hashCode(): Int' type=kotlin.Int operator=null
            $this: BLOCK type=kotlin.Int operator=EXCLEXCL
              VAR val tmp0_notnull: kotlin.Int?
                GET_VAR 'x: Int?' type=kotlin.Int? operator=null
              WHEN type=kotlin.Int operator=null
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR 'tmp0_notnull: Int?' type=kotlin.Int? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                else: GET_VAR 'tmp0_notnull: Int?' type=kotlin.Int? operator=null
        VAR val y: kotlin.Int? = 1000
          CONST Int type=kotlin.Int value='1000'
        VAR val z: kotlin.Int? = 1000
          CONST Int type=kotlin.Int value='1000'
        VAR val res: kotlin.Boolean
          CALL 'EQEQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQEQ
            arg0: GET_VAR 'y: Int?' type=kotlin.Int? operator=null
            arg1: GET_VAR 'z: Int?' type=kotlin.Int? operator=null
        VAR val c1: kotlin.Any
          WHEN type=kotlin.Any operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CONST Int type=kotlin.Int value='1'
              arg1: CONST Int type=kotlin.Int value='1'
            then: CONST Int type=kotlin.Int value='0'
            else: CONST String type=kotlin.String value='abc'
        VAR val c2: kotlin.Any
          WHEN type=kotlin.Any operator=IF
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CONST Int type=kotlin.Int value='1'
                arg1: CONST Int type=kotlin.Int value='1'
            then: CONST Int type=kotlin.Int value='0'
            else: CONST String type=kotlin.String value='abc'
        CALL 'assertEquals(Any, Any, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='0'
          actual: GET_VAR 'c1: Any' type=kotlin.Any operator=null
        CALL 'assertEquals(Any, Any, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='abc'
          actual: GET_VAR 'c2: Any' type=kotlin.Any operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
