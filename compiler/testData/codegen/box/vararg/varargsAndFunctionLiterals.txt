MODULE <test-module>
  FILE /varargsAndFunctionLiterals.kt
    FUN public fun foo(a: kotlin.Int, vararg b: kotlin.Int, f: (kotlin.IntArray) -> kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='foo(Int, vararg Int, (IntArray) -> String): String'
          CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
            $this: CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
                $this: CONST String type=kotlin.String value='test'
                other: GET_VAR 'value-parameter a: Int' type=kotlin.Int operator=null
              other: CONST String type=kotlin.String value=' '
            other: CALL 'invoke(IntArray): String' type=kotlin.String operator=INVOKE
              $this: GET_VAR 'value-parameter f: (IntArray) -> String' type=(kotlin.IntArray) -> kotlin.String operator=VARIABLE_AS_FUNCTION
              p1: GET_VAR 'value-parameter vararg b: Int' type=kotlin.IntArray operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val test1: kotlin.String
          CALL 'foo(Int, vararg Int, (IntArray) -> String): String' type=kotlin.String operator=null
            a: CONST Int type=kotlin.Int value='1'
            f: BLOCK type=(kotlin.IntArray) -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(a: kotlin.IntArray): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(IntArray): String'
                    CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
                      $this: CONST String type=kotlin.String value=''
                      other: CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR 'value-parameter a: IntArray' type=kotlin.IntArray operator=null
              CALLABLE_REFERENCE '<anonymous>(IntArray): String' type=(kotlin.IntArray) -> kotlin.String operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'test1: String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='test1 0'
          then: RETURN type=kotlin.Nothing from='box(): String'
            GET_VAR 'test1: String' type=kotlin.String operator=null
        VAR val test2: kotlin.String
          CALL 'foo(Int, vararg Int, (IntArray) -> String): String' type=kotlin.String operator=null
            a: CONST Int type=kotlin.Int value='2'
            b: VARARG type=IntArray varargElementType=Int
              CONST Int type=kotlin.Int value='2'
            f: BLOCK type=(kotlin.IntArray) -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(a: kotlin.IntArray): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(IntArray): String'
                    CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
                      $this: CONST String type=kotlin.String value=''
                      other: CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR 'value-parameter a: IntArray' type=kotlin.IntArray operator=null
              CALLABLE_REFERENCE '<anonymous>(IntArray): String' type=(kotlin.IntArray) -> kotlin.String operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'test2: String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='test2 1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            GET_VAR 'test2: String' type=kotlin.String operator=null
        VAR val test3: kotlin.String
          CALL 'foo(Int, vararg Int, (IntArray) -> String): String' type=kotlin.String operator=null
            a: CONST Int type=kotlin.Int value='3'
            b: VARARG type=IntArray varargElementType=Int
              CONST Int type=kotlin.Int value='2'
              CONST Int type=kotlin.Int value='3'
            f: BLOCK type=(kotlin.IntArray) -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(a: kotlin.IntArray): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(IntArray): String'
                    CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
                      $this: CONST String type=kotlin.String value=''
                      other: CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR 'value-parameter a: IntArray' type=kotlin.IntArray operator=null
              CALLABLE_REFERENCE '<anonymous>(IntArray): String' type=(kotlin.IntArray) -> kotlin.String operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'test3: String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='test3 2'
          then: RETURN type=kotlin.Nothing from='box(): String'
            GET_VAR 'test3: String' type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
