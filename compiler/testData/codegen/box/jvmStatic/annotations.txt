MODULE <test-module>
  FILE /test.kt
    CLASS ANNOTATION_CLASS testAnnotation
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      CLASS OBJECT companion object of A
        CONSTRUCTOR private constructor Companion()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
            INSTANCE_INITIALIZER_CALL classDescriptor='companion object of A'
        PROPERTY public final val b: kotlin.String = "OK"
          EXPRESSION_BODY
            CONST String type=kotlin.String value='OK'
        FUN @kotlin.jvm.JvmStatic @testAnnotation public final fun test1(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='test1(): String'
              CALL '<get-b>(): String' type=kotlin.String operator=GET_PROPERTY
                $this: THIS of 'companion object of A' type=A.Companion
    CLASS OBJECT B
      CONSTRUCTOR private constructor B()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='B'
      PROPERTY public final val b: kotlin.String = "OK"
        EXPRESSION_BODY
          CONST String type=kotlin.String value='OK'
      FUN @kotlin.jvm.JvmStatic @testAnnotation public final fun test1(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='test1(): String'
            CALL '<get-b>(): String' type=kotlin.String operator=GET_PROPERTY
              $this: THIS of 'B' type=B
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'test1(): String!' type=kotlin.String! operator=null
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail 1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'test2(): String!' type=kotlin.String! operator=null
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail 2'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
