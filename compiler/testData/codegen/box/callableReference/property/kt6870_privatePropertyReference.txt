MODULE <test-module>
  FILE /kt6870_privatePropertyReference.kt
    CLASS CLASS Test
      CONSTRUCTOR public constructor Test()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Test'
      PROPERTY private final var iv: kotlin.Int
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value='1'
      FUN public final fun exec(): kotlin.Unit
        BLOCK_BODY
          VAR val t: Test.exec.<no name provided>
            BLOCK type=Test.exec.<no name provided> operator=OBJECT_LITERAL
              CLASS CLASS <no name provided>
                CONSTRUCTOR public constructor <no name provided>()
                  BLOCK_BODY
                    DELEGATING_CONSTRUCTOR_CALL 'constructor Thread()'
                    INSTANCE_INITIALIZER_CALL classDescriptor='<no name provided>'
                FUN public open override fun run(): kotlin.Unit
                  BLOCK_BODY
                    CALL 'get(Test): Int' type=kotlin.Int operator=null
                      $this: CALLABLE_REFERENCE 'iv: Int' type=kotlin.reflect.KMutableProperty1<Test, kotlin.Int> operator=null
                      receiver: THIS of 'Test' type=Test
                    CALL 'set(Test, Int): Unit' type=kotlin.Unit operator=null
                      $this: CALLABLE_REFERENCE 'iv: Int' type=kotlin.reflect.KMutableProperty1<Test, kotlin.Int> operator=null
                      receiver: THIS of 'Test' type=Test
                      value: CONST Int type=kotlin.Int value='2'
              CALL 'constructor <no name provided>()' type=Test.exec.<no name provided> operator=OBJECT_LITERAL
          CALL 'start(): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR 't: <no name provided>' type=Test.exec.<no name provided> operator=null
          CALL 'join(Long): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR 't: <no name provided>' type=Test.exec.<no name provided> operator=null
            p0: CONST Long type=kotlin.Long value='1000'
      FUN public final fun result(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='result(): String'
            WHEN type=kotlin.String operator=IF
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: CALL '<get-iv>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS of 'Test' type=Test
                arg1: CONST Int type=kotlin.Int value='2'
              then: CONST String type=kotlin.String value='OK'
              else: STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='Fail '
                CALL '<get-iv>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS of 'Test' type=Test
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val t: Test
          CALL 'constructor Test()' type=Test operator=null
        CALL 'exec(): Unit' type=kotlin.Unit operator=null
          $this: GET_VAR 't: Test' type=Test operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CALL 'result(): String' type=kotlin.String operator=null
            $this: GET_VAR 't: Test' type=Test operator=null
