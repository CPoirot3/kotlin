MODULE <test-module>
  FILE /privateSetterOutsideClass.kt
    CLASS CLASS Bar
      CONSTRUCTOR public constructor Bar(name: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Bar'
      PROPERTY public final var foo: kotlin.String
        EXPRESSION_BODY
          GET_VAR 'value-parameter name: String' type=kotlin.String operator=null
        PROPERTY_SETTER private final fun <set-foo>(<set-?>: kotlin.String): kotlin.Unit
    CLASS CLASS Baz
      CONSTRUCTOR public constructor Baz()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Bar(String)'
            name: CONST String type=kotlin.String value=''
          INSTANCE_INITIALIZER_CALL classDescriptor='Baz'
      FUN public final fun ref(): kotlin.reflect.KProperty1<Bar, kotlin.String>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='ref(): KProperty1<Bar, String>'
            CALLABLE_REFERENCE 'foo: String' type=kotlin.reflect.KProperty1<Bar, kotlin.String> operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val p1: kotlin.reflect.KProperty1<Bar, kotlin.String>
          CALLABLE_REFERENCE 'foo: String' type=kotlin.reflect.KProperty1<Bar, kotlin.String> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.reflect.KMutableProperty<*>
            GET_VAR 'p1: KProperty1<Bar, String>' type=kotlin.reflect.KProperty1<Bar, kotlin.String> operator=null
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail: p1 is a KMutableProperty'
        VAR val p2: kotlin.reflect.KProperty1<Bar, kotlin.String>
          CALL 'ref(): KProperty1<Bar, String>' type=kotlin.reflect.KProperty1<Bar, kotlin.String> operator=null
            $this: CALL 'constructor Baz()' type=Baz operator=null
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.reflect.KMutableProperty<*>
            GET_VAR 'p2: KProperty1<Bar, String>' type=kotlin.reflect.KProperty1<Bar, kotlin.String> operator=null
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail: p2 is a KMutableProperty'
        VAR val p3: kotlin.reflect.KProperty0<kotlin.String>
          CALLABLE_REFERENCE 'foo: String' type=kotlin.reflect.KProperty0<kotlin.String> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.reflect.KMutableProperty<*>
            GET_VAR 'p3: KProperty0<String>' type=kotlin.reflect.KProperty0<kotlin.String> operator=null
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='Fail: p3 is a KMutableProperty'
        RETURN type=kotlin.Nothing from='box(): String'
          CALL 'get(Bar): String' type=kotlin.String operator=null
            $this: GET_VAR 'p1: KProperty1<Bar, String>' type=kotlin.reflect.KProperty1<Bar, kotlin.String> operator=null
            receiver: CALL 'constructor Bar(String)' type=Bar operator=null
              name: CONST String type=kotlin.String value='OK'
