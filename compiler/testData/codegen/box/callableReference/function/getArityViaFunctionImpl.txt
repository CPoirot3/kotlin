MODULE <test-module>
  FILE /getArityViaFunctionImpl.kt
    FUN public fun test(f: kotlin.Function<*>, arity: kotlin.Int): kotlin.Unit
      BLOCK_BODY
        CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_VAR 'value-parameter arity: Int' type=kotlin.Int operator=null
          actual: CALL 'getArity(): Int' type=kotlin.Int operator=null
            $this: TYPE_OP operator=CAST typeOperand=kotlin.jvm.internal.FunctionImpl
              GET_VAR 'value-parameter f: Function<*>' type=kotlin.Function<*> operator=null
    FUN public fun foo(s: kotlin.String, i: kotlin.Int): kotlin.Unit
      BLOCK_BODY
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      FUN public final fun bar(s: kotlin.String, i: kotlin.Int): kotlin.Unit
        BLOCK_BODY
    FUN public fun kotlin.Double.baz(s: kotlin.String, i: kotlin.Int): kotlin.Unit
      BLOCK_BODY
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'test(Function<*>, Int): Unit' type=kotlin.Unit operator=null
          f: CALLABLE_REFERENCE 'foo(String, Int): Unit' type=kotlin.reflect.KFunction2<kotlin.String, kotlin.Int, kotlin.Unit> operator=null
          arity: CONST Int type=kotlin.Int value='2'
        CALL 'test(Function<*>, Int): Unit' type=kotlin.Unit operator=null
          f: CALLABLE_REFERENCE 'bar(String, Int): Unit' type=kotlin.reflect.KFunction3<A, kotlin.String, kotlin.Int, kotlin.Unit> operator=null
          arity: CONST Int type=kotlin.Int value='3'
        CALL 'test(Function<*>, Int): Unit' type=kotlin.Unit operator=null
          f: CALLABLE_REFERENCE 'baz(String, Int) on Double: Unit' type=kotlin.reflect.KFunction3<kotlin.Double, kotlin.String, kotlin.Int, kotlin.Unit> operator=null
          arity: CONST Int type=kotlin.Int value='3'
        CALL 'test(Function<*>, Int): Unit' type=kotlin.Unit operator=null
          f: CALLABLE_REFERENCE 'box(): String' type=kotlin.reflect.KFunction0<kotlin.String> operator=null
          arity: CONST Int type=kotlin.Int value='0'
        FUN local final fun local(x: kotlin.Int): kotlin.Unit
          BLOCK_BODY
        CALL 'test(Function<*>, Int): Unit' type=kotlin.Unit operator=null
          f: CALLABLE_REFERENCE 'local(Int): Unit' type=kotlin.reflect.KFunction1<kotlin.Int, kotlin.Unit> operator=null
          arity: CONST Int type=kotlin.Int value='1'
        CALL 'test(Function<*>, Int): Unit' type=kotlin.Unit operator=null
          f: BLOCK type=(kotlin.String) -> kotlin.String operator=ANONYMOUS_FUNCTION
            FUN local final fun <no name provided>(s: kotlin.String): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<no name provided>(String): String'
                  GET_VAR 'value-parameter s: String' type=kotlin.String operator=null
            CALLABLE_REFERENCE '<no name provided>(String): String' type=(kotlin.String) -> kotlin.String operator=ANONYMOUS_FUNCTION
          arity: CONST Int type=kotlin.Int value='1'
        CALL 'test(Function<*>, Int): Unit' type=kotlin.Unit operator=null
          f: BLOCK type=() -> kotlin.Unit operator=ANONYMOUS_FUNCTION
            FUN local final fun <no name provided>(): kotlin.Unit
              BLOCK_BODY
            CALLABLE_REFERENCE '<no name provided>(): Unit' type=() -> kotlin.Unit operator=ANONYMOUS_FUNCTION
          arity: CONST Int type=kotlin.Int value='0'
        CALL 'test(Function<*>, Int): Unit' type=kotlin.Unit operator=null
          f: BLOCK type=() -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): Unit'
            CALLABLE_REFERENCE '<anonymous>(): Unit' type=() -> kotlin.Unit operator=LAMBDA
          arity: CONST Int type=kotlin.Int value='0'
        CALL 'test(Function<*>, Int): Unit' type=kotlin.Unit operator=null
          f: BLOCK type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
            FUN local final fun <anonymous>(x: kotlin.Int): kotlin.Int
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(Int): Int'
                  GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=null
            CALLABLE_REFERENCE '<anonymous>(Int): Int' type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
          arity: CONST Int type=kotlin.Int value='1'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
