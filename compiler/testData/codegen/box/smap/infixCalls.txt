MODULE <test-module>
  FILE /infixCalls.kt
    FUN public fun testProperLineNumber(): kotlin.String
      BLOCK_BODY
        VAR var exceptionCount: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        TRY_CATCH type=kotlin.Any
          try: BLOCK type=kotlin.String operator=null
            CALL 'fail(String) on String: String' type=kotlin.String operator=null
              $receiver: CALL 'test(): String' type=kotlin.String operator=null
              p: CALL 'call(): String' type=kotlin.String operator=null
          catch e: BLOCK type=kotlin.Int operator=null
            VAR val entry: java.lang.StackTraceElement!
              CALL 'get(Int): StackTraceElement!' type=java.lang.StackTraceElement! operator=null
                $this: BLOCK type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=EXCLEXCL
                  VAR val tmp0_notnull: kotlin.Array<(out) java.lang.StackTraceElement!>!
                    CALL 'getStackTrace(): Array<(out) StackTraceElement!>!' type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                      $this: TYPE_OP operator=CAST typeOperand=java.lang.Throwable
                        GET_VAR 'e: AssertionError /* = AssertionError */' type=kotlin.AssertionError /* = java.lang.AssertionError */ operator=null
                  WHEN type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=null
                    if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                      arg0: GET_VAR 'tmp0_notnull: Array<(out) StackTraceElement!>!' type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                      arg1: CONST Null type=kotlin.Nothing? value='null'
                    then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                    else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.StackTraceElement!>
                      GET_VAR 'tmp0_notnull: Array<(out) StackTraceElement!>!' type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                index: CONST Int type=kotlin.Int value='1'
            VAR val actual: kotlin.String
              STRING_CONCATENATION type=kotlin.String
                CALL 'getFileName(): String!' type=kotlin.String! operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR 'entry: StackTraceElement!' type=java.lang.StackTraceElement! operator=null
                CONST String type=kotlin.String value=':'
                CALL 'getLineNumber(): Int' type=kotlin.Int operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR 'entry: StackTraceElement!' type=java.lang.StackTraceElement! operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                  arg0: CONST String type=kotlin.String value='infixCalls.kt:7'
                  arg1: GET_VAR 'actual: String' type=kotlin.String operator=null
              then: BLOCK type=kotlin.Nothing operator=null
                RETURN type=kotlin.Nothing from='testProperLineNumber(): String'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='fail 1: '
                    GET_VAR 'actual: String' type=kotlin.String operator=null
            BLOCK type=kotlin.Int operator=POSTFIX_INCR
              VAR val tmp1: kotlin.Int
                GET_VAR 'exceptionCount: Int' type=kotlin.Int operator=POSTFIX_INCR
              SET_VAR 'exceptionCount: Int' type=kotlin.Unit operator=POSTFIX_INCR
                CALL 'inc(): Int' type=kotlin.Int operator=POSTFIX_INCR
                  $this: GET_VAR 'tmp1: Int' type=kotlin.Int operator=null
              GET_VAR 'tmp1: Int' type=kotlin.Int operator=null
        TRY_CATCH type=kotlin.Any
          try: BLOCK type=kotlin.String operator=null
            CALL 'fail(String) on String: String' type=kotlin.String operator=null
              $receiver: CALL 'call(): String' type=kotlin.String operator=null
              p: CALL 'test(): String' type=kotlin.String operator=null
          catch e: BLOCK type=kotlin.Int operator=null
            VAR val entry: java.lang.StackTraceElement!
              CALL 'get(Int): StackTraceElement!' type=java.lang.StackTraceElement! operator=GET_ARRAY_ELEMENT
                $this: BLOCK type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=EXCLEXCL
                  VAR val tmp2_notnull: kotlin.Array<(out) java.lang.StackTraceElement!>!
                    CALL '<get-stackTrace>() on AssertionError: Array<(out) StackTraceElement!>!' type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=GET_PROPERTY
                      $receiver: GET_VAR 'e: AssertionError /* = AssertionError */' type=kotlin.AssertionError /* = java.lang.AssertionError */ operator=null
                  WHEN type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=null
                    if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                      arg0: GET_VAR 'tmp2_notnull: Array<(out) StackTraceElement!>!' type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                      arg1: CONST Null type=kotlin.Nothing? value='null'
                    then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                    else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.StackTraceElement!>
                      GET_VAR 'tmp2_notnull: Array<(out) StackTraceElement!>!' type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                index: CONST Int type=kotlin.Int value='1'
            VAR val actual: kotlin.String
              STRING_CONCATENATION type=kotlin.String
                CALL 'getFileName(): String!' type=kotlin.String! operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR 'entry: StackTraceElement!' type=java.lang.StackTraceElement! operator=null
                CONST String type=kotlin.String value=':'
                CALL 'getLineNumber(): Int' type=kotlin.Int operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR 'entry: StackTraceElement!' type=java.lang.StackTraceElement! operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                  arg0: CONST String type=kotlin.String value='infixCalls.kt:20'
                  arg1: GET_VAR 'actual: String' type=kotlin.String operator=null
              then: BLOCK type=kotlin.Nothing operator=null
                RETURN type=kotlin.Nothing from='testProperLineNumber(): String'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='fail 1: '
                    GET_VAR 'actual: String' type=kotlin.String operator=null
            BLOCK type=kotlin.Int operator=POSTFIX_INCR
              VAR val tmp3: kotlin.Int
                GET_VAR 'exceptionCount: Int' type=kotlin.Int operator=POSTFIX_INCR
              SET_VAR 'exceptionCount: Int' type=kotlin.Unit operator=POSTFIX_INCR
                CALL 'inc(): Int' type=kotlin.Int operator=POSTFIX_INCR
                  $this: GET_VAR 'tmp3: Int' type=kotlin.Int operator=null
              GET_VAR 'tmp3: Int' type=kotlin.Int operator=null
        TRY_CATCH type=kotlin.Any
          try: BLOCK type=kotlin.String operator=null
            CALL 'fail(String) on String: String' type=kotlin.String operator=null
              $receiver: CALL 'call(): String' type=kotlin.String operator=null
              p: CALL 'test(): String' type=kotlin.String operator=null
          catch e: BLOCK type=kotlin.Int operator=null
            VAR val entry: java.lang.StackTraceElement!
              CALL 'get(Int): StackTraceElement!' type=java.lang.StackTraceElement! operator=GET_ARRAY_ELEMENT
                $this: BLOCK type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=EXCLEXCL
                  VAR val tmp4_notnull: kotlin.Array<(out) java.lang.StackTraceElement!>!
                    CALL '<get-stackTrace>() on AssertionError: Array<(out) StackTraceElement!>!' type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=GET_PROPERTY
                      $receiver: GET_VAR 'e: AssertionError /* = AssertionError */' type=kotlin.AssertionError /* = java.lang.AssertionError */ operator=null
                  WHEN type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=null
                    if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                      arg0: GET_VAR 'tmp4_notnull: Array<(out) StackTraceElement!>!' type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                      arg1: CONST Null type=kotlin.Nothing? value='null'
                    then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                    else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.StackTraceElement!>
                      GET_VAR 'tmp4_notnull: Array<(out) StackTraceElement!>!' type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                index: CONST Int type=kotlin.Int value='1'
            VAR val actual: kotlin.String
              STRING_CONCATENATION type=kotlin.String
                CALL 'getFileName(): String!' type=kotlin.String! operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR 'entry: StackTraceElement!' type=java.lang.StackTraceElement! operator=null
                CONST String type=kotlin.String value=':'
                CALL 'getLineNumber(): Int' type=kotlin.Int operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR 'entry: StackTraceElement!' type=java.lang.StackTraceElement! operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                  arg0: CONST String type=kotlin.String value='infixCalls.kt:33'
                  arg1: GET_VAR 'actual: String' type=kotlin.String operator=null
              then: BLOCK type=kotlin.Nothing operator=null
                RETURN type=kotlin.Nothing from='testProperLineNumber(): String'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='fail 1: '
                    GET_VAR 'actual: String' type=kotlin.String operator=null
            BLOCK type=kotlin.Int operator=POSTFIX_INCR
              VAR val tmp5: kotlin.Int
                GET_VAR 'exceptionCount: Int' type=kotlin.Int operator=POSTFIX_INCR
              SET_VAR 'exceptionCount: Int' type=kotlin.Unit operator=POSTFIX_INCR
                CALL 'inc(): Int' type=kotlin.Int operator=POSTFIX_INCR
                  $this: GET_VAR 'tmp5: Int' type=kotlin.Int operator=null
              GET_VAR 'tmp5: Int' type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from='testProperLineNumber(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'exceptionCount: Int' type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='3'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          CALL 'testProperLineNumber(): String' type=kotlin.String operator=null
    FUN public fun checkEquals(p1: kotlin.String, p2: kotlin.String): kotlin.Unit
      BLOCK_BODY
        THROW type=kotlin.Nothing
          CALL 'constructor AssertionError(Any!)' type=java.lang.AssertionError operator=null
            p0: CONST String type=kotlin.String value='fail'
    FUN public inline fun test(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='test(): String'
          CONST String type=kotlin.String value='123'
    FUN public infix fun kotlin.String.fail(p: kotlin.String): kotlin.String
      BLOCK_BODY
        THROW type=kotlin.Nothing
          CALL 'constructor AssertionError(Any!)' type=java.lang.AssertionError operator=null
            p0: CONST String type=kotlin.String value='fail'
    FUN public fun call(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='call(): String'
          CONST String type=kotlin.String value='xxx'
