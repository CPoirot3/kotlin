MODULE <test-module>
  FILE /test.kt
    CLASS ANNOTATION_CLASS Ann
      PROPERTY public final val x: kotlin.String
        EXPRESSION_BODY
          GET_VAR 'value-parameter x: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public fun testMethod(method: java.lang.reflect.Method, name: kotlin.String): kotlin.Unit
      BLOCK_BODY
        CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='OK'
          actual: CALL '<get-x>(): String' type=kotlin.String operator=GET_PROPERTY
            $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
              CALL 'getAnnotation(Class<Ann!>!): Ann!' type=Ann! operator=null
                $this: GET_VAR 'value-parameter method: Method' type=java.lang.reflect.Method operator=null
                p0: CALL '<get-java>() on KClass<Ann>: Class<Ann>' type=java.lang.Class<Ann> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE 'Ann' type=kotlin.reflect.KClass<Ann>
          message: STRING_CONCATENATION type=kotlin.String
            CONST String type=kotlin.String value='On method of test named `'
            GET_VAR 'value-parameter name: String' type=kotlin.String operator=null
            CONST String type=kotlin.String value='`'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.collections.IndexedValue<kotlin.Array<(out) kotlin.Annotation!>!>>
            CALL 'iterator(): Iterator<IndexedValue<Array<(out) Annotation!>!>>' type=kotlin.collections.Iterator<kotlin.collections.IndexedValue<kotlin.Array<(out) kotlin.Annotation!>!>> operator=FOR_LOOP_ITERATOR
              $this: CALL 'withIndex() on Array<out Array<(out) Annotation!>!>: Iterable<IndexedValue<Array<(out) Annotation!>!>>' type=kotlin.collections.Iterable<kotlin.collections.IndexedValue<kotlin.Array<(out) kotlin.Annotation!>!>> operator=null
                $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out kotlin.Array<(out) kotlin.Annotation!>!>
                  CALL 'getParameterAnnotations(): Array<(out) Array<(out) Annotation!>!>!' type=kotlin.Array<(out) kotlin.Array<(out) kotlin.Annotation!>!>! operator=null
                    $this: GET_VAR 'value-parameter method: Method' type=java.lang.reflect.Method operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp0_iterator: Iterator<IndexedValue<Array<(out) Annotation!>!>>' type=kotlin.collections.Iterator<kotlin.collections.IndexedValue<kotlin.Array<(out) kotlin.Annotation!>!>> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val tmp1_loop_parameter: kotlin.collections.IndexedValue<kotlin.Array<(out) kotlin.Annotation!>!>
                CALL 'next(): IndexedValue<Array<(out) Annotation!>!>' type=kotlin.collections.IndexedValue<kotlin.Array<(out) kotlin.Annotation!>!> operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp0_iterator: Iterator<IndexedValue<Array<(out) Annotation!>!>>' type=kotlin.collections.Iterator<kotlin.collections.IndexedValue<kotlin.Array<(out) kotlin.Annotation!>!>> operator=null
              VAR val index: kotlin.Int
                CALL 'component1(): Int' type=kotlin.Int operator=COMPONENT_N(index=1)
                  $this: GET_VAR 'tmp1_loop_parameter: IndexedValue<Array<(out) Annotation!>!>' type=kotlin.collections.IndexedValue<kotlin.Array<(out) kotlin.Annotation!>!> operator=null
              VAR val annotations: kotlin.Array<(out) kotlin.Annotation!>!
                CALL 'component2(): Array<(out) Annotation!>!' type=kotlin.Array<(out) kotlin.Annotation!>! operator=COMPONENT_N(index=2)
                  $this: GET_VAR 'tmp1_loop_parameter: IndexedValue<Array<(out) Annotation!>!>' type=kotlin.collections.IndexedValue<kotlin.Array<(out) kotlin.Annotation!>!> operator=null
              BLOCK type=kotlin.Unit operator=null
                VAR val ann: Ann
                  CALL 'single() on List<Ann>: Ann' type=Ann operator=null
                    $receiver: CALL 'filterIsInstance() on Array<*>: List<Ann>' type=kotlin.collections.List<Ann> operator=null
                      $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out kotlin.Annotation!>
                        GET_VAR 'annotations: Array<(out) Annotation!>!' type=kotlin.Array<(out) kotlin.Annotation!>! operator=null
                CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
                  expected: STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='OK'
                    GET_VAR 'index: Int' type=kotlin.Int operator=null
                  actual: CALL '<get-x>(): String' type=kotlin.String operator=GET_PROPERTY
                    $this: GET_VAR 'ann: Ann' type=Ann operator=null
                  message: STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='On parameter '
                    GET_VAR 'index: Int' type=kotlin.Int operator=null
                    CONST String type=kotlin.String value=' of test named `'
                    GET_VAR 'value-parameter name: String' type=kotlin.String operator=null
                    CONST String type=kotlin.String value='`'
    FUN public fun testClass(clazz: java.lang.Class<*>, name: kotlin.String): kotlin.Unit
      BLOCK_BODY
        VAR val invokes: java.lang.reflect.Method!
          CALL 'single((Method!) -> Boolean) on Array<out Method!>: Method!' type=java.lang.reflect.Method! operator=null
            $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Method!>
              CALL 'getDeclaredMethods(): Array<(out) Method!>!' type=kotlin.Array<(out) java.lang.reflect.Method!>! operator=null
                $this: GET_VAR 'value-parameter clazz: Class<*>' type=java.lang.Class<*> operator=null
            predicate: BLOCK type=(java.lang.reflect.Method!) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(it: java.lang.reflect.Method!): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(Method!): Boolean'
                    CALL 'not(): Boolean' type=kotlin.Boolean operator=EXCL
                      $this: CALL 'isBridge(): Boolean' type=kotlin.Boolean operator=null
                        $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                          GET_VAR 'value-parameter it: Method!' type=java.lang.reflect.Method! operator=null
              CALLABLE_REFERENCE '<anonymous>(Method!): Boolean' type=(java.lang.reflect.Method!) -> kotlin.Boolean operator=LAMBDA
        CALL 'testMethod(Method, String): Unit' type=kotlin.Unit operator=null
          method: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
            GET_VAR 'invokes: Method!' type=java.lang.reflect.Method! operator=null
          name: GET_VAR 'value-parameter name: String' type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'testClass(Class<*>, String): Unit' type=kotlin.Unit operator=null
          clazz: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.Class<*>
            CALL 'apply((() -> Unit)!): Class<*>!' type=java.lang.Class<*>! operator=null
              x: BLOCK type=() -> kotlin.Unit operator=ANONYMOUS_FUNCTION
                FUN @Ann local final fun <no name provided>(): kotlin.Unit
                  BLOCK_BODY
                CALLABLE_REFERENCE '<no name provided>(): Unit' type=() -> kotlin.Unit operator=ANONYMOUS_FUNCTION
          name: CONST String type=kotlin.String value='1'
        CALL 'testClass(Class<*>, String): Unit' type=kotlin.Unit operator=null
          clazz: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.Class<*>
            CALL 'applyABC(((String!, String!) -> Unit)!): Class<*>!' type=java.lang.Class<*>! operator=null
              x: BLOCK type=(kotlin.String, kotlin.String) -> kotlin.Unit operator=ANONYMOUS_FUNCTION
                FUN @Ann local final fun <no name provided>(@Ann x: kotlin.String, @Ann y: kotlin.String): kotlin.Unit
                  BLOCK_BODY
                CALLABLE_REFERENCE '<no name provided>(String, String): Unit' type=(kotlin.String, kotlin.String) -> kotlin.Unit operator=ANONYMOUS_FUNCTION
          name: CONST String type=kotlin.String value='2'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
