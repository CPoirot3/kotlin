MODULE <test-module>
  FILE /kt10136.kt
    CLASS ANNOTATION_CLASS A
    CLASS ANNOTATION_CLASS B
      PROPERTY public final val items: kotlin.Array<A>
        EXPRESSION_BODY
          GET_VAR 'value-parameter items: Array<A> = ...' type=kotlin.Array<A> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='C'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val bClass: java.lang.Class<B>
          CALL '<get-java>() on KClass<B>: Class<B>' type=java.lang.Class<B> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'B' type=kotlin.reflect.KClass<B>
        VAR val cClass: java.lang.Class<C>
          CALL '<get-java>() on KClass<C>: Class<C>' type=java.lang.Class<C> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'C' type=kotlin.reflect.KClass<C>
        VAR val items: kotlin.Array<A>
          CALL '<get-items>(): Array<A>' type=kotlin.Array<A> operator=GET_PROPERTY
            $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=B
              CALL 'getAnnotation(Class<B!>!): B!' type=B! operator=null
                $this: GET_VAR 'cClass: Class<C>' type=java.lang.Class<C> operator=null
                p0: GET_VAR 'bClass: Class<B>' type=java.lang.Class<B> operator=null
        CALL 'assert(Boolean, () -> Any): Unit' type=kotlin.Unit operator=null
          value: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
            arg0: CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
              $this: GET_VAR 'items: Array<A>' type=kotlin.Array<A> operator=null
            arg1: CONST Int type=kotlin.Int value='1'
          lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): String'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='Expected: [A()], got '
                    CALL 'asList() on Array<out A>: List<A>' type=kotlin.collections.List<A> operator=null
                      $receiver: GET_VAR 'items: Array<A>' type=kotlin.Array<A> operator=null
            CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
        CALL 'assert(Boolean, () -> Any): Unit' type=kotlin.Unit operator=null
          value: TYPE_OP operator=INSTANCEOF typeOperand=A
            CALL 'get(Int): A' type=A operator=GET_ARRAY_ELEMENT
              $this: GET_VAR 'items: Array<A>' type=kotlin.Array<A> operator=null
              index: CONST Int type=kotlin.Int value='0'
          lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): String'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='Expected: [A()], got '
                    CALL 'asList() on Array<out A>: List<A>' type=kotlin.collections.List<A> operator=null
                      $receiver: GET_VAR 'items: Array<A>' type=kotlin.Array<A> operator=null
            CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
