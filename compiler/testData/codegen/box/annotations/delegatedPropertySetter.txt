MODULE <test-module>
  FILE /delegatedPropertySetter.kt
    CLASS ANNOTATION_CLASS First
    CLASS CLASS MyClass
      CONSTRUCTOR public constructor MyClass()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='MyClass'
      PROPERTY public final var x: kotlin.String
        delegate: PROPERTY val `x$delegate`: Delegate
          EXPRESSION_BODY
            CALL 'constructor Delegate()' type=Delegate operator=null
        PROPERTY_GETTER public final fun <get-x>(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='<get-x>(): String'
              CALL 'getValue(Any?, KProperty<*>): String' type=kotlin.String operator=null
                $this: GET_BACKING_FIELD '`x$delegate`: Delegate' type=Delegate operator=null
                  receiver: THIS of 'MyClass' type=MyClass
                t: THIS of 'MyClass' type=MyClass
                p: CALLABLE_REFERENCE 'x: String' type=kotlin.reflect.KMutableProperty1<MyClass, kotlin.String> operator=PROPERTY_REFERENCE_FOR_DELEGATE
        PROPERTY_SETTER @First public final fun <set-x>(<set-?>: kotlin.String): kotlin.Unit
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='<set-x>(String): Unit'
              CALL 'setValue(Any?, KProperty<*>, String): Unit' type=kotlin.Unit operator=null
                $this: GET_BACKING_FIELD '`x$delegate`: Delegate' type=Delegate operator=null
                  receiver: THIS of 'MyClass' type=MyClass
                t: THIS of 'MyClass' type=MyClass
                p: CALLABLE_REFERENCE 'x: String' type=kotlin.reflect.KMutableProperty1<MyClass, kotlin.String> operator=PROPERTY_REFERENCE_FOR_DELEGATE
                i: GET_VAR 'value-parameter <set-?>: String' type=kotlin.String operator=null
    CLASS CLASS Delegate
      CONSTRUCTOR public constructor Delegate()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Delegate'
      FUN public final operator fun getValue(t: kotlin.Any?, p: kotlin.reflect.KProperty<*>): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getValue(Any?, KProperty<*>): String'
            CONST String type=kotlin.String value='OK'
      FUN public final operator fun setValue(t: kotlin.Any?, p: kotlin.reflect.KProperty<*>, i: kotlin.String): kotlin.Unit
        BLOCK_BODY
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val e: java.lang.Class<MyClass>
          CALL '<get-java>() on KClass<MyClass>: Class<MyClass>' type=java.lang.Class<MyClass> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'MyClass' type=kotlin.reflect.KClass<MyClass>
        VAR val e1: kotlin.Array<(out) kotlin.Annotation!>!
          CALL 'getAnnotations(): Array<(out) Annotation!>!' type=kotlin.Array<(out) kotlin.Annotation!>! operator=null
            $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
              CALL 'getDeclaredMethod(String!, vararg Class<*>!): Method!' type=java.lang.reflect.Method! operator=null
                $this: GET_VAR 'e: Class<MyClass>' type=java.lang.Class<MyClass> operator=null
                p0: CONST String type=kotlin.String value='setX'
                p1: VARARG type=(kotlin.Array<(java.lang.Class<*>..java.lang.Class<*>?)>..kotlin.Array<out (java.lang.Class<*>..java.lang.Class<*>?)>?) varargElementType=(java.lang.Class<*>..java.lang.Class<*>?)
                  CALL '<get-java>() on KClass<String>: Class<String>' type=java.lang.Class<kotlin.String> operator=GET_PROPERTY
                    $receiver: CLASS_REFERENCE 'String' type=kotlin.reflect.KClass<kotlin.String>
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<kotlin.Annotation!>
                  TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out kotlin.Annotation!>
                    GET_VAR 'e1: Array<(out) Annotation!>!' type=kotlin.Array<(out) kotlin.Annotation!>! operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail E1 size: '
              CALL 'toList() on Array<out Annotation!>: List<Annotation!>' type=kotlin.collections.List<kotlin.Annotation!> operator=null
                $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out kotlin.Annotation!>
                  GET_VAR 'e1: Array<(out) Annotation!>!' type=kotlin.Array<(out) kotlin.Annotation!>! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-java>() on KClass<out Annotation!>: Class<out Annotation!>' type=java.lang.Class<out kotlin.Annotation!> operator=GET_PROPERTY
                $receiver: CALL '<get-annotationClass>() on Annotation!: KClass<out Annotation!>' type=kotlin.reflect.KClass<out kotlin.Annotation!> operator=GET_PROPERTY
                  $receiver: CALL 'get(Int): Annotation!' type=kotlin.Annotation! operator=GET_ARRAY_ELEMENT
                    $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<kotlin.Annotation!>
                      TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out kotlin.Annotation!>
                        GET_VAR 'e1: Array<(out) Annotation!>!' type=kotlin.Array<(out) kotlin.Annotation!>! operator=null
                    index: CONST Int type=kotlin.Int value='0'
              arg1: CALL '<get-java>() on KClass<First>: Class<First>' type=java.lang.Class<First> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'First' type=kotlin.reflect.KClass<First>
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail: '
              CALL 'toList() on Array<out Annotation!>: List<Annotation!>' type=kotlin.collections.List<kotlin.Annotation!> operator=null
                $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out kotlin.Annotation!>
                  GET_VAR 'e1: Array<(out) Annotation!>!' type=kotlin.Array<(out) kotlin.Annotation!>! operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CALL '<get-x>(): String' type=kotlin.String operator=GET_PROPERTY
            $this: CALL 'constructor MyClass()' type=MyClass operator=null
