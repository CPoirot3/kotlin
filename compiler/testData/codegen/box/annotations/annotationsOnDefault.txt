MODULE <test-module>
  FILE /annotationsOnDefault.kt
    CLASS ANNOTATION_CLASS Ann
      PROPERTY public final val x: kotlin.Int
        EXPRESSION_BODY
          GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS CLASS A
      FUN @Ann public final fun foo(x: kotlin.Int, y: kotlin.Int = ..., z: kotlin.Int): kotlin.Unit
        y: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='2'
        BLOCK_BODY
      CONSTRUCTOR @Ann public constructor A(x: kotlin.Int, y: kotlin.Int = ..., z: kotlin.Int)
        y: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='2'
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
    CLASS CLASS B
      CONSTRUCTOR @Ann public constructor B(x: kotlin.Int, y: kotlin.Int = ..., z: kotlin.Int)
        y: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='2'
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='B'
    FUN public fun test(name: kotlin.String, annotations: kotlin.Array<out kotlin.Annotation>): kotlin.Unit
      BLOCK_BODY
        CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='1'
          actual: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
            $this: CALL 'single() on List<Ann>: Ann' type=Ann operator=null
              $receiver: CALL 'filterIsInstance() on Array<*>: List<Ann>' type=kotlin.collections.List<Ann> operator=null
                $receiver: GET_VAR 'value-parameter annotations: Array<out Annotation>' type=kotlin.Array<out kotlin.Annotation> operator=null
          message: STRING_CONCATENATION type=kotlin.String
            GET_VAR 'value-parameter name: String' type=kotlin.String operator=null
            CONST String type=kotlin.String value='[0]'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val foo: java.lang.reflect.Method!
          CALL 'first((Method!) -> Boolean) on Array<out Method!>: Method!' type=java.lang.reflect.Method! operator=null
            $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Method!>
              CALL 'getDeclaredMethods(): Array<(out) Method!>!' type=kotlin.Array<(out) java.lang.reflect.Method!>! operator=null
                $this: CALL '<get-java>() on KClass<A>: Class<A>' type=java.lang.Class<A> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE 'A' type=kotlin.reflect.KClass<A>
            predicate: BLOCK type=(java.lang.reflect.Method!) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(it: java.lang.reflect.Method!): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(Method!): Boolean'
                    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                      arg0: CALL 'getName(): String!' type=kotlin.String! operator=null
                        $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                          GET_VAR 'value-parameter it: Method!' type=java.lang.reflect.Method! operator=null
                      arg1: CONST String type=kotlin.String value='foo'
              CALLABLE_REFERENCE '<anonymous>(Method!): Boolean' type=(java.lang.reflect.Method!) -> kotlin.Boolean operator=LAMBDA
        CALL 'test(String, Array<out Annotation>): Unit' type=kotlin.Unit operator=null
          name: CONST String type=kotlin.String value='foo'
          annotations: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out kotlin.Annotation!>
            CALL 'getDeclaredAnnotations(): Array<(out) Annotation!>!' type=kotlin.Array<(out) kotlin.Annotation!>! operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                GET_VAR 'foo: Method!' type=java.lang.reflect.Method! operator=null
        VAR val fooDefault: java.lang.reflect.Method!
          CALL 'first((Method!) -> Boolean) on Array<out Method!>: Method!' type=java.lang.reflect.Method! operator=null
            $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Method!>
              CALL 'getDeclaredMethods(): Array<(out) Method!>!' type=kotlin.Array<(out) java.lang.reflect.Method!>! operator=null
                $this: CALL '<get-java>() on KClass<A>: Class<A>' type=java.lang.Class<A> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE 'A' type=kotlin.reflect.KClass<A>
            predicate: BLOCK type=(java.lang.reflect.Method!) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(it: java.lang.reflect.Method!): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(Method!): Boolean'
                    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                      arg0: CALL 'getName(): String!' type=kotlin.String! operator=null
                        $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                          GET_VAR 'value-parameter it: Method!' type=java.lang.reflect.Method! operator=null
                      arg1: STRING_CONCATENATION type=kotlin.String
                        CONST String type=kotlin.String value='foo'
                        CONST String type=kotlin.String value='$'
                        CONST String type=kotlin.String value='default'
              CALLABLE_REFERENCE '<anonymous>(Method!): Boolean' type=(java.lang.reflect.Method!) -> kotlin.Boolean operator=LAMBDA
        CALL 'test(String, Array<out Annotation>): Unit' type=kotlin.Unit operator=null
          name: CONST String type=kotlin.String value='foo'
          annotations: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out kotlin.Annotation!>
            CALL 'getDeclaredAnnotations(): Array<(out) Annotation!>!' type=kotlin.Array<(out) kotlin.Annotation!>! operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                GET_VAR 'foo: Method!' type=java.lang.reflect.Method! operator=null
        BLOCK type=kotlin.Unit operator=DESTRUCTURING_DECLARATION
          VAR val tmp0_container: kotlin.Pair<kotlin.collections.List<java.lang.reflect.Constructor<*>!>, kotlin.collections.List<java.lang.reflect.Constructor<*>!>>
            CALL 'partition((Constructor<*>!) -> Boolean) on Array<out Constructor<*>!>: Pair<List<Constructor<*>!>, List<Constructor<*>!>>' type=kotlin.Pair<kotlin.collections.List<java.lang.reflect.Constructor<*>!>, kotlin.collections.List<java.lang.reflect.Constructor<*>!>> operator=null
              $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Constructor<*>!>
                CALL 'getDeclaredConstructors(): Array<(out) Constructor<*>!>!' type=kotlin.Array<(out) java.lang.reflect.Constructor<*>!>! operator=null
                  $this: CALL '<get-java>() on KClass<A>: Class<A>' type=java.lang.Class<A> operator=GET_PROPERTY
                    $receiver: CLASS_REFERENCE 'A' type=kotlin.reflect.KClass<A>
              predicate: BLOCK type=(java.lang.reflect.Constructor<*>!) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(it: java.lang.reflect.Constructor<*>!): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='<anonymous>(Constructor<*>!): Boolean'
                      CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                        arg0: CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                          $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<java.lang.Class<*>!>
                            TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.Class<*>!>
                              CALL 'getParameterTypes(): Array<(out) Class<*>!>!' type=kotlin.Array<(out) java.lang.Class<*>!>! operator=null
                                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Constructor<*>
                                  GET_VAR 'value-parameter it: Constructor<*>!' type=java.lang.reflect.Constructor<*>! operator=null
                        arg1: CONST Int type=kotlin.Int value='3'
                CALLABLE_REFERENCE '<anonymous>(Constructor<*>!): Boolean' type=(java.lang.reflect.Constructor<*>!) -> kotlin.Boolean operator=LAMBDA
          VAR val secondary: kotlin.collections.List<java.lang.reflect.Constructor<*>!>
            CALL 'component1(): List<Constructor<*>!>' type=kotlin.collections.List<java.lang.reflect.Constructor<*>!> operator=COMPONENT_N(index=1)
              $this: GET_VAR 'tmp0_container: Pair<List<Constructor<*>!>, List<Constructor<*>!>>' type=kotlin.Pair<kotlin.collections.List<java.lang.reflect.Constructor<*>!>, kotlin.collections.List<java.lang.reflect.Constructor<*>!>> operator=null
          VAR val secondaryDefault: kotlin.collections.List<java.lang.reflect.Constructor<*>!>
            CALL 'component2(): List<Constructor<*>!>' type=kotlin.collections.List<java.lang.reflect.Constructor<*>!> operator=COMPONENT_N(index=2)
              $this: GET_VAR 'tmp0_container: Pair<List<Constructor<*>!>, List<Constructor<*>!>>' type=kotlin.Pair<kotlin.collections.List<java.lang.reflect.Constructor<*>!>, kotlin.collections.List<java.lang.reflect.Constructor<*>!>> operator=null
        CALL 'test(String, Array<out Annotation>): Unit' type=kotlin.Unit operator=null
          name: CONST String type=kotlin.String value='secondary'
          annotations: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out kotlin.Annotation!>
            CALL 'getDeclaredAnnotations(): Array<(out) Annotation!>!' type=kotlin.Array<(out) kotlin.Annotation!>! operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Constructor<*>
                CALL 'get(Int): Constructor<*>!' type=java.lang.reflect.Constructor<*>! operator=GET_ARRAY_ELEMENT
                  $this: GET_VAR 'secondary: List<Constructor<*>!>' type=kotlin.collections.List<java.lang.reflect.Constructor<*>!> operator=null
                  index: CONST Int type=kotlin.Int value='0'
        CALL 'test(String, Array<out Annotation>): Unit' type=kotlin.Unit operator=null
          name: STRING_CONCATENATION type=kotlin.String
            CONST String type=kotlin.String value='secondary'
            CONST String type=kotlin.String value='$'
            CONST String type=kotlin.String value='default'
          annotations: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out kotlin.Annotation!>
            CALL 'getDeclaredAnnotations(): Array<(out) Annotation!>!' type=kotlin.Array<(out) kotlin.Annotation!>! operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Constructor<*>
                CALL 'get(Int): Constructor<*>!' type=java.lang.reflect.Constructor<*>! operator=GET_ARRAY_ELEMENT
                  $this: GET_VAR 'secondaryDefault: List<Constructor<*>!>' type=kotlin.collections.List<java.lang.reflect.Constructor<*>!> operator=null
                  index: CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=DESTRUCTURING_DECLARATION
          VAR val tmp1_container: kotlin.Pair<kotlin.collections.List<java.lang.reflect.Constructor<*>!>, kotlin.collections.List<java.lang.reflect.Constructor<*>!>>
            CALL 'partition((Constructor<*>!) -> Boolean) on Array<out Constructor<*>!>: Pair<List<Constructor<*>!>, List<Constructor<*>!>>' type=kotlin.Pair<kotlin.collections.List<java.lang.reflect.Constructor<*>!>, kotlin.collections.List<java.lang.reflect.Constructor<*>!>> operator=null
              $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Constructor<*>!>
                CALL 'getConstructors(): Array<(out) Constructor<*>!>!' type=kotlin.Array<(out) java.lang.reflect.Constructor<*>!>! operator=null
                  $this: CALL '<get-java>() on KClass<B>: Class<B>' type=java.lang.Class<B> operator=GET_PROPERTY
                    $receiver: CLASS_REFERENCE 'B' type=kotlin.reflect.KClass<B>
              predicate: BLOCK type=(java.lang.reflect.Constructor<*>!) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(it: java.lang.reflect.Constructor<*>!): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='<anonymous>(Constructor<*>!): Boolean'
                      CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                        arg0: CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                          $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<java.lang.Class<*>!>
                            TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.Class<*>!>
                              CALL 'getParameterTypes(): Array<(out) Class<*>!>!' type=kotlin.Array<(out) java.lang.Class<*>!>! operator=null
                                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Constructor<*>
                                  GET_VAR 'value-parameter it: Constructor<*>!' type=java.lang.reflect.Constructor<*>! operator=null
                        arg1: CONST Int type=kotlin.Int value='3'
                CALLABLE_REFERENCE '<anonymous>(Constructor<*>!): Boolean' type=(java.lang.reflect.Constructor<*>!) -> kotlin.Boolean operator=LAMBDA
          VAR val primary: kotlin.collections.List<java.lang.reflect.Constructor<*>!>
            CALL 'component1(): List<Constructor<*>!>' type=kotlin.collections.List<java.lang.reflect.Constructor<*>!> operator=COMPONENT_N(index=1)
              $this: GET_VAR 'tmp1_container: Pair<List<Constructor<*>!>, List<Constructor<*>!>>' type=kotlin.Pair<kotlin.collections.List<java.lang.reflect.Constructor<*>!>, kotlin.collections.List<java.lang.reflect.Constructor<*>!>> operator=null
          VAR val primaryDefault: kotlin.collections.List<java.lang.reflect.Constructor<*>!>
            CALL 'component2(): List<Constructor<*>!>' type=kotlin.collections.List<java.lang.reflect.Constructor<*>!> operator=COMPONENT_N(index=2)
              $this: GET_VAR 'tmp1_container: Pair<List<Constructor<*>!>, List<Constructor<*>!>>' type=kotlin.Pair<kotlin.collections.List<java.lang.reflect.Constructor<*>!>, kotlin.collections.List<java.lang.reflect.Constructor<*>!>> operator=null
        CALL 'test(String, Array<out Annotation>): Unit' type=kotlin.Unit operator=null
          name: CONST String type=kotlin.String value='primary'
          annotations: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out kotlin.Annotation!>
            CALL 'getDeclaredAnnotations(): Array<(out) Annotation!>!' type=kotlin.Array<(out) kotlin.Annotation!>! operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Constructor<*>
                CALL 'get(Int): Constructor<*>!' type=java.lang.reflect.Constructor<*>! operator=GET_ARRAY_ELEMENT
                  $this: GET_VAR 'primary: List<Constructor<*>!>' type=kotlin.collections.List<java.lang.reflect.Constructor<*>!> operator=null
                  index: CONST Int type=kotlin.Int value='0'
        CALL 'test(String, Array<out Annotation>): Unit' type=kotlin.Unit operator=null
          name: STRING_CONCATENATION type=kotlin.String
            CONST String type=kotlin.String value='primary'
            CONST String type=kotlin.String value='$'
            CONST String type=kotlin.String value='default'
          annotations: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out kotlin.Annotation!>
            CALL 'getDeclaredAnnotations(): Array<(out) Annotation!>!' type=kotlin.Array<(out) kotlin.Annotation!>! operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Constructor<*>
                CALL 'get(Int): Constructor<*>!' type=java.lang.reflect.Constructor<*>! operator=GET_ARRAY_ELEMENT
                  $this: GET_VAR 'primaryDefault: List<Constructor<*>!>' type=kotlin.collections.List<java.lang.reflect.Constructor<*>!> operator=null
                  index: CONST Int type=kotlin.Int value='0'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
