MODULE <test-module>
  FILE /reversedBackSequence.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val list1: java.util.ArrayList<kotlin.Int>
          CALL 'constructor ArrayList()' type=java.util.ArrayList<kotlin.Int> operator=null
        VAR val range1: kotlin.ranges.IntProgression
          CALL 'reversed() on IntProgression: IntProgression' type=kotlin.ranges.IntProgression operator=null
            $receiver: CALL 'downTo(Int) on Int: IntProgression' type=kotlin.ranges.IntProgression operator=null
              $receiver: CONST Int type=kotlin.Int value='5'
              to: CONST Int type=kotlin.Int value='3'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL 'iterator(): IntIterator' type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: GET_VAR 'range1: IntProgression' type=kotlin.ranges.IntProgression operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL 'next(): Int' type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL 'add(Int): Boolean' type=kotlin.Boolean operator=null
                  $this: GET_VAR 'list1: ArrayList<Int>' type=java.util.ArrayList<kotlin.Int> operator=null
                  element: GET_VAR 'i: Int' type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL 'GT0(Int): Boolean' type=kotlin.Boolean operator=GT
                    arg0: CALL 'compareTo(Int): Int' type=kotlin.Int operator=GT
                      $this: CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR 'list1: ArrayList<Int>' type=java.util.ArrayList<kotlin.Int> operator=null
                      other: CONST Int type=kotlin.Int value='23'
                  then: BREAK label=null loop.label=null depth=0
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'list1: ArrayList<Int>' type=java.util.ArrayList<kotlin.Int> operator=null
              arg1: CALL 'listOf(vararg Int): List<Int>' type=kotlin.collections.List<kotlin.Int> operator=null
                elements: VARARG type=Array<out Int> varargElementType=Int
                  CONST Int type=kotlin.Int value='3'
                  CONST Int type=kotlin.Int value='4'
                  CONST Int type=kotlin.Int value='5'
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from='box(): String'
              STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='Wrong elements for (5 downTo 3).reversed(): '
                GET_VAR 'list1: ArrayList<Int>' type=java.util.ArrayList<kotlin.Int> operator=null
        VAR val list2: java.util.ArrayList<kotlin.Int>
          CALL 'constructor ArrayList()' type=java.util.ArrayList<kotlin.Int> operator=null
        VAR val range2: kotlin.ranges.IntProgression
          CALL 'reversed() on IntProgression: IntProgression' type=kotlin.ranges.IntProgression operator=null
            $receiver: CALL 'downTo(Byte) on Byte: IntProgression' type=kotlin.ranges.IntProgression operator=null
              $receiver: CALL 'toByte(): Byte' type=kotlin.Byte operator=null
                $this: CONST Int type=kotlin.Int value='5'
              to: CALL 'toByte(): Byte' type=kotlin.Byte operator=null
                $this: CONST Int type=kotlin.Int value='3'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp1_iterator: kotlin.collections.IntIterator
            CALL 'iterator(): IntIterator' type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: GET_VAR 'range2: IntProgression' type=kotlin.ranges.IntProgression operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp1_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL 'next(): Int' type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp1_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL 'add(Int): Boolean' type=kotlin.Boolean operator=null
                  $this: GET_VAR 'list2: ArrayList<Int>' type=java.util.ArrayList<kotlin.Int> operator=null
                  element: GET_VAR 'i: Int' type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL 'GT0(Int): Boolean' type=kotlin.Boolean operator=GT
                    arg0: CALL 'compareTo(Int): Int' type=kotlin.Int operator=GT
                      $this: CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR 'list2: ArrayList<Int>' type=java.util.ArrayList<kotlin.Int> operator=null
                      other: CONST Int type=kotlin.Int value='23'
                  then: BREAK label=null loop.label=null depth=0
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'list2: ArrayList<Int>' type=java.util.ArrayList<kotlin.Int> operator=null
              arg1: CALL 'listOf(vararg Int): List<Int>' type=kotlin.collections.List<kotlin.Int> operator=null
                elements: VARARG type=Array<out Int> varargElementType=Int
                  CONST Int type=kotlin.Int value='3'
                  CONST Int type=kotlin.Int value='4'
                  CONST Int type=kotlin.Int value='5'
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from='box(): String'
              STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='Wrong elements for (5.toByte() downTo 3.toByte()).reversed(): '
                GET_VAR 'list2: ArrayList<Int>' type=java.util.ArrayList<kotlin.Int> operator=null
        VAR val list3: java.util.ArrayList<kotlin.Int>
          CALL 'constructor ArrayList()' type=java.util.ArrayList<kotlin.Int> operator=null
        VAR val range3: kotlin.ranges.IntProgression
          CALL 'reversed() on IntProgression: IntProgression' type=kotlin.ranges.IntProgression operator=null
            $receiver: CALL 'downTo(Short) on Short: IntProgression' type=kotlin.ranges.IntProgression operator=null
              $receiver: CALL 'toShort(): Short' type=kotlin.Short operator=null
                $this: CONST Int type=kotlin.Int value='5'
              to: CALL 'toShort(): Short' type=kotlin.Short operator=null
                $this: CONST Int type=kotlin.Int value='3'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp2_iterator: kotlin.collections.IntIterator
            CALL 'iterator(): IntIterator' type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: GET_VAR 'range3: IntProgression' type=kotlin.ranges.IntProgression operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp2_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL 'next(): Int' type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp2_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL 'add(Int): Boolean' type=kotlin.Boolean operator=null
                  $this: GET_VAR 'list3: ArrayList<Int>' type=java.util.ArrayList<kotlin.Int> operator=null
                  element: GET_VAR 'i: Int' type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL 'GT0(Int): Boolean' type=kotlin.Boolean operator=GT
                    arg0: CALL 'compareTo(Int): Int' type=kotlin.Int operator=GT
                      $this: CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR 'list3: ArrayList<Int>' type=java.util.ArrayList<kotlin.Int> operator=null
                      other: CONST Int type=kotlin.Int value='23'
                  then: BREAK label=null loop.label=null depth=0
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'list3: ArrayList<Int>' type=java.util.ArrayList<kotlin.Int> operator=null
              arg1: CALL 'listOf(vararg Int): List<Int>' type=kotlin.collections.List<kotlin.Int> operator=null
                elements: VARARG type=Array<out Int> varargElementType=Int
                  CONST Int type=kotlin.Int value='3'
                  CONST Int type=kotlin.Int value='4'
                  CONST Int type=kotlin.Int value='5'
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from='box(): String'
              STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='Wrong elements for (5.toShort() downTo 3.toShort()).reversed(): '
                GET_VAR 'list3: ArrayList<Int>' type=java.util.ArrayList<kotlin.Int> operator=null
        VAR val list4: java.util.ArrayList<kotlin.Long>
          CALL 'constructor ArrayList()' type=java.util.ArrayList<kotlin.Long> operator=null
        VAR val range4: kotlin.ranges.LongProgression
          CALL 'reversed() on LongProgression: LongProgression' type=kotlin.ranges.LongProgression operator=null
            $receiver: CALL 'downTo(Long) on Long: LongProgression' type=kotlin.ranges.LongProgression operator=null
              $receiver: CALL 'toLong(): Long' type=kotlin.Long operator=null
                $this: CONST Int type=kotlin.Int value='5'
              to: CALL 'toLong(): Long' type=kotlin.Long operator=null
                $this: CONST Int type=kotlin.Int value='3'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp3_iterator: kotlin.collections.LongIterator
            CALL 'iterator(): LongIterator' type=kotlin.collections.LongIterator operator=FOR_LOOP_ITERATOR
              $this: GET_VAR 'range4: LongProgression' type=kotlin.ranges.LongProgression operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp3_iterator: LongIterator' type=kotlin.collections.LongIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Long
                CALL 'next(): Long' type=kotlin.Long operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp3_iterator: LongIterator' type=kotlin.collections.LongIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL 'add(Long): Boolean' type=kotlin.Boolean operator=null
                  $this: GET_VAR 'list4: ArrayList<Long>' type=java.util.ArrayList<kotlin.Long> operator=null
                  element: GET_VAR 'i: Long' type=kotlin.Long operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL 'GT0(Int): Boolean' type=kotlin.Boolean operator=GT
                    arg0: CALL 'compareTo(Int): Int' type=kotlin.Int operator=GT
                      $this: CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR 'list4: ArrayList<Long>' type=java.util.ArrayList<kotlin.Long> operator=null
                      other: CONST Int type=kotlin.Int value='23'
                  then: BREAK label=null loop.label=null depth=0
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'list4: ArrayList<Long>' type=java.util.ArrayList<kotlin.Long> operator=null
              arg1: CALL 'listOf(vararg Long): List<Long>' type=kotlin.collections.List<kotlin.Long> operator=null
                elements: VARARG type=Array<out Long> varargElementType=Long
                  CONST Long type=kotlin.Long value='3'
                  CONST Long type=kotlin.Long value='4'
                  CONST Long type=kotlin.Long value='5'
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from='box(): String'
              STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='Wrong elements for (5.toLong() downTo 3.toLong()).reversed(): '
                GET_VAR 'list4: ArrayList<Long>' type=java.util.ArrayList<kotlin.Long> operator=null
        VAR val list5: java.util.ArrayList<kotlin.Char>
          CALL 'constructor ArrayList()' type=java.util.ArrayList<kotlin.Char> operator=null
        VAR val range5: kotlin.ranges.CharProgression
          CALL 'reversed() on CharProgression: CharProgression' type=kotlin.ranges.CharProgression operator=null
            $receiver: CALL 'downTo(Char) on Char: CharProgression' type=kotlin.ranges.CharProgression operator=null
              $receiver: CONST Char type=kotlin.Char value='c'
              to: CONST Char type=kotlin.Char value='a'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp4_iterator: kotlin.collections.CharIterator
            CALL 'iterator(): CharIterator' type=kotlin.collections.CharIterator operator=FOR_LOOP_ITERATOR
              $this: GET_VAR 'range5: CharProgression' type=kotlin.ranges.CharProgression operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp4_iterator: CharIterator' type=kotlin.collections.CharIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Char
                CALL 'next(): Char' type=kotlin.Char operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp4_iterator: CharIterator' type=kotlin.collections.CharIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL 'add(Char): Boolean' type=kotlin.Boolean operator=null
                  $this: GET_VAR 'list5: ArrayList<Char>' type=java.util.ArrayList<kotlin.Char> operator=null
                  element: GET_VAR 'i: Char' type=kotlin.Char operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL 'GT0(Int): Boolean' type=kotlin.Boolean operator=GT
                    arg0: CALL 'compareTo(Int): Int' type=kotlin.Int operator=GT
                      $this: CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR 'list5: ArrayList<Char>' type=java.util.ArrayList<kotlin.Char> operator=null
                      other: CONST Int type=kotlin.Int value='23'
                  then: BREAK label=null loop.label=null depth=0
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'list5: ArrayList<Char>' type=java.util.ArrayList<kotlin.Char> operator=null
              arg1: CALL 'listOf(vararg Char): List<Char>' type=kotlin.collections.List<kotlin.Char> operator=null
                elements: VARARG type=Array<out Char> varargElementType=Char
                  CONST Char type=kotlin.Char value='a'
                  CONST Char type=kotlin.Char value='b'
                  CONST Char type=kotlin.Char value='c'
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from='box(): String'
              STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='Wrong elements for ('c' downTo 'a').reversed(): '
                GET_VAR 'list5: ArrayList<Char>' type=java.util.ArrayList<kotlin.Char> operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
