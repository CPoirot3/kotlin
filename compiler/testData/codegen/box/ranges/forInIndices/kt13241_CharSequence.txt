MODULE <test-module>
  FILE /kt13241_CharSequence.kt
    FUN public fun test(x: kotlin.Any): kotlin.Int
      BLOCK_BODY
        VAR var sum: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.String
            GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
          then: BLOCK type=kotlin.Unit operator=null
            BLOCK type=kotlin.Unit operator=FOR_LOOP
              VAR val tmp0_iterator: kotlin.collections.IntIterator
                CALL 'iterator(): IntIterator' type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
                  $this: CALL '<get-indices>() on CharSequence: IntRange' type=kotlin.ranges.IntRange operator=GET_PROPERTY
                    $receiver: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.CharSequence
                      GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
              WHILE label=null operator=FOR_LOOP_INNER_WHILE
                condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
                  $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
                body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
                  VAR val i: kotlin.Int
                    CALL 'next(): Int' type=kotlin.Int operator=FOR_LOOP_NEXT
                      $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
                  BLOCK type=kotlin.Unit operator=null
                    SET_VAR 'sum: Int' type=kotlin.Unit operator=EQ
                      CALL 'plus(Int): Int' type=kotlin.Int operator=PLUS
                        $this: CALL 'times(Int): Int' type=kotlin.Int operator=MUL
                          $this: GET_VAR 'sum: Int' type=kotlin.Int operator=null
                          other: CONST Int type=kotlin.Int value='10'
                        other: GET_VAR 'i: Int' type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from='test(Any): Int'
          GET_VAR 'sum: Int' type=kotlin.Int operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='123'
          actual: CALL 'test(Any): Int' type=kotlin.Int operator=null
            x: CONST String type=kotlin.String value='0000'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
