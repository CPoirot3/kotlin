MODULE <test-module>
  FILE /propertyAccessorsUseSite.kt
    CLASS CLASS TestIt
      CONSTRUCTOR public constructor TestIt()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestIt'
      PROPERTY public final var isFries: kotlin.Boolean
        EXPRESSION_BODY
          CONST Boolean type=kotlin.Boolean value='true'
      PROPERTY public final var isUpdateable: kotlin.Boolean
        delegate: PROPERTY val `isUpdateable$delegate`: Delegate
          EXPRESSION_BODY
            GET_OBJECT 'Delegate' type=Delegate
        PROPERTY_GETTER @get:kotlin.jvm.JvmName public final fun <get-isUpdateable>(): kotlin.Boolean
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='<get-isUpdateable>(): Boolean'
              CALL 'getValue(Any?, Any?): Boolean' type=kotlin.Boolean operator=null
                $this: GET_BACKING_FIELD '`isUpdateable$delegate`: Delegate' type=Delegate operator=null
                  receiver: THIS of 'TestIt' type=TestIt
                thiz: THIS of 'TestIt' type=TestIt
                metadata: CALLABLE_REFERENCE 'isUpdateable: Boolean' type=kotlin.reflect.KMutableProperty1<TestIt, kotlin.Boolean> operator=PROPERTY_REFERENCE_FOR_DELEGATE
        PROPERTY_SETTER @set:kotlin.jvm.JvmName public final fun <set-isUpdateable>(<set-?>: kotlin.Boolean): kotlin.Unit
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='<set-isUpdateable>(Boolean): Unit'
              CALL 'setValue(Any?, Any?, Boolean): Unit' type=kotlin.Unit operator=null
                $this: GET_BACKING_FIELD '`isUpdateable$delegate`: Delegate' type=Delegate operator=null
                  receiver: THIS of 'TestIt' type=TestIt
                thiz: THIS of 'TestIt' type=TestIt
                metadata: CALLABLE_REFERENCE 'isUpdateable: Boolean' type=kotlin.reflect.KMutableProperty1<TestIt, kotlin.Boolean> operator=PROPERTY_REFERENCE_FOR_DELEGATE
                value: GET_VAR 'value-parameter <set-?>: Boolean' type=kotlin.Boolean operator=null
    CLASS OBJECT Delegate
      CONSTRUCTOR private constructor Delegate()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Delegate'
      FUN public final operator fun getValue(thiz: kotlin.Any?, metadata: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getValue(Any?, Any?): Boolean'
            CONST Boolean type=kotlin.Boolean value='true'
      FUN public final operator fun setValue(thiz: kotlin.Any?, metadata: kotlin.Any?, value: kotlin.Boolean): kotlin.Unit
        BLOCK_BODY
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'assertEquals(List<String!>, List<String!>, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CALL 'listOf(vararg String): List<String>' type=kotlin.collections.List<kotlin.String> operator=null
            elements: VARARG type=Array<out String> varargElementType=String
              CONST String type=kotlin.String value='getIsFries'
              CONST String type=kotlin.String value='getIsUpdateable'
              CONST String type=kotlin.String value='setIsFries'
              CONST String type=kotlin.String value='setIsUpdateable'
          actual: CALL 'sorted() on Iterable<String!>: List<String!>' type=kotlin.collections.List<kotlin.String!> operator=null
            $receiver: CALL 'map((Method!) -> String!) on Array<out Method!>: List<String!>' type=kotlin.collections.List<kotlin.String!> operator=null
              $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Method!>
                CALL '<get-declaredMethods>() on Class<TestIt>: Array<(out) Method!>!' type=kotlin.Array<(out) java.lang.reflect.Method!>! operator=GET_PROPERTY
                  $receiver: CALL '<get-java>() on KClass<TestIt>: Class<TestIt>' type=java.lang.Class<TestIt> operator=GET_PROPERTY
                    $receiver: CLASS_REFERENCE 'TestIt' type=kotlin.reflect.KClass<TestIt>
              transform: BLOCK type=(java.lang.reflect.Method!) -> kotlin.String! operator=LAMBDA
                FUN local final fun <anonymous>(it: java.lang.reflect.Method!): kotlin.String!
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='<anonymous>(Method!): String!'
                      CALL '<get-name>() on Method: String!' type=kotlin.String! operator=GET_PROPERTY
                        $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                          GET_VAR 'value-parameter it: Method!' type=java.lang.reflect.Method! operator=null
                CALLABLE_REFERENCE '<anonymous>(Method!): String!' type=(java.lang.reflect.Method!) -> kotlin.String! operator=LAMBDA
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
