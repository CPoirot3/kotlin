MODULE <test-module>
  FILE /companionObject.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      CLASS OBJECT companion object of AC
        CONSTRUCTOR private constructor C()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
            INSTANCE_INITIALIZER_CALL classDescriptor='companion object of AC'
    CLASS ENUM_CLASS E
      CONSTRUCTOR private constructor E()
        BLOCK_BODY
          ENUM_CONSTRUCTOR_CALL 'constructor Enum(String, Int)' super
          INSTANCE_INITIALIZER_CALL classDescriptor='E'
      ENUM_ENTRY enum entry ENTRY
        init: ENUM_CONSTRUCTOR_CALL 'constructor E()' ENTRY
      CLASS OBJECT companion object of E
        CONSTRUCTOR private constructor Companion()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
            INSTANCE_INITIALIZER_CALL classDescriptor='companion object of E'
      FUN public final fun values(): kotlin.Array<E>
        SYNTHETIC_BODY kind=ENUM_VALUES
      FUN public final fun valueOf(value: kotlin.String): E
        SYNTHETIC_BODY kind=ENUM_VALUEOF
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val obj: kotlin.reflect.KClass<*>?
          CALL '<get-companionObject>() on KClass<*>: KClass<*>?' type=kotlin.reflect.KClass<*>? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'A' type=kotlin.reflect.KClass<A>
        CALL 'assertNotNull(KClass<*>?, String? = ...): KClass<*>' type=kotlin.reflect.KClass<*> operator=null
          actual: GET_VAR 'obj: KClass<*>?' type=kotlin.reflect.KClass<*>? operator=null
        CALL 'assertEquals(String?, String?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='C'
          actual: CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
            $this: BLOCK type=kotlin.reflect.KClass<*> operator=EXCLEXCL
              VAR val tmp0_notnull: kotlin.reflect.KClass<*>?
                GET_VAR 'obj: KClass<*>?' type=kotlin.reflect.KClass<*>? operator=null
              WHEN type=kotlin.reflect.KClass<*> operator=null
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR 'tmp0_notnull: KClass<*>?' type=kotlin.reflect.KClass<*>? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                else: GET_VAR 'tmp0_notnull: KClass<*>?' type=kotlin.reflect.KClass<*>? operator=null
        CALL 'assertEquals(Any?, Any?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of AC' type=A.C
          actual: CALL '<get-companionObjectInstance>() on KClass<*>: Any?' type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'A' type=kotlin.reflect.KClass<A>
        CALL 'assertEquals(Any?, Any?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of AC' type=A.C
          actual: CALL '<get-objectInstance>(): Any?' type=kotlin.Any? operator=GET_PROPERTY
            $this: GET_VAR 'obj: KClass<*>?' type=kotlin.reflect.KClass<*>? operator=null
        CALL 'assertNull(Any?, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-companionObject>() on KClass<*>: KClass<*>?' type=kotlin.reflect.KClass<*>? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'companion object of AC' type=kotlin.reflect.KClass<A.C>
        CALL 'assertNull(Any?, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-companionObjectInstance>() on KClass<*>: Any?' type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'companion object of AC' type=kotlin.reflect.KClass<A.C>
        CALL 'assertEquals(Any?, Any?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of E' type=E.Companion
          actual: CALL '<get-companionObjectInstance>() on KClass<*>: Any?' type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'E' type=kotlin.reflect.KClass<E>
        CALL 'assertEquals(Any?, Any?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of String' type=kotlin.String.Companion
          actual: CALL '<get-companionObjectInstance>() on KClass<*>: Any?' type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'String' type=kotlin.reflect.KClass<kotlin.String>
        CALL 'assertEquals(String.Companion?, String.Companion?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of String' type=kotlin.String.Companion
          actual: CALL '<get-objectInstance>(): String.Companion?' type=kotlin.String.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'companion object of String' type=kotlin.reflect.KClass<kotlin.String.Companion>
        CALL 'assertEquals(Any?, Any?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Enum' type=kotlin.Enum.Companion
          actual: CALL '<get-companionObjectInstance>() on KClass<*>: Any?' type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Enum' type=kotlin.reflect.KClass<kotlin.Enum<*>>
        CALL 'assertEquals(Enum.Companion?, Enum.Companion?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Enum' type=kotlin.Enum.Companion
          actual: CALL '<get-objectInstance>(): Enum.Companion?' type=kotlin.Enum.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'companion object of Enum' type=kotlin.reflect.KClass<kotlin.Enum.Companion>
        CALL 'assertEquals(Any?, Any?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Double' type=kotlin.Double.Companion
          actual: CALL '<get-companionObjectInstance>() on KClass<*>: Any?' type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Double' type=kotlin.reflect.KClass<kotlin.Double>
        CALL 'assertEquals(Double.Companion?, Double.Companion?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Double' type=kotlin.Double.Companion
          actual: CALL '<get-objectInstance>(): Double.Companion?' type=kotlin.Double.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'companion object of Double' type=kotlin.reflect.KClass<kotlin.Double.Companion>
        CALL 'assertEquals(Any?, Any?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Float' type=kotlin.Float.Companion
          actual: CALL '<get-companionObjectInstance>() on KClass<*>: Any?' type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Float' type=kotlin.reflect.KClass<kotlin.Float>
        CALL 'assertEquals(Float.Companion?, Float.Companion?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Float' type=kotlin.Float.Companion
          actual: CALL '<get-objectInstance>(): Float.Companion?' type=kotlin.Float.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'companion object of Float' type=kotlin.reflect.KClass<kotlin.Float.Companion>
        CALL 'assertEquals(Any?, Any?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Int' type=kotlin.Int.Companion
          actual: CALL '<get-companionObjectInstance>() on KClass<*>: Any?' type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Int' type=kotlin.reflect.KClass<kotlin.Int>
        CALL 'assertEquals(Int.Companion?, Int.Companion?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Int' type=kotlin.Int.Companion
          actual: CALL '<get-objectInstance>(): Int.Companion?' type=kotlin.Int.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'companion object of Int' type=kotlin.reflect.KClass<kotlin.Int.Companion>
        CALL 'assertEquals(Any?, Any?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Long' type=kotlin.Long.Companion
          actual: CALL '<get-companionObjectInstance>() on KClass<*>: Any?' type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Long' type=kotlin.reflect.KClass<kotlin.Long>
        CALL 'assertEquals(Long.Companion?, Long.Companion?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Long' type=kotlin.Long.Companion
          actual: CALL '<get-objectInstance>(): Long.Companion?' type=kotlin.Long.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'companion object of Long' type=kotlin.reflect.KClass<kotlin.Long.Companion>
        CALL 'assertEquals(Any?, Any?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Short' type=kotlin.Short.Companion
          actual: CALL '<get-companionObjectInstance>() on KClass<*>: Any?' type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Short' type=kotlin.reflect.KClass<kotlin.Short>
        CALL 'assertEquals(Short.Companion?, Short.Companion?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Short' type=kotlin.Short.Companion
          actual: CALL '<get-objectInstance>(): Short.Companion?' type=kotlin.Short.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'companion object of Short' type=kotlin.reflect.KClass<kotlin.Short.Companion>
        CALL 'assertEquals(Any?, Any?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Byte' type=kotlin.Byte.Companion
          actual: CALL '<get-companionObjectInstance>() on KClass<*>: Any?' type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Byte' type=kotlin.reflect.KClass<kotlin.Byte>
        CALL 'assertEquals(Byte.Companion?, Byte.Companion?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Byte' type=kotlin.Byte.Companion
          actual: CALL '<get-objectInstance>(): Byte.Companion?' type=kotlin.Byte.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'companion object of Byte' type=kotlin.reflect.KClass<kotlin.Byte.Companion>
        CALL 'assertEquals(Any?, Any?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Char' type=kotlin.Char.Companion
          actual: CALL '<get-companionObjectInstance>() on KClass<*>: Any?' type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Char' type=kotlin.reflect.KClass<kotlin.Char>
        CALL 'assertEquals(Char.Companion?, Char.Companion?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_OBJECT 'companion object of Char' type=kotlin.Char.Companion
          actual: CALL '<get-objectInstance>(): Char.Companion?' type=kotlin.Char.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'companion object of Char' type=kotlin.reflect.KClass<kotlin.Char.Companion>
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
