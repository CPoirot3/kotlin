MODULE <test-module>
  FILE /anonymousObjectInInlinedLambda.kt
    CLASS INTERFACE A
      FUN public abstract fun f(): kotlin.String
    FUN public inline fun foo(): A
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='foo(): A'
          BLOCK type=foo.<no name provided> operator=OBJECT_LITERAL
            CLASS CLASS <no name provided>
              CONSTRUCTOR public constructor <no name provided>()
                BLOCK_BODY
                  DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
                  INSTANCE_INITIALIZER_CALL classDescriptor='<no name provided>'
              FUN public open override fun f(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='f(): String'
                    CONST String type=kotlin.String value='OK'
            CALL 'constructor <no name provided>()' type=foo.<no name provided> operator=OBJECT_LITERAL
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val y: A
          CALL 'foo(): A' type=A operator=null
        VAR val enclosing: java.lang.reflect.Method!
          CALL 'getEnclosingMethod(): Method!' type=java.lang.reflect.Method! operator=null
            $this: CALL '<get-javaClass>() on A: Class<A>' type=java.lang.Class<A> operator=GET_PROPERTY
              $receiver: GET_VAR 'y: A' type=A operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: BLOCK type=kotlin.String? operator=SAFE_CALL
                VAR val tmp0_safe_receiver: java.lang.reflect.Method!
                  GET_VAR 'enclosing: Method!' type=java.lang.reflect.Method! operator=null
                WHEN type=kotlin.String? operator=SAFE_CALL
                  if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR 'tmp0_safe_receiver: Method!' type=java.lang.reflect.Method! operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Null type=kotlin.Nothing? value='null'
                  else: CALL 'getName(): String!' type=kotlin.String! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                      GET_VAR 'tmp0_safe_receiver: Method!' type=java.lang.reflect.Method! operator=null
              arg1: CONST String type=kotlin.String value='foo'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='method: '
              GET_VAR 'enclosing: Method!' type=java.lang.reflect.Method! operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CALL 'f(): String' type=kotlin.String operator=null
            $this: GET_VAR 'y: A' type=A operator=null
