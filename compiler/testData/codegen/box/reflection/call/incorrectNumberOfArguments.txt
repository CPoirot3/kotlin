MODULE <test-module>
  FILE /incorrectNumberOfArguments.kt
    PROPERTY public var foo: kotlin.String
      EXPRESSION_BODY
        CONST String type=kotlin.String value=''
    CLASS CLASS A
      CONSTRUCTOR public constructor A(bar: kotlin.String = ...)
        bar: EXPRESSION_BODY
          CONST String type=kotlin.String value=''
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'bar: String' type=kotlin.Unit operator=null
            receiver: THIS of 'A' type=A
            value: GET_VAR 'value-parameter bar: String = ...' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      PROPERTY private final var bar: kotlin.String
        EXPRESSION_BODY
          GET_VAR 'value-parameter bar: String = ...' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final fun getBar(): kotlin.reflect.KMutableProperty1<A, kotlin.String>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getBar(): KMutableProperty1<A, String>'
            CALLABLE_REFERENCE 'bar: String' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
    CLASS OBJECT O
      CONSTRUCTOR private constructor O()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='O'
      PROPERTY @kotlin.jvm.JvmStatic private final var baz: kotlin.String
        EXPRESSION_BODY
          CONST String type=kotlin.String value=''
      FUN @kotlin.jvm.JvmStatic public final fun getBaz(): kotlin.reflect.KMutableProperty<*>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getBaz(): KMutableProperty<*>'
            CALL 'apply(KMutableProperty<*>.() -> Unit) on KMutableProperty<*>: KMutableProperty<*>' type=kotlin.reflect.KMutableProperty<*> operator=null
              $receiver: TYPE_OP operator=CAST typeOperand=kotlin.reflect.KMutableProperty<*>
                CALL 'single((KCallable<*>) -> Boolean) on Iterable<KCallable<*>>: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
                  $receiver: CALL '<get-members>(): Collection<KCallable<*>>' type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
                    $this: CLASS_REFERENCE 'O' type=kotlin.reflect.KClass<O>
                  predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
                    FUN local final fun <anonymous>(it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from='<anonymous>(KCallable<*>): Boolean'
                          CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                            arg0: CALL '<get-name>(): String' type=kotlin.String operator=GET_PROPERTY
                              $this: GET_VAR 'value-parameter it: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
                            arg1: CONST String type=kotlin.String value='baz'
                    CALLABLE_REFERENCE '<anonymous>(KCallable<*>): Boolean' type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
              block: BLOCK type=kotlin.reflect.KMutableProperty<*>.() -> kotlin.Unit operator=LAMBDA
                FUN local final fun kotlin.reflect.KMutableProperty<*>.<anonymous>(): kotlin.Unit
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='<anonymous>() on KMutableProperty<*>: Unit'
                      CALL '<set-isAccessible>(Boolean) on KCallable<*>: Unit' type=kotlin.Unit operator=EQ
                        $receiver: $RECEIVER of '<anonymous>() on KMutableProperty<*>: Unit' type=kotlin.reflect.KMutableProperty<*>
                        value: CONST Boolean type=kotlin.Boolean value='true'
                CALLABLE_REFERENCE '<anonymous>() on KMutableProperty<*>: Unit' type=kotlin.reflect.KMutableProperty<*>.() -> kotlin.Unit operator=LAMBDA
      FUN public final fun getGetBaz(): kotlin.reflect.KFunction<*>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='getGetBaz(): KFunction<*>'
            TYPE_OP operator=CAST typeOperand=kotlin.reflect.KFunction<*>
              CALL 'single((KCallable<*>) -> Boolean) on Iterable<KCallable<*>>: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
                $receiver: CALL '<get-members>(): Collection<KCallable<*>>' type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
                  $this: CLASS_REFERENCE 'O' type=kotlin.reflect.KClass<O>
                predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
                  FUN local final fun <anonymous>(it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from='<anonymous>(KCallable<*>): Boolean'
                        CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                          arg0: CALL '<get-name>(): String' type=kotlin.String operator=GET_PROPERTY
                            $this: GET_VAR 'value-parameter it: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
                          arg1: CONST String type=kotlin.String value='getBaz'
                  CALLABLE_REFERENCE '<anonymous>(KCallable<*>): Boolean' type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
    FUN public fun check(callable: kotlin.reflect.KCallable<*>, vararg args: kotlin.Any?): kotlin.Unit
      BLOCK_BODY
        VAR val expected: kotlin.Int
          CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
            $this: CALL '<get-parameters>(): List<KParameter>' type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
              $this: GET_VAR 'value-parameter callable: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
        VAR val actual: kotlin.Int
          CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
            $this: GET_VAR 'value-parameter vararg args: Any?' type=kotlin.Array<out kotlin.Any?> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR 'expected: Int' type=kotlin.Int operator=null
            arg1: GET_VAR 'actual: Int' type=kotlin.Int operator=null
          then: BLOCK type=kotlin.Nothing operator=null
            THROW type=kotlin.Nothing
              CALL 'constructor AssertionError(Any!)' type=java.lang.AssertionError operator=null
                p0: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='Bad test case: expected and actual number of arguments should differ (was '
                  GET_VAR 'expected: Int' type=kotlin.Int operator=null
                  CONST String type=kotlin.String value=' vs '
                  GET_VAR 'actual: Int' type=kotlin.Int operator=null
                  CONST String type=kotlin.String value=')'
        VAR val expectedExceptionMessage: kotlin.String
          STRING_CONCATENATION type=kotlin.String
            CONST String type=kotlin.String value='Callable expects '
            GET_VAR 'expected: Int' type=kotlin.Int operator=null
            CONST String type=kotlin.String value=' arguments, but '
            GET_VAR 'actual: Int' type=kotlin.Int operator=null
            CONST String type=kotlin.String value=' were provided.'
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL 'call(vararg Any?): Any?' type=kotlin.Any? operator=null
              $this: GET_VAR 'value-parameter callable: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
              args: VARARG type=Array<out Any?> varargElementType=Any?
                SPREAD_ELEMENT
                  GET_VAR 'value-parameter vararg args: Any?' type=kotlin.Array<out kotlin.Any?> operator=null
            THROW type=kotlin.Nothing
              CALL 'constructor AssertionError(Any!)' type=java.lang.AssertionError operator=null
                p0: CONST String type=kotlin.String value='Fail: an IllegalArgumentException should have been thrown'
          catch e: BLOCK type=kotlin.Unit operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                  arg0: CALL '<get-message>(): String?' type=kotlin.String? operator=GET_PROPERTY
                    $this: GET_VAR 'e: IllegalArgumentException /* = IllegalArgumentException */' type=kotlin.IllegalArgumentException /* = java.lang.IllegalArgumentException */ operator=null
                  arg1: GET_VAR 'expectedExceptionMessage: String' type=kotlin.String operator=null
              then: BLOCK type=kotlin.Nothing operator=null
                THROW type=kotlin.Nothing
                  CALL 'constructor AssertionError(Any!)' type=java.lang.AssertionError operator=null
                    p0: CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
                      $this: STRING_CONCATENATION type=kotlin.String
                        CONST String type=kotlin.String value='Fail: an exception with an unrecognized message was thrown: '
                        CONST String type=kotlin.String value='"'
                        CALL '<get-message>(): String?' type=kotlin.String? operator=GET_PROPERTY
                          $this: GET_VAR 'e: IllegalArgumentException /* = IllegalArgumentException */' type=kotlin.IllegalArgumentException /* = java.lang.IllegalArgumentException */ operator=null
                        CONST String type=kotlin.String value='"'
                      other: STRING_CONCATENATION type=kotlin.String
                        CONST String type=kotlin.String value='
'
                        CONST String type=kotlin.String value='Expected message was: '
                        GET_VAR 'expectedExceptionMessage: String' type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALLABLE_REFERENCE 'box(): String' type=kotlin.reflect.KFunction0<kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST Null type=kotlin.Nothing? value='null'
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALLABLE_REFERENCE 'box(): String' type=kotlin.reflect.KFunction0<kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST String type=kotlin.String value=''
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALLABLE_REFERENCE 'constructor A(String = ...)' type=kotlin.reflect.KFunction1<kotlin.String, A> operator=null
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALLABLE_REFERENCE 'constructor A(String = ...)' type=kotlin.reflect.KFunction1<kotlin.String, A> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST Null type=kotlin.Nothing? value='null'
            CONST String type=kotlin.String value=''
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL 'getGetBaz(): KFunction<*>' type=kotlin.reflect.KFunction<*> operator=null
            $this: GET_OBJECT 'O' type=O
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL 'getGetBaz(): KFunction<*>' type=kotlin.reflect.KFunction<*> operator=null
            $this: GET_OBJECT 'O' type=O
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST Null type=kotlin.Nothing? value='null'
            CONST String type=kotlin.String value=''
        VAR val f: kotlin.reflect.KMutableProperty0<kotlin.String>
          CALLABLE_REFERENCE 'foo: String' type=kotlin.reflect.KMutableProperty0<kotlin.String> operator=null
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: GET_VAR 'f: KMutableProperty0<String>' type=kotlin.reflect.KMutableProperty0<kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST Null type=kotlin.Nothing? value='null'
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: GET_VAR 'f: KMutableProperty0<String>' type=kotlin.reflect.KMutableProperty0<kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST Null type=kotlin.Nothing? value='null'
            CONST Null type=kotlin.Nothing? value='null'
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: GET_VAR 'f: KMutableProperty0<String>' type=kotlin.reflect.KMutableProperty0<kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CALL 'arrayOf(vararg Any?): Array<Any?>' type=kotlin.Array<kotlin.Any?> operator=null
              elements: VARARG type=Array<out Any?> varargElementType=Any?
                CONST Null type=kotlin.Nothing? value='null'
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: GET_VAR 'f: KMutableProperty0<String>' type=kotlin.reflect.KMutableProperty0<kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST String type=kotlin.String value=''
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-getter>(): KProperty0.Getter<String>' type=kotlin.reflect.KProperty0.Getter<kotlin.String> operator=GET_PROPERTY
            $this: GET_VAR 'f: KMutableProperty0<String>' type=kotlin.reflect.KMutableProperty0<kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST Null type=kotlin.Nothing? value='null'
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-getter>(): KProperty0.Getter<String>' type=kotlin.reflect.KProperty0.Getter<kotlin.String> operator=GET_PROPERTY
            $this: GET_VAR 'f: KMutableProperty0<String>' type=kotlin.reflect.KMutableProperty0<kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST Null type=kotlin.Nothing? value='null'
            CONST Null type=kotlin.Nothing? value='null'
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-getter>(): KProperty0.Getter<String>' type=kotlin.reflect.KProperty0.Getter<kotlin.String> operator=GET_PROPERTY
            $this: GET_VAR 'f: KMutableProperty0<String>' type=kotlin.reflect.KMutableProperty0<kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CALL 'arrayOf(vararg Any?): Array<Any?>' type=kotlin.Array<kotlin.Any?> operator=null
              elements: VARARG type=Array<out Any?> varargElementType=Any?
                CONST Null type=kotlin.Nothing? value='null'
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-getter>(): KProperty0.Getter<String>' type=kotlin.reflect.KProperty0.Getter<kotlin.String> operator=GET_PROPERTY
            $this: GET_VAR 'f: KMutableProperty0<String>' type=kotlin.reflect.KMutableProperty0<kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST String type=kotlin.String value=''
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-setter>(): KMutableProperty0.Setter<String>' type=kotlin.reflect.KMutableProperty0.Setter<kotlin.String> operator=GET_PROPERTY
            $this: GET_VAR 'f: KMutableProperty0<String>' type=kotlin.reflect.KMutableProperty0<kotlin.String> operator=null
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-setter>(): KMutableProperty0.Setter<String>' type=kotlin.reflect.KMutableProperty0.Setter<kotlin.String> operator=GET_PROPERTY
            $this: GET_VAR 'f: KMutableProperty0<String>' type=kotlin.reflect.KMutableProperty0<kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST Null type=kotlin.Nothing? value='null'
            CONST Null type=kotlin.Nothing? value='null'
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-setter>(): KMutableProperty0.Setter<String>' type=kotlin.reflect.KMutableProperty0.Setter<kotlin.String> operator=GET_PROPERTY
            $this: GET_VAR 'f: KMutableProperty0<String>' type=kotlin.reflect.KMutableProperty0<kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST Null type=kotlin.Nothing? value='null'
            CONST String type=kotlin.String value=''
        VAR val b: kotlin.reflect.KMutableProperty1<A, kotlin.String>
          CALL 'getBar(): KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
            $this: CALL 'constructor A(String = ...)' type=A operator=null
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: GET_VAR 'b: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: GET_VAR 'b: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST Null type=kotlin.Nothing? value='null'
            CONST Null type=kotlin.Nothing? value='null'
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: GET_VAR 'b: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST String type=kotlin.String value=''
            CONST String type=kotlin.String value=''
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-getter>(): KProperty1.Getter<A, String>' type=kotlin.reflect.KProperty1.Getter<A, kotlin.String> operator=GET_PROPERTY
            $this: GET_VAR 'b: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-getter>(): KProperty1.Getter<A, String>' type=kotlin.reflect.KProperty1.Getter<A, kotlin.String> operator=GET_PROPERTY
            $this: GET_VAR 'b: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST Null type=kotlin.Nothing? value='null'
            CONST Null type=kotlin.Nothing? value='null'
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-getter>(): KProperty1.Getter<A, String>' type=kotlin.reflect.KProperty1.Getter<A, kotlin.String> operator=GET_PROPERTY
            $this: GET_VAR 'b: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST String type=kotlin.String value=''
            CONST String type=kotlin.String value=''
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-setter>(): KMutableProperty1.Setter<A, String>' type=kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String> operator=GET_PROPERTY
            $this: GET_VAR 'b: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-setter>(): KMutableProperty1.Setter<A, String>' type=kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String> operator=GET_PROPERTY
            $this: GET_VAR 'b: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST Null type=kotlin.Nothing? value='null'
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-setter>(): KMutableProperty1.Setter<A, String>' type=kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String> operator=GET_PROPERTY
            $this: GET_VAR 'b: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST String type=kotlin.String value=''
        VAR val z: kotlin.reflect.KMutableProperty<*>
          CALL 'getBaz(): KMutableProperty<*>' type=kotlin.reflect.KMutableProperty<*> operator=null
            $this: GET_OBJECT 'O' type=O
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: GET_VAR 'z: KMutableProperty<*>' type=kotlin.reflect.KMutableProperty<*> operator=null
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: GET_VAR 'z: KMutableProperty<*>' type=kotlin.reflect.KMutableProperty<*> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST Null type=kotlin.Nothing? value='null'
            CONST Null type=kotlin.Nothing? value='null'
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: GET_VAR 'z: KMutableProperty<*>' type=kotlin.reflect.KMutableProperty<*> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST String type=kotlin.String value=''
            CONST String type=kotlin.String value=''
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-getter>(): KProperty.Getter<Any?>' type=kotlin.reflect.KProperty.Getter<kotlin.Any?> operator=GET_PROPERTY
            $this: GET_VAR 'z: KMutableProperty<*>' type=kotlin.reflect.KMutableProperty<*> operator=null
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-getter>(): KProperty.Getter<Any?>' type=kotlin.reflect.KProperty.Getter<kotlin.Any?> operator=GET_PROPERTY
            $this: GET_VAR 'z: KMutableProperty<*>' type=kotlin.reflect.KMutableProperty<*> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST Null type=kotlin.Nothing? value='null'
            CONST Null type=kotlin.Nothing? value='null'
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-getter>(): KProperty.Getter<Any?>' type=kotlin.reflect.KProperty.Getter<kotlin.Any?> operator=GET_PROPERTY
            $this: GET_VAR 'z: KMutableProperty<*>' type=kotlin.reflect.KMutableProperty<*> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST String type=kotlin.String value=''
            CONST String type=kotlin.String value=''
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-setter>(): KMutableProperty.Setter<out Any?>' type=kotlin.reflect.KMutableProperty.Setter<out kotlin.Any?> operator=GET_PROPERTY
            $this: GET_VAR 'z: KMutableProperty<*>' type=kotlin.reflect.KMutableProperty<*> operator=null
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-setter>(): KMutableProperty.Setter<out Any?>' type=kotlin.reflect.KMutableProperty.Setter<out kotlin.Any?> operator=GET_PROPERTY
            $this: GET_VAR 'z: KMutableProperty<*>' type=kotlin.reflect.KMutableProperty<*> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST Null type=kotlin.Nothing? value='null'
        CALL 'check(KCallable<*>, vararg Any?): Unit' type=kotlin.Unit operator=null
          callable: CALL '<get-setter>(): KMutableProperty.Setter<out Any?>' type=kotlin.reflect.KMutableProperty.Setter<out kotlin.Any?> operator=GET_PROPERTY
            $this: GET_VAR 'z: KMutableProperty<*>' type=kotlin.reflect.KMutableProperty<*> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST String type=kotlin.String value=''
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
