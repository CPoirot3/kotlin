MODULE <test-module>
  FILE /simpleTopLevelFunctions.kt
    FUN public fun kotlin.String.foo(): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='foo() on String: Int'
          CALL '<get-length>(): Int' type=kotlin.Int operator=GET_PROPERTY
            $this: $RECEIVER of 'foo() on String: Int' type=kotlin.String
    PROPERTY public var state: kotlin.String
      EXPRESSION_BODY
        CONST String type=kotlin.String value='Fail'
    FUN public fun bar(result: kotlin.String): kotlin.Unit
      BLOCK_BODY
        CALL '<set-state>(String): Unit' type=kotlin.Unit operator=EQ
          <set-?>: GET_VAR 'value-parameter result: String' type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val f: kotlin.Int
          CALL 'call(vararg Any?): Int' type=kotlin.Int operator=null
            $this: CALLABLE_REFERENCE 'foo() on String: Int' type=kotlin.reflect.KFunction1<kotlin.String, kotlin.Int> operator=null
            args: VARARG type=Array<out Any?> varargElementType=Any?
              CONST String type=kotlin.String value='abc'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'f: Int' type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='3'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail: '
              GET_VAR 'f: Int' type=kotlin.Int operator=null
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL 'call(vararg Any?): Int' type=kotlin.Int operator=null
              $this: CALLABLE_REFERENCE 'foo() on String: Int' type=kotlin.reflect.KFunction1<kotlin.String, kotlin.Int> operator=null
            RETURN type=kotlin.Nothing from='box(): String'
              CONST String type=kotlin.String value='Fail: IllegalArgumentException should have been thrown'
          catch e: BLOCK type=kotlin.Unit operator=null
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL 'call(vararg Any?): Int' type=kotlin.Int operator=null
              $this: CALLABLE_REFERENCE 'foo() on String: Int' type=kotlin.reflect.KFunction1<kotlin.String, kotlin.Int> operator=null
              args: VARARG type=Array<out Any?> varargElementType=Any?
                CONST Int type=kotlin.Int value='42'
            RETURN type=kotlin.Nothing from='box(): String'
              CONST String type=kotlin.String value='Fail: IllegalArgumentException should have been thrown'
          catch e: BLOCK type=kotlin.Unit operator=null
        CALL 'call(vararg Any?): Unit' type=kotlin.Unit operator=null
          $this: CALLABLE_REFERENCE 'bar(String): Unit' type=kotlin.reflect.KFunction1<kotlin.String, kotlin.Unit> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CONST String type=kotlin.String value='OK'
        RETURN type=kotlin.Nothing from='box(): String'
          CALL '<get-state>(): String' type=kotlin.String operator=GET_PROPERTY
