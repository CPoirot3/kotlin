MODULE <test-module>
  FILE /reifiedTypeClassLiteral.kt
    CLASS CLASS Klass
      CONSTRUCTOR public constructor Klass()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Klass'
    CLASS CLASS Other
      CONSTRUCTOR public constructor Other()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Other'
    FUN public inline fun <reified T : kotlin.Any> simpleName(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='simpleName(): String'
          BLOCK type=kotlin.String operator=EXCLEXCL
            VAR val tmp0_notnull: kotlin.String?
              CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
                $this: CLASS_REFERENCE '<reified T : Any>' type=kotlin.reflect.KClass<T>
            WHEN type=kotlin.String operator=null
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_notnull: String?' type=kotlin.String? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
              else: GET_VAR 'tmp0_notnull: String?' type=kotlin.String? operator=null
    FUN public inline fun <reified T1 : kotlin.Any, reified T2 : kotlin.Any> twoReifiedParams(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='twoReifiedParams(): String'
          STRING_CONCATENATION type=kotlin.String
            BLOCK type=kotlin.String operator=EXCLEXCL
              VAR val tmp0_notnull: kotlin.String?
                CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
                  $this: CLASS_REFERENCE '<reified T1 : Any>' type=kotlin.reflect.KClass<T1>
              WHEN type=kotlin.String operator=null
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR 'tmp0_notnull: String?' type=kotlin.String? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                else: GET_VAR 'tmp0_notnull: String?' type=kotlin.String? operator=null
            CONST String type=kotlin.String value=', '
            BLOCK type=kotlin.String operator=EXCLEXCL
              VAR val tmp1_notnull: kotlin.String?
                CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
                  $this: CLASS_REFERENCE '<reified T2 : Any>' type=kotlin.reflect.KClass<T2>
              WHEN type=kotlin.String operator=null
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR 'tmp1_notnull: String?' type=kotlin.String? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                else: GET_VAR 'tmp1_notnull: String?' type=kotlin.String? operator=null
    FUN public inline fun <reified T : kotlin.Any> myJavaClass(): java.lang.Class<T>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='myJavaClass(): Class<T>'
          CALL '<get-java>() on KClass<T>: Class<T>' type=java.lang.Class<T> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE '<reified T : Any>' type=kotlin.reflect.KClass<T>
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='Klass'
          actual: CALL 'simpleName(): String' type=kotlin.String operator=null
        CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='Int'
          actual: CALL 'simpleName(): String' type=kotlin.String operator=null
        CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='Array'
          actual: CALL 'simpleName(): String' type=kotlin.String operator=null
        CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='Error'
          actual: CALL 'simpleName(): String' type=kotlin.String operator=null
        CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='Klass, Other'
          actual: CALL 'twoReifiedParams(): String' type=kotlin.String operator=null
        CALL 'assertEquals(Class<String>, Class<String>, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CALL '<get-java>() on KClass<String>: Class<String>' type=java.lang.Class<kotlin.String> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'String' type=kotlin.reflect.KClass<kotlin.String>
          actual: CALL 'myJavaClass(): Class<String>' type=java.lang.Class<kotlin.String> operator=null
        CALL 'assertEquals(Class<IntArray>, Class<IntArray>, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CALL '<get-java>() on KClass<IntArray>: Class<IntArray>' type=java.lang.Class<kotlin.IntArray> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'IntArray' type=kotlin.reflect.KClass<kotlin.IntArray>
          actual: CALL 'myJavaClass(): Class<IntArray>' type=java.lang.Class<kotlin.IntArray> operator=null
        CALL 'assertEquals(Class<Klass>, Class<Klass>, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CALL '<get-java>() on KClass<Klass>: Class<Klass>' type=java.lang.Class<Klass> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Klass' type=kotlin.reflect.KClass<Klass>
          actual: CALL 'myJavaClass(): Class<Klass>' type=java.lang.Class<Klass> operator=null
        CALL 'assertEquals(Class<Error /* = Error */>, Class<Error /* = Error */>, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CALL '<get-java>() on KClass<Error /* = Error */>: Class<Error /* = Error */>' type=java.lang.Class<kotlin.Error /* = java.lang.Error */> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Error' type=kotlin.reflect.KClass<kotlin.Error /* = java.lang.Error */>
          actual: CALL 'myJavaClass(): Class<Error /* = Error */>' type=java.lang.Class<kotlin.Error /* = java.lang.Error */> operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
