MODULE <test-module>
  FILE /builtinClassLiterals.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'assertEquals(String?, String?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='Any'
          actual: CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'Any' type=kotlin.reflect.KClass<kotlin.Any>
        CALL 'assertEquals(String?, String?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='String'
          actual: CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'String' type=kotlin.reflect.KClass<kotlin.String>
        CALL 'assertEquals(String?, String?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='CharSequence'
          actual: CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'CharSequence' type=kotlin.reflect.KClass<kotlin.CharSequence>
        CALL 'assertEquals(String?, String?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='Number'
          actual: CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'Number' type=kotlin.reflect.KClass<kotlin.Number>
        CALL 'assertEquals(String?, String?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='Int'
          actual: CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'Int' type=kotlin.reflect.KClass<kotlin.Int>
        CALL 'assertEquals(String?, String?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='Long'
          actual: CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'Long' type=kotlin.reflect.KClass<kotlin.Long>
        CALL 'assertEquals(String?, String?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='Array'
          actual: CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'Array' type=kotlin.reflect.KClass<kotlin.Array<kotlin.Any>>
        CALL 'assertEquals(String?, String?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='Array'
          actual: CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'Array' type=kotlin.reflect.KClass<kotlin.Array<kotlin.IntArray>>
        CALL 'assertEquals(String?, String?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='Companion'
          actual: CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'companion object of Int' type=kotlin.reflect.KClass<kotlin.Int.Companion>
        CALL 'assertEquals(String?, String?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='Companion'
          actual: CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'companion object of Double' type=kotlin.reflect.KClass<kotlin.Double.Companion>
        CALL 'assertEquals(String?, String?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='Companion'
          actual: CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'companion object of Char' type=kotlin.reflect.KClass<kotlin.Char.Companion>
        CALL 'assertEquals(String?, String?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='IntRange'
          actual: CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'IntRange' type=kotlin.reflect.KClass<kotlin.ranges.IntRange>
        CALL 'assertEquals(String?, String?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='List'
          actual: CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'List' type=kotlin.reflect.KClass<kotlin.collections.List<*>>
        CALL 'assertEquals(String?, String?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='List'
          actual: CALL '<get-simpleName>(): String?' type=kotlin.String? operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'MutableList' type=kotlin.reflect.KClass<kotlin.collections.MutableList<*>>
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
