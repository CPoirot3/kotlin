MODULE <test-module>
  FILE /genericBackingFieldSignature.kt
    CLASS CLASS Z
      CONSTRUCTOR public constructor Z<T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Z'
    CLASS CLASS TParam
      CONSTRUCTOR public constructor TParam()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='TParam'
    CLASS CLASS Zout
      CONSTRUCTOR public constructor Zout<out T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Zout'
    CLASS CLASS Zin
      CONSTRUCTOR public constructor Zin<in T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Zin'
    CLASS CLASS Test
      CONSTRUCTOR public constructor Test<T>(constructorProperty: T)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'constructorProperty: T' type=kotlin.Unit operator=null
            receiver: THIS of 'Test' type=Test<T>
            value: GET_VAR 'value-parameter constructorProperty: T' type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='Test'
      PROPERTY public final val constructorProperty: T
        EXPRESSION_BODY
          GET_VAR 'value-parameter constructorProperty: T' type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val classField1: Z<T>? = null
        EXPRESSION_BODY
          CONST Null type=kotlin.Nothing? value='null'
      PROPERTY public final val classField2: Z<kotlin.String>? = null
        EXPRESSION_BODY
          CONST Null type=kotlin.Nothing? value='null'
      PROPERTY public final val classField3: Zout<kotlin.String>? = null
        EXPRESSION_BODY
          CONST Null type=kotlin.Nothing? value='null'
      PROPERTY public final val classField4: Zin<TParam>? = null
        EXPRESSION_BODY
          CONST Null type=kotlin.Nothing? value='null'
      PROPERTY public final val delegateLazy: Z<TParam>?
        delegate: PROPERTY val `delegateLazy$delegate`: kotlin.Lazy<Z<TParam>>
          EXPRESSION_BODY
            CALL 'lazy(() -> Z<TParam>): Lazy<Z<TParam>>' type=kotlin.Lazy<Z<TParam>> operator=null
              initializer: BLOCK type=() -> Z<TParam> operator=LAMBDA
                FUN local final fun <anonymous>(): Z<TParam>
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='<anonymous>(): Z<TParam>'
                      CALL 'constructor Z()' type=Z<TParam> operator=null
                CALLABLE_REFERENCE '<anonymous>(): Z<TParam>' type=() -> Z<TParam> operator=LAMBDA
        PROPERTY_GETTER public final fun <get-delegateLazy>(): Z<TParam>?
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='<get-delegateLazy>(): Z<TParam>?'
              CALL 'getValue(Any?, KProperty<*>) on Lazy<Z<TParam>>: Z<TParam>' type=Z<TParam> operator=null
                $receiver: GET_BACKING_FIELD '`delegateLazy$delegate`: Lazy<Z<TParam>>' type=kotlin.Lazy<Z<TParam>> operator=null
                  receiver: THIS of 'Test' type=Test<T>
                thisRef: THIS of 'Test' type=Test<T>
                property: CALLABLE_REFERENCE 'delegateLazy: Z<TParam>?' type=kotlin.reflect.KProperty1<Test<T>, Z<TParam>?> operator=PROPERTY_REFERENCE_FOR_DELEGATE
      PROPERTY public final val delegateNotNull: Z<TParam>?
        delegate: PROPERTY val `delegateNotNull$delegate`: kotlin.properties.ReadWriteProperty<kotlin.Any?, Z<TParam>>
          EXPRESSION_BODY
            CALL 'notNull(): ReadWriteProperty<Any?, Z<TParam>>' type=kotlin.properties.ReadWriteProperty<kotlin.Any?, Z<TParam>> operator=null
              $this: GET_OBJECT 'Delegates' type=kotlin.properties.Delegates
        PROPERTY_GETTER public final fun <get-delegateNotNull>(): Z<TParam>?
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='<get-delegateNotNull>(): Z<TParam>?'
              CALL 'getValue(Any?, KProperty<*>): Z<TParam>' type=Z<TParam> operator=null
                $this: GET_BACKING_FIELD '`delegateNotNull$delegate`: ReadWriteProperty<Any?, Z<TParam>>' type=kotlin.properties.ReadWriteProperty<kotlin.Any?, Z<TParam>> operator=null
                  receiver: THIS of 'Test' type=Test<T>
                thisRef: THIS of 'Test' type=Test<T>
                property: CALLABLE_REFERENCE 'delegateNotNull: Z<TParam>?' type=kotlin.reflect.KProperty1<Test<T>, Z<TParam>?> operator=PROPERTY_REFERENCE_FOR_DELEGATE
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val clz: java.lang.Class<Test<*>>
          CALL '<get-java>() on KClass<Test<*>>: Class<Test<*>>' type=java.lang.Class<Test<*>> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Test' type=kotlin.reflect.KClass<Test<*>>
        VAR val constructorProperty: java.lang.reflect.Field!
          CALL 'getDeclaredField(String!): Field!' type=java.lang.reflect.Field! operator=null
            $this: GET_VAR 'clz: Class<Test<*>>' type=java.lang.Class<Test<*>> operator=null
            p0: CONST String type=kotlin.String value='constructorProperty'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'toString(): String' type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  CALL 'getGenericType(): Type!' type=java.lang.reflect.Type! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                      GET_VAR 'constructorProperty: Field!' type=java.lang.reflect.Field! operator=null
              arg1: CONST String type=kotlin.String value='T'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='fail0: '
              other: CALL 'getGenericType(): Type!' type=java.lang.reflect.Type! operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                  GET_VAR 'constructorProperty: Field!' type=java.lang.reflect.Field! operator=null
        VAR val classField: java.lang.reflect.Field!
          CALL 'getDeclaredField(String!): Field!' type=java.lang.reflect.Field! operator=null
            $this: GET_VAR 'clz: Class<Test<*>>' type=java.lang.Class<Test<*>> operator=null
            p0: CONST String type=kotlin.String value='classField1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'toString(): String' type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  CALL 'getGenericType(): Type!' type=java.lang.reflect.Type! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                      GET_VAR 'classField: Field!' type=java.lang.reflect.Field! operator=null
              arg1: CONST String type=kotlin.String value='Z<T>'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='fail1: '
              other: CALL 'getGenericType(): Type!' type=java.lang.reflect.Type! operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                  GET_VAR 'classField: Field!' type=java.lang.reflect.Field! operator=null
        VAR val classField2: java.lang.reflect.Field!
          CALL 'getDeclaredField(String!): Field!' type=java.lang.reflect.Field! operator=null
            $this: GET_VAR 'clz: Class<Test<*>>' type=java.lang.Class<Test<*>> operator=null
            p0: CONST String type=kotlin.String value='classField2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'toString(): String' type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  CALL 'getGenericType(): Type!' type=java.lang.reflect.Type! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                      GET_VAR 'classField2: Field!' type=java.lang.reflect.Field! operator=null
              arg1: CONST String type=kotlin.String value='Z<java.lang.String>'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='fail2: '
              other: CALL 'getGenericType(): Type!' type=java.lang.reflect.Type! operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                  GET_VAR 'classField2: Field!' type=java.lang.reflect.Field! operator=null
        VAR val classField3: java.lang.reflect.Field!
          CALL 'getDeclaredField(String!): Field!' type=java.lang.reflect.Field! operator=null
            $this: GET_VAR 'clz: Class<Test<*>>' type=java.lang.Class<Test<*>> operator=null
            p0: CONST String type=kotlin.String value='classField3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'toString(): String' type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  CALL 'getGenericType(): Type!' type=java.lang.reflect.Type! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                      GET_VAR 'classField3: Field!' type=java.lang.reflect.Field! operator=null
              arg1: CONST String type=kotlin.String value='Zout<java.lang.String>'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='fail3: '
              other: CALL 'getGenericType(): Type!' type=java.lang.reflect.Type! operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                  GET_VAR 'classField3: Field!' type=java.lang.reflect.Field! operator=null
        VAR val classField4: java.lang.reflect.Field!
          CALL 'getDeclaredField(String!): Field!' type=java.lang.reflect.Field! operator=null
            $this: GET_VAR 'clz: Class<Test<*>>' type=java.lang.Class<Test<*>> operator=null
            p0: CONST String type=kotlin.String value='classField4'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'toString(): String' type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  CALL 'getGenericType(): Type!' type=java.lang.reflect.Type! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                      GET_VAR 'classField4: Field!' type=java.lang.reflect.Field! operator=null
              arg1: CONST String type=kotlin.String value='Zin<TParam>'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='fail4: '
              other: CALL 'getGenericType(): Type!' type=java.lang.reflect.Type! operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                  GET_VAR 'classField4: Field!' type=java.lang.reflect.Field! operator=null
        VAR val classField5: java.lang.reflect.Field!
          CALL 'getDeclaredField(String!): Field!' type=java.lang.reflect.Field! operator=null
            $this: GET_VAR 'clz: Class<Test<*>>' type=java.lang.Class<Test<*>> operator=null
            p0: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='delegateLazy'
              CONST String type=kotlin.String value='$'
              CONST String type=kotlin.String value='delegate'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'toString(): String' type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  CALL 'getGenericType(): Type!' type=java.lang.reflect.Type! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                      GET_VAR 'classField5: Field!' type=java.lang.reflect.Field! operator=null
              arg1: CONST String type=kotlin.String value='interface kotlin.Lazy'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='fail5: '
              other: CALL 'getGenericType(): Type!' type=java.lang.reflect.Type! operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                  GET_VAR 'classField5: Field!' type=java.lang.reflect.Field! operator=null
        VAR val classField6: java.lang.reflect.Field!
          CALL 'getDeclaredField(String!): Field!' type=java.lang.reflect.Field! operator=null
            $this: GET_VAR 'clz: Class<Test<*>>' type=java.lang.Class<Test<*>> operator=null
            p0: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='delegateNotNull'
              CONST String type=kotlin.String value='$'
              CONST String type=kotlin.String value='delegate'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'toString(): String' type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  CALL 'getGenericType(): Type!' type=java.lang.reflect.Type! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                      GET_VAR 'classField6: Field!' type=java.lang.reflect.Field! operator=null
              arg1: CONST String type=kotlin.String value='interface kotlin.properties.ReadWriteProperty'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='fail6: '
              other: CALL 'getGenericType(): Type!' type=java.lang.reflect.Type! operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                  GET_VAR 'classField6: Field!' type=java.lang.reflect.Field! operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
