MODULE <test-module>
  FILE /upperBounds.kt
    CLASS CLASS DefaultBound
      CONSTRUCTOR public constructor DefaultBound<T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='DefaultBound'
    CLASS CLASS NullableAnyBound
      CONSTRUCTOR public constructor NullableAnyBound<T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='NullableAnyBound'
    CLASS CLASS NotNullAnyBound
      CONSTRUCTOR public constructor NotNullAnyBound<T : kotlin.Any>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='NotNullAnyBound'
    CLASS CLASS TwoBounds
      CONSTRUCTOR public constructor TwoBounds<T : kotlin.Cloneable>() where T : kotlin.Comparable<T>
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='TwoBounds'
    CLASS CLASS OtherParameterBound
      CONSTRUCTOR public constructor OtherParameterBound<T : U, U : kotlin.Number>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='OtherParameterBound'
    CLASS CLASS RecursiveGeneric
      CONSTRUCTOR public constructor RecursiveGeneric<T : kotlin.Enum<T>>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='RecursiveGeneric'
    CLASS CLASS FunctionTypeParameter
      CONSTRUCTOR public constructor FunctionTypeParameter()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='FunctionTypeParameter'
      FUN public final fun <A : kotlin.Cloneable> foo(): kotlin.Cloneable
        BLOCK_BODY
          BLOCK type=kotlin.Nothing operator=EXCLEXCL
            VAR val tmp0_notnull: kotlin.Nothing?
              CONST Null type=kotlin.Nothing? value='null'
            WHEN type=kotlin.Nothing operator=null
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
              else: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
    FUN public fun nullableAny(): kotlin.Any?
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='nullableAny(): Any?'
          CONST Null type=kotlin.Nothing? value='null'
    FUN public fun notNullAny(): kotlin.Any
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'assertEquals(List<KType>, List<KType>, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CALL 'listOf(KType): List<KType>' type=kotlin.collections.List<kotlin.reflect.KType> operator=null
            element: CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
              $this: CALLABLE_REFERENCE 'nullableAny(): Any?' type=kotlin.reflect.KFunction0<kotlin.Any?> operator=null
          actual: CALL '<get-upperBounds>(): List<KType>' type=kotlin.collections.List<kotlin.reflect.KType> operator=GET_PROPERTY
            $this: CALL 'single() on List<KTypeParameter>: KTypeParameter' type=kotlin.reflect.KTypeParameter operator=null
              $receiver: CALL '<get-typeParameters>(): List<KTypeParameter>' type=kotlin.collections.List<kotlin.reflect.KTypeParameter> operator=GET_PROPERTY
                $this: CLASS_REFERENCE 'DefaultBound' type=kotlin.reflect.KClass<DefaultBound<*>>
        CALL 'assertEquals(List<KType>, List<KType>, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CALL 'listOf(KType): List<KType>' type=kotlin.collections.List<kotlin.reflect.KType> operator=null
            element: CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
              $this: CALLABLE_REFERENCE 'nullableAny(): Any?' type=kotlin.reflect.KFunction0<kotlin.Any?> operator=null
          actual: CALL '<get-upperBounds>(): List<KType>' type=kotlin.collections.List<kotlin.reflect.KType> operator=GET_PROPERTY
            $this: CALL 'single() on List<KTypeParameter>: KTypeParameter' type=kotlin.reflect.KTypeParameter operator=null
              $receiver: CALL '<get-typeParameters>(): List<KTypeParameter>' type=kotlin.collections.List<kotlin.reflect.KTypeParameter> operator=GET_PROPERTY
                $this: CLASS_REFERENCE 'NullableAnyBound' type=kotlin.reflect.KClass<NullableAnyBound<*>>
        CALL 'assertEquals(List<KType>, List<KType>, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CALL 'listOf(KType): List<KType>' type=kotlin.collections.List<kotlin.reflect.KType> operator=null
            element: CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
              $this: CALLABLE_REFERENCE 'notNullAny(): Any' type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
          actual: CALL '<get-upperBounds>(): List<KType>' type=kotlin.collections.List<kotlin.reflect.KType> operator=GET_PROPERTY
            $this: CALL 'single() on List<KTypeParameter>: KTypeParameter' type=kotlin.reflect.KTypeParameter operator=null
              $receiver: CALL '<get-typeParameters>(): List<KTypeParameter>' type=kotlin.collections.List<kotlin.reflect.KTypeParameter> operator=GET_PROPERTY
                $this: CLASS_REFERENCE 'NotNullAnyBound' type=kotlin.reflect.KClass<NotNullAnyBound<*>>
        CALL 'let((KTypeParameter) -> Unit) on KTypeParameter: Unit' type=kotlin.Unit operator=null
          $receiver: CALL 'single() on List<KTypeParameter>: KTypeParameter' type=kotlin.reflect.KTypeParameter operator=null
            $receiver: CALL '<get-typeParameters>(): List<KTypeParameter>' type=kotlin.collections.List<kotlin.reflect.KTypeParameter> operator=GET_PROPERTY
              $this: CLASS_REFERENCE 'TwoBounds' type=kotlin.reflect.KClass<TwoBounds<*>>
          block: BLOCK type=(kotlin.reflect.KTypeParameter) -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(it: kotlin.reflect.KTypeParameter): kotlin.Unit
              BLOCK_BODY
                BLOCK type=kotlin.Unit operator=DESTRUCTURING_DECLARATION
                  VAR val tmp0_container: kotlin.collections.List<kotlin.reflect.KType>
                    CALL '<get-upperBounds>(): List<KType>' type=kotlin.collections.List<kotlin.reflect.KType> operator=GET_PROPERTY
                      $this: GET_VAR 'value-parameter it: KTypeParameter' type=kotlin.reflect.KTypeParameter operator=null
                  VAR val cl: kotlin.reflect.KType
                    CALL 'component1() on List<KType>: KType' type=kotlin.reflect.KType operator=COMPONENT_N(index=1)
                      $receiver: GET_VAR 'tmp0_container: List<KType>' type=kotlin.collections.List<kotlin.reflect.KType> operator=null
                  VAR val cm: kotlin.reflect.KType
                    CALL 'component2() on List<KType>: KType' type=kotlin.reflect.KType operator=COMPONENT_N(index=2)
                      $receiver: GET_VAR 'tmp0_container: List<KType>' type=kotlin.collections.List<kotlin.reflect.KType> operator=null
                CALL 'assertEquals(KClassifier?, KClassifier?, String? = ...): Unit' type=kotlin.Unit operator=null
                  expected: CLASS_REFERENCE 'Cloneable' type=kotlin.reflect.KClass<kotlin.Cloneable>
                  actual: CALL '<get-classifier>(): KClassifier?' type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
                    $this: GET_VAR 'cl: KType' type=kotlin.reflect.KType operator=null
                CALL 'assertEquals(List<KTypeProjection>, List<KTypeProjection>, String? = ...): Unit' type=kotlin.Unit operator=null
                  expected: CALL 'listOf(): List<KTypeProjection>' type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=null
                  actual: CALL '<get-arguments>(): List<KTypeProjection>' type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=GET_PROPERTY
                    $this: GET_VAR 'cl: KType' type=kotlin.reflect.KType operator=null
                CALL 'assertEquals(KClassifier?, KClassifier?, String? = ...): Unit' type=kotlin.Unit operator=null
                  expected: CLASS_REFERENCE 'Comparable' type=kotlin.reflect.KClass<kotlin.Comparable<*>>
                  actual: CALL '<get-classifier>(): KClassifier?' type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
                    $this: GET_VAR 'cm: KType' type=kotlin.reflect.KType operator=null
                VAR val cmt: kotlin.reflect.KTypeProjection
                  CALL 'single() on List<KTypeProjection>: KTypeProjection' type=kotlin.reflect.KTypeProjection operator=null
                    $receiver: CALL '<get-arguments>(): List<KTypeProjection>' type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=GET_PROPERTY
                      $this: GET_VAR 'cm: KType' type=kotlin.reflect.KType operator=null
                CALL 'assertEquals(KVariance?, KVariance?, String? = ...): Unit' type=kotlin.Unit operator=null
                  expected: GET_ENUM_VALUE 'INVARIANT' type=kotlin.reflect.KVariance
                  actual: CALL '<get-variance>(): KVariance?' type=kotlin.reflect.KVariance? operator=GET_PROPERTY
                    $this: GET_VAR 'cmt: KTypeProjection' type=kotlin.reflect.KTypeProjection operator=null
                RETURN type=kotlin.Nothing from='<anonymous>(KTypeParameter): Unit'
                  CALL 'assertEquals(KClassifier?, KClassifier?, String? = ...): Unit' type=kotlin.Unit operator=null
                    expected: GET_VAR 'value-parameter it: KTypeParameter' type=kotlin.reflect.KTypeParameter operator=null
                    actual: CALL '<get-classifier>(): KClassifier?' type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
                      $this: BLOCK type=kotlin.reflect.KType operator=EXCLEXCL
                        VAR val tmp1_notnull: kotlin.reflect.KType?
                          CALL '<get-type>(): KType?' type=kotlin.reflect.KType? operator=GET_PROPERTY
                            $this: GET_VAR 'cmt: KTypeProjection' type=kotlin.reflect.KTypeProjection operator=null
                        WHEN type=kotlin.reflect.KType operator=null
                          if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                            arg0: GET_VAR 'tmp1_notnull: KType?' type=kotlin.reflect.KType? operator=null
                            arg1: CONST Null type=kotlin.Nothing? value='null'
                          then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                          else: GET_VAR 'tmp1_notnull: KType?' type=kotlin.reflect.KType? operator=null
            CALLABLE_REFERENCE '<anonymous>(KTypeParameter): Unit' type=(kotlin.reflect.KTypeParameter) -> kotlin.Unit operator=LAMBDA
        CALL 'let((List<KTypeParameter>) -> Unit) on List<KTypeParameter>: Unit' type=kotlin.Unit operator=null
          $receiver: CALL '<get-typeParameters>(): List<KTypeParameter>' type=kotlin.collections.List<kotlin.reflect.KTypeParameter> operator=GET_PROPERTY
            $this: CLASS_REFERENCE 'OtherParameterBound' type=kotlin.reflect.KClass<OtherParameterBound<*, *>>
          block: BLOCK type=(kotlin.collections.List<kotlin.reflect.KTypeParameter>) -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(it: kotlin.collections.List<kotlin.reflect.KTypeParameter>): kotlin.Unit
              BLOCK_BODY
                BLOCK type=kotlin.Unit operator=DESTRUCTURING_DECLARATION
                  VAR val tmp0_container: kotlin.collections.List<kotlin.reflect.KTypeParameter>
                    GET_VAR 'value-parameter it: List<KTypeParameter>' type=kotlin.collections.List<kotlin.reflect.KTypeParameter> operator=null
                  VAR val t: kotlin.reflect.KTypeParameter
                    CALL 'component1() on List<KTypeParameter>: KTypeParameter' type=kotlin.reflect.KTypeParameter operator=COMPONENT_N(index=1)
                      $receiver: GET_VAR 'tmp0_container: List<KTypeParameter>' type=kotlin.collections.List<kotlin.reflect.KTypeParameter> operator=null
                  VAR val u: kotlin.reflect.KTypeParameter
                    CALL 'component2() on List<KTypeParameter>: KTypeParameter' type=kotlin.reflect.KTypeParameter operator=COMPONENT_N(index=2)
                      $receiver: GET_VAR 'tmp0_container: List<KTypeParameter>' type=kotlin.collections.List<kotlin.reflect.KTypeParameter> operator=null
                CALL 'assertEquals(KClassifier?, KClassifier?, String? = ...): Unit' type=kotlin.Unit operator=null
                  expected: GET_VAR 'u: KTypeParameter' type=kotlin.reflect.KTypeParameter operator=null
                  actual: CALL '<get-classifier>(): KClassifier?' type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
                    $this: CALL 'single() on List<KType>: KType' type=kotlin.reflect.KType operator=null
                      $receiver: CALL '<get-upperBounds>(): List<KType>' type=kotlin.collections.List<kotlin.reflect.KType> operator=GET_PROPERTY
                        $this: GET_VAR 't: KTypeParameter' type=kotlin.reflect.KTypeParameter operator=null
                RETURN type=kotlin.Nothing from='<anonymous>(List<KTypeParameter>): Unit'
                  CALL 'assertEquals(KClassifier?, KClassifier?, String? = ...): Unit' type=kotlin.Unit operator=null
                    expected: CLASS_REFERENCE 'Number' type=kotlin.reflect.KClass<kotlin.Number>
                    actual: CALL '<get-classifier>(): KClassifier?' type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
                      $this: CALL 'single() on List<KType>: KType' type=kotlin.reflect.KType operator=null
                        $receiver: CALL '<get-upperBounds>(): List<KType>' type=kotlin.collections.List<kotlin.reflect.KType> operator=GET_PROPERTY
                          $this: GET_VAR 'u: KTypeParameter' type=kotlin.reflect.KTypeParameter operator=null
            CALLABLE_REFERENCE '<anonymous>(List<KTypeParameter>): Unit' type=(kotlin.collections.List<kotlin.reflect.KTypeParameter>) -> kotlin.Unit operator=LAMBDA
        CALL 'let((KCallable<*>) -> Unit) on KCallable<*>: Unit' type=kotlin.Unit operator=null
          $receiver: CALL 'single((KCallable<*>) -> Boolean) on Iterable<KCallable<*>>: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
            $receiver: CALL '<get-members>(): Collection<KCallable<*>>' type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
              $this: CLASS_REFERENCE 'FunctionTypeParameter' type=kotlin.reflect.KClass<FunctionTypeParameter>
            predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(KCallable<*>): Boolean'
                    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                      arg0: CALL '<get-name>(): String' type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR 'value-parameter it: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
                      arg1: CONST String type=kotlin.String value='foo'
              CALLABLE_REFERENCE '<anonymous>(KCallable<*>): Boolean' type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
          block: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(foo: kotlin.reflect.KCallable<*>): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(KCallable<*>): Unit'
                  CALL 'assertEquals(KType, KType, String? = ...): Unit' type=kotlin.Unit operator=null
                    expected: CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
                      $this: GET_VAR 'value-parameter foo: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
                    actual: CALL 'single() on List<KType>: KType' type=kotlin.reflect.KType operator=null
                      $receiver: CALL '<get-upperBounds>(): List<KType>' type=kotlin.collections.List<kotlin.reflect.KType> operator=GET_PROPERTY
                        $this: CALL 'single() on List<KTypeParameter>: KTypeParameter' type=kotlin.reflect.KTypeParameter operator=null
                          $receiver: CALL '<get-typeParameters>(): List<KTypeParameter>' type=kotlin.collections.List<kotlin.reflect.KTypeParameter> operator=GET_PROPERTY
                            $this: GET_VAR 'value-parameter foo: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
            CALLABLE_REFERENCE '<anonymous>(KCallable<*>): Unit' type=(kotlin.reflect.KCallable<*>) -> kotlin.Unit operator=LAMBDA
        VAR val recursiveGenericTypeParameter: kotlin.reflect.KTypeParameter
          CALL 'single() on List<KTypeParameter>: KTypeParameter' type=kotlin.reflect.KTypeParameter operator=null
            $receiver: CALL '<get-typeParameters>(): List<KTypeParameter>' type=kotlin.collections.List<kotlin.reflect.KTypeParameter> operator=GET_PROPERTY
              $this: CLASS_REFERENCE 'RecursiveGeneric' type=kotlin.reflect.KClass<RecursiveGeneric<*>>
        VAR val recursiveGenericBound: kotlin.reflect.KType
          CALL 'single() on List<KType>: KType' type=kotlin.reflect.KType operator=null
            $receiver: CALL '<get-upperBounds>(): List<KType>' type=kotlin.collections.List<kotlin.reflect.KType> operator=GET_PROPERTY
              $this: GET_VAR 'recursiveGenericTypeParameter: KTypeParameter' type=kotlin.reflect.KTypeParameter operator=null
        CALL 'assertEquals(KClassifier?, KClassifier?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CLASS_REFERENCE 'Enum' type=kotlin.reflect.KClass<kotlin.Enum<*>>
          actual: CALL '<get-classifier>(): KClassifier?' type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
            $this: GET_VAR 'recursiveGenericBound: KType' type=kotlin.reflect.KType operator=null
        CALL 'let((KTypeProjection) -> Unit) on KTypeProjection: Unit' type=kotlin.Unit operator=null
          $receiver: CALL 'single() on List<KTypeProjection>: KTypeProjection' type=kotlin.reflect.KTypeProjection operator=null
            $receiver: CALL '<get-arguments>(): List<KTypeProjection>' type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=GET_PROPERTY
              $this: GET_VAR 'recursiveGenericBound: KType' type=kotlin.reflect.KType operator=null
          block: BLOCK type=(kotlin.reflect.KTypeProjection) -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(projection: kotlin.reflect.KTypeProjection): kotlin.Unit
              BLOCK_BODY
                CALL 'assertEquals(KVariance?, KVariance?, String? = ...): Unit' type=kotlin.Unit operator=null
                  expected: GET_ENUM_VALUE 'INVARIANT' type=kotlin.reflect.KVariance
                  actual: CALL '<get-variance>(): KVariance?' type=kotlin.reflect.KVariance? operator=GET_PROPERTY
                    $this: GET_VAR 'value-parameter projection: KTypeProjection' type=kotlin.reflect.KTypeProjection operator=null
                RETURN type=kotlin.Nothing from='<anonymous>(KTypeProjection): Unit'
                  CALL 'assertEquals(KClassifier?, KClassifier?, String? = ...): Unit' type=kotlin.Unit operator=null
                    expected: GET_VAR 'recursiveGenericTypeParameter: KTypeParameter' type=kotlin.reflect.KTypeParameter operator=null
                    actual: CALL '<get-classifier>(): KClassifier?' type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
                      $this: BLOCK type=kotlin.reflect.KType operator=EXCLEXCL
                        VAR val tmp0_notnull: kotlin.reflect.KType?
                          CALL '<get-type>(): KType?' type=kotlin.reflect.KType? operator=GET_PROPERTY
                            $this: GET_VAR 'value-parameter projection: KTypeProjection' type=kotlin.reflect.KTypeProjection operator=null
                        WHEN type=kotlin.reflect.KType operator=null
                          if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                            arg0: GET_VAR 'tmp0_notnull: KType?' type=kotlin.reflect.KType? operator=null
                            arg1: CONST Null type=kotlin.Nothing? value='null'
                          then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                          else: GET_VAR 'tmp0_notnull: KType?' type=kotlin.reflect.KType? operator=null
            CALLABLE_REFERENCE '<anonymous>(KTypeProjection): Unit' type=(kotlin.reflect.KTypeProjection) -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
