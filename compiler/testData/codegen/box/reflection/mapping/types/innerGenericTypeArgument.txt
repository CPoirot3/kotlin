MODULE <test-module>
  FILE /innerGenericTypeArgument.kt
    CLASS CLASS Outer
      CONSTRUCTOR public constructor Outer<A, B>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Outer'
      CLASS CLASS Inner
        CONSTRUCTOR public constructor Inner<C, D>()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
            INSTANCE_INITIALIZER_CALL classDescriptor='Inner'
        CLASS CLASS Innermost
          CONSTRUCTOR public constructor Innermost<E, F>()
            BLOCK_BODY
              DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
              INSTANCE_INITIALIZER_CALL classDescriptor='Innermost'
    FUN public fun foo(): Outer<kotlin.Int, kotlin.Number>.Inner<kotlin.String, kotlin.Float>.Innermost<kotlin.Any, kotlin.Any?>
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'assertEquals(List<Type>, List<Type>, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CALL 'listOf(vararg Class<out Any>): List<Class<out Any>>' type=kotlin.collections.List<java.lang.Class<out kotlin.Any>> operator=null
            elements: VARARG type=Array<out Class<out Any>> varargElementType=Class<out Any>
              CALL '<get-java>() on KClass<Any>: Class<Any>' type=java.lang.Class<kotlin.Any> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'Any' type=kotlin.reflect.KClass<kotlin.Any>
              CALL '<get-java>() on KClass<Any>: Class<Any>' type=java.lang.Class<kotlin.Any> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'Any' type=kotlin.reflect.KClass<kotlin.Any>
              CALL '<get-java>() on KClass<String>: Class<String>' type=java.lang.Class<kotlin.String> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'String' type=kotlin.reflect.KClass<kotlin.String>
              CALL '<get-javaObjectType>() on KClass<Float>: Class<Float>' type=java.lang.Class<kotlin.Float> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'Float' type=kotlin.reflect.KClass<kotlin.Float>
              CALL '<get-javaObjectType>() on KClass<Int>: Class<Int>' type=java.lang.Class<kotlin.Int> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'Int' type=kotlin.reflect.KClass<kotlin.Int>
              CALL '<get-java>() on KClass<Number>: Class<Number>' type=java.lang.Class<kotlin.Number> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'Number' type=kotlin.reflect.KClass<kotlin.Number>
          actual: CALL 'map((KTypeProjection) -> Type) on Iterable<KTypeProjection>: List<Type>' type=kotlin.collections.List<java.lang.reflect.Type> operator=null
            $receiver: CALL '<get-arguments>(): List<KTypeProjection>' type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=GET_PROPERTY
              $this: CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
                $this: CALLABLE_REFERENCE 'foo(): Outer<Int, Number>.Inner<String, Float>.Innermost<Any, Any?>' type=kotlin.reflect.KFunction0<Outer<kotlin.Int, kotlin.Number>.Inner<kotlin.String, kotlin.Float>.Innermost<kotlin.Any, kotlin.Any?>> operator=null
            transform: BLOCK type=(kotlin.reflect.KTypeProjection) -> java.lang.reflect.Type operator=LAMBDA
              FUN local final fun <anonymous>(it: kotlin.reflect.KTypeProjection): java.lang.reflect.Type
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(KTypeProjection): Type'
                    CALL '<get-javaType>() on KType: Type' type=java.lang.reflect.Type operator=GET_PROPERTY
                      $receiver: BLOCK type=kotlin.reflect.KType operator=EXCLEXCL
                        VAR val tmp0_notnull: kotlin.reflect.KType?
                          CALL '<get-type>(): KType?' type=kotlin.reflect.KType? operator=GET_PROPERTY
                            $this: GET_VAR 'value-parameter it: KTypeProjection' type=kotlin.reflect.KTypeProjection operator=null
                        WHEN type=kotlin.reflect.KType operator=null
                          if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                            arg0: GET_VAR 'tmp0_notnull: KType?' type=kotlin.reflect.KType? operator=null
                            arg1: CONST Null type=kotlin.Nothing? value='null'
                          then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                          else: GET_VAR 'tmp0_notnull: KType?' type=kotlin.reflect.KType? operator=null
              CALLABLE_REFERENCE '<anonymous>(KTypeProjection): Type' type=(kotlin.reflect.KTypeProjection) -> java.lang.reflect.Type operator=LAMBDA
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
