MODULE <test-module>
  FILE /memberFunctions.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      FUN public final fun foo(t: kotlin.Long?): kotlin.Long
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='foo(Long?): Long'
            BLOCK type=kotlin.Long operator=EXCLEXCL
              VAR val tmp0_notnull: kotlin.Long?
                GET_VAR 'value-parameter t: Long?' type=kotlin.Long? operator=null
              WHEN type=kotlin.Long operator=null
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR 'tmp0_notnull: Long?' type=kotlin.Long? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                else: GET_VAR 'tmp0_notnull: Long?' type=kotlin.Long? operator=null
    CLASS OBJECT O
      CONSTRUCTOR private constructor O()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='O'
      FUN @kotlin.jvm.JvmStatic public final fun bar(a: A): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='bar(A): String'
            CONST String type=kotlin.String value=''
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val foo: kotlin.reflect.KFunction2<A, kotlin.Long?, kotlin.Long>
          CALLABLE_REFERENCE 'foo(Long?): Long' type=kotlin.reflect.KFunction2<A, kotlin.Long?, kotlin.Long> operator=null
        CALL 'assertEquals(List<Type>, List<Type>, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CALL 'listOf(vararg Class<out Any>): List<Class<out Any>>' type=kotlin.collections.List<java.lang.Class<out kotlin.Any>> operator=null
            elements: VARARG type=Array<out Class<out Any>> varargElementType=Class<out Any>
              CALL '<get-java>() on KClass<A>: Class<A>' type=java.lang.Class<A> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'A' type=kotlin.reflect.KClass<A>
              CALL '<get-java>() on KClass<Long>: Class<Long>' type=java.lang.Class<java.lang.Long> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'Long' type=kotlin.reflect.KClass<java.lang.Long>
          actual: CALL 'map((KParameter) -> Type) on Iterable<KParameter>: List<Type>' type=kotlin.collections.List<java.lang.reflect.Type> operator=null
            $receiver: CALL '<get-parameters>(): List<KParameter>' type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
              $this: GET_VAR 'foo: KFunction2<A, Long?, Long>' type=kotlin.reflect.KFunction2<A, kotlin.Long?, kotlin.Long> operator=null
            transform: BLOCK type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
              FUN local final fun <anonymous>(it: kotlin.reflect.KParameter): java.lang.reflect.Type
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(KParameter): Type'
                    CALL '<get-javaType>() on KType: Type' type=java.lang.reflect.Type operator=GET_PROPERTY
                      $receiver: CALL '<get-type>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: GET_VAR 'value-parameter it: KParameter' type=kotlin.reflect.KParameter operator=null
              CALLABLE_REFERENCE '<anonymous>(KParameter): Type' type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
        CALL 'assertEquals(Type!, Type!, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_BACKING_FIELD 'TYPE: Class<Long!>!' type=java.lang.Class<kotlin.Long!>! operator=GET_PROPERTY
          actual: CALL '<get-javaType>() on KType: Type' type=java.lang.reflect.Type operator=GET_PROPERTY
            $receiver: CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
              $this: GET_VAR 'foo: KFunction2<A, Long?, Long>' type=kotlin.reflect.KFunction2<A, kotlin.Long?, kotlin.Long> operator=null
        VAR val bar: kotlin.reflect.KCallable<*>
          CALL 'single((KCallable<*>) -> Boolean) on Iterable<KCallable<*>>: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
            $receiver: CALL '<get-members>(): Collection<KCallable<*>>' type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
              $this: CLASS_REFERENCE 'O' type=kotlin.reflect.KClass<O>
            predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(KCallable<*>): Boolean'
                    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                      arg0: CALL '<get-name>(): String' type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR 'value-parameter it: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
                      arg1: CONST String type=kotlin.String value='bar'
              CALLABLE_REFERENCE '<anonymous>(KCallable<*>): Boolean' type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
        CALL 'assertEquals(List<Type>, List<Type>, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CALL 'listOf(vararg Class<out Any>): List<Class<out Any>>' type=kotlin.collections.List<java.lang.Class<out kotlin.Any>> operator=null
            elements: VARARG type=Array<out Class<out Any>> varargElementType=Class<out Any>
              CALL '<get-java>() on KClass<O>: Class<O>' type=java.lang.Class<O> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'O' type=kotlin.reflect.KClass<O>
              CALL '<get-java>() on KClass<A>: Class<A>' type=java.lang.Class<A> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'A' type=kotlin.reflect.KClass<A>
          actual: CALL 'map((KParameter) -> Type) on Iterable<KParameter>: List<Type>' type=kotlin.collections.List<java.lang.reflect.Type> operator=null
            $receiver: CALL '<get-parameters>(): List<KParameter>' type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
              $this: GET_VAR 'bar: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
            transform: BLOCK type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
              FUN local final fun <anonymous>(it: kotlin.reflect.KParameter): java.lang.reflect.Type
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(KParameter): Type'
                    CALL '<get-javaType>() on KType: Type' type=java.lang.reflect.Type operator=GET_PROPERTY
                      $receiver: CALL '<get-type>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: GET_VAR 'value-parameter it: KParameter' type=kotlin.reflect.KParameter operator=null
              CALLABLE_REFERENCE '<anonymous>(KParameter): Type' type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
        CALL 'assertEquals(Type, Type, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CALL '<get-java>() on KClass<String>: Class<String>' type=java.lang.Class<kotlin.String> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'String' type=kotlin.reflect.KClass<kotlin.String>
          actual: CALL '<get-javaType>() on KType: Type' type=java.lang.reflect.Type operator=GET_PROPERTY
            $receiver: CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
              $this: GET_VAR 'bar: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
