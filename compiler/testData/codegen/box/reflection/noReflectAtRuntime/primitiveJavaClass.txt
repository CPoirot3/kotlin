MODULE <test-module>
  FILE /primitiveJavaClass.kt
    FUN public fun check(name: kotlin.String, c: java.lang.Class<*>): kotlin.Unit
      BLOCK_BODY
        CALL 'assertEquals(String!, String!, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: GET_VAR 'value-parameter name: String' type=kotlin.String operator=null
          actual: CALL '<get-simpleName>() on Class<*>: String!' type=kotlin.String! operator=GET_PROPERTY
            $receiver: GET_VAR 'value-parameter c: Class<*>' type=java.lang.Class<*> operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'check(String, Class<*>): Unit' type=kotlin.Unit operator=null
          name: CONST String type=kotlin.String value='boolean'
          c: CALL '<get-java>() on KClass<Boolean>: Class<Boolean>' type=java.lang.Class<kotlin.Boolean> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Boolean' type=kotlin.reflect.KClass<kotlin.Boolean>
        CALL 'check(String, Class<*>): Unit' type=kotlin.Unit operator=null
          name: CONST String type=kotlin.String value='byte'
          c: CALL '<get-java>() on KClass<Byte>: Class<Byte>' type=java.lang.Class<kotlin.Byte> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Byte' type=kotlin.reflect.KClass<kotlin.Byte>
        CALL 'check(String, Class<*>): Unit' type=kotlin.Unit operator=null
          name: CONST String type=kotlin.String value='char'
          c: CALL '<get-java>() on KClass<Char>: Class<Char>' type=java.lang.Class<kotlin.Char> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Char' type=kotlin.reflect.KClass<kotlin.Char>
        CALL 'check(String, Class<*>): Unit' type=kotlin.Unit operator=null
          name: CONST String type=kotlin.String value='short'
          c: CALL '<get-java>() on KClass<Short>: Class<Short>' type=java.lang.Class<kotlin.Short> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Short' type=kotlin.reflect.KClass<kotlin.Short>
        CALL 'check(String, Class<*>): Unit' type=kotlin.Unit operator=null
          name: CONST String type=kotlin.String value='int'
          c: CALL '<get-java>() on KClass<Int>: Class<Int>' type=java.lang.Class<kotlin.Int> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Int' type=kotlin.reflect.KClass<kotlin.Int>
        CALL 'check(String, Class<*>): Unit' type=kotlin.Unit operator=null
          name: CONST String type=kotlin.String value='float'
          c: CALL '<get-java>() on KClass<Float>: Class<Float>' type=java.lang.Class<kotlin.Float> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Float' type=kotlin.reflect.KClass<kotlin.Float>
        CALL 'check(String, Class<*>): Unit' type=kotlin.Unit operator=null
          name: CONST String type=kotlin.String value='long'
          c: CALL '<get-java>() on KClass<Long>: Class<Long>' type=java.lang.Class<kotlin.Long> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Long' type=kotlin.reflect.KClass<kotlin.Long>
        CALL 'check(String, Class<*>): Unit' type=kotlin.Unit operator=null
          name: CONST String type=kotlin.String value='double'
          c: CALL '<get-java>() on KClass<Double>: Class<Double>' type=java.lang.Class<kotlin.Double> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE 'Double' type=kotlin.reflect.KClass<kotlin.Double>
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
