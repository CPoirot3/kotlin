MODULE <test-module>
  FILE /typeToStringInnerGeneric.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A<T1>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      CLASS CLASS B
        CONSTRUCTOR public constructor B<T2, T3>()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
            INSTANCE_INITIALIZER_CALL classDescriptor='B'
        CLASS CLASS C
          CONSTRUCTOR public constructor C<T4>()
            BLOCK_BODY
              DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
              INSTANCE_INITIALIZER_CALL classDescriptor='C'
    FUN public fun foo(): A<kotlin.Int>.B<kotlin.Double, kotlin.Float>.C<kotlin.Long>
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='A<kotlin.Int>.B<kotlin.Double, kotlin.Float>.C<kotlin.Long>'
          actual: CALL 'toString(): String' type=kotlin.String operator=null
            $this: CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
              $this: CALLABLE_REFERENCE 'foo(): A<Int>.B<Double, Float>.C<Long>' type=kotlin.reflect.KFunction0<A<kotlin.Int>.B<kotlin.Double, kotlin.Float>.C<kotlin.Long>> operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
