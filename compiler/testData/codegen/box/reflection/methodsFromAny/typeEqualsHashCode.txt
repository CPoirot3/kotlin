MODULE <test-module>
  FILE /typeEqualsHashCode.kt
    FUN public fun unit(p: kotlin.Unit): kotlin.Unit
      BLOCK_BODY
    FUN public fun nullable(s: kotlin.String): kotlin.String?
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='nullable(String): String?'
          GET_VAR 'value-parameter s: String' type=kotlin.String operator=null
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      FUN public final fun <T> typeParam(t: T): T
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='typeParam(T): T'
            GET_VAR 'value-parameter t: T' type=T operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        FUN local final fun check(t1: kotlin.reflect.KType, t2: kotlin.reflect.KType): kotlin.Unit
          BLOCK_BODY
            CALL 'assertEquals(KType, KType, String? = ...): Unit' type=kotlin.Unit operator=null
              expected: GET_VAR 'value-parameter t1: KType' type=kotlin.reflect.KType operator=null
              actual: GET_VAR 'value-parameter t2: KType' type=kotlin.reflect.KType operator=null
            CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
              expected: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                $this: GET_VAR 'value-parameter t1: KType' type=kotlin.reflect.KType operator=null
              actual: CALL 'hashCode(): Int' type=kotlin.Int operator=null
                $this: GET_VAR 'value-parameter t2: KType' type=kotlin.reflect.KType operator=null
        CALL 'check(KType, KType): Unit' type=kotlin.Unit operator=null
          t1: CALL '<get-type>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: CALL 'single() on List<KParameter>: KParameter' type=kotlin.reflect.KParameter operator=null
              $receiver: CALL '<get-parameters>(): List<KParameter>' type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
                $this: CALLABLE_REFERENCE 'unit(Unit): Unit' type=kotlin.reflect.KFunction1<kotlin.Unit, kotlin.Unit> operator=null
          t2: CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: CALLABLE_REFERENCE 'unit(Unit): Unit' type=kotlin.reflect.KFunction1<kotlin.Unit, kotlin.Unit> operator=null
        CALL 'assertNotEquals(KType, KType, String? = ...): Unit' type=kotlin.Unit operator=null
          illegal: CALL '<get-type>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: CALL 'single() on List<KParameter>: KParameter' type=kotlin.reflect.KParameter operator=null
              $receiver: CALL '<get-parameters>(): List<KParameter>' type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
                $this: CALLABLE_REFERENCE 'nullable(String): String?' type=kotlin.reflect.KFunction1<kotlin.String, kotlin.String?> operator=null
          actual: CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: CALLABLE_REFERENCE 'nullable(String): String?' type=kotlin.reflect.KFunction1<kotlin.String, kotlin.String?> operator=null
        VAR val typeParam: kotlin.reflect.KCallable<*>
          CALL 'single((KCallable<*>) -> Boolean) on Iterable<KCallable<*>>: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
            $receiver: CALL '<get-members>(): Collection<KCallable<*>>' type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
              $this: CLASS_REFERENCE 'A' type=kotlin.reflect.KClass<A>
            predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(KCallable<*>): Boolean'
                    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                      arg0: CALL '<get-name>(): String' type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR 'value-parameter it: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
                      arg1: CONST String type=kotlin.String value='typeParam'
              CALLABLE_REFERENCE '<anonymous>(KCallable<*>): Boolean' type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
        CALL 'check(KType, KType): Unit' type=kotlin.Unit operator=null
          t1: CALL '<get-type>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: CALL 'last() on List<KParameter>: KParameter' type=kotlin.reflect.KParameter operator=null
              $receiver: CALL '<get-parameters>(): List<KParameter>' type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
                $this: GET_VAR 'typeParam: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
          t2: CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: GET_VAR 'typeParam: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
