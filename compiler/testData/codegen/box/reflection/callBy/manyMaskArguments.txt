MODULE <test-module>
  FILE /manyMaskArguments.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      FUN public final fun foo(p01: kotlin.Int = ..., p02: kotlin.Int = ..., p03: kotlin.Int = ..., p04: kotlin.Int = ..., p05: kotlin.Int = ..., p06: kotlin.Int = ..., p07: kotlin.Int = ..., p08: kotlin.Int = ..., p09: kotlin.Int = ..., p10: kotlin.Int = ..., p11: kotlin.Int = ..., p12: kotlin.Int = ..., p13: kotlin.Int = ..., p14: kotlin.Int = ..., p15: kotlin.Int = ..., p16: kotlin.Int = ..., p17: kotlin.Int = ..., p18: kotlin.Int = ..., p19: kotlin.Int = ..., p20: kotlin.Int = ..., p21: kotlin.Int = ..., p22: kotlin.Int = ..., p23: kotlin.Int = ..., p24: kotlin.Int = ..., p25: kotlin.Int = ..., p26: kotlin.Int = ..., p27: kotlin.Int = ..., p28: kotlin.Int = ..., p29: kotlin.Int = ..., p30: kotlin.Int = ..., p31: kotlin.Int = ..., p32: kotlin.Int = ..., p33: kotlin.Int = ..., p34: kotlin.Int = ..., p35: kotlin.Int = ..., p36: kotlin.Int = ..., p37: kotlin.Int = ..., p38: kotlin.Int = ..., p39: kotlin.Int = ..., p40: kotlin.Int = ..., p41: kotlin.Int = ..., p42: kotlin.Int, p43: kotlin.Int = ..., p44: kotlin.Int = ..., p45: kotlin.Int = ..., p46: kotlin.Int = ..., p47: kotlin.Int = ..., p48: kotlin.Int = ..., p49: kotlin.Int = ..., p50: kotlin.Int = ..., p51: kotlin.Int = ..., p52: kotlin.Int = ..., p53: kotlin.Int = ..., p54: kotlin.Int = ..., p55: kotlin.Int = ..., p56: kotlin.Int = ..., p57: kotlin.Int = ..., p58: kotlin.Int = ..., p59: kotlin.Int = ..., p60: kotlin.Int = ..., p61: kotlin.Int = ..., p62: kotlin.Int = ..., p63: kotlin.Int = ..., p64: kotlin.Int = ..., p65: kotlin.Int = ..., p66: kotlin.Int = ..., p67: kotlin.Int = ..., p68: kotlin.Int = ..., p69: kotlin.Int = ..., p70: kotlin.Int = ...): kotlin.Unit
        p01: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='1'
        p02: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='2'
        p03: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='3'
        p04: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='4'
        p05: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='5'
        p06: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='6'
        p07: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='7'
        p08: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='8'
        p09: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='9'
        p10: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='10'
        p11: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='11'
        p12: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='12'
        p13: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='13'
        p14: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='14'
        p15: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='15'
        p16: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='16'
        p17: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='17'
        p18: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='18'
        p19: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='19'
        p20: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='20'
        p21: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='21'
        p22: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='22'
        p23: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='23'
        p24: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='24'
        p25: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='25'
        p26: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='26'
        p27: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='27'
        p28: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='28'
        p29: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='29'
        p30: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='30'
        p31: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='31'
        p32: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='32'
        p33: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='33'
        p34: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='34'
        p35: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='35'
        p36: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='36'
        p37: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='37'
        p38: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='38'
        p39: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='39'
        p40: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='40'
        p41: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='41'
        p43: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='43'
        p44: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='44'
        p45: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='45'
        p46: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='46'
        p47: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='47'
        p48: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='48'
        p49: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='49'
        p50: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='50'
        p51: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='51'
        p52: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='52'
        p53: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='53'
        p54: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='54'
        p55: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='55'
        p56: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='56'
        p57: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='57'
        p58: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='58'
        p59: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='59'
        p60: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='60'
        p61: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='61'
        p62: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='62'
        p63: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='63'
        p64: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='64'
        p65: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='65'
        p66: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='66'
        p67: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='67'
        p68: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='68'
        p69: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='69'
        p70: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='70'
        BLOCK_BODY
          CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
            expected: CONST Int type=kotlin.Int value='1'
            actual: GET_VAR 'value-parameter p01: Int = ...' type=kotlin.Int operator=null
          CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
            expected: CONST Int type=kotlin.Int value='41'
            actual: GET_VAR 'value-parameter p41: Int = ...' type=kotlin.Int operator=null
          CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
            expected: CONST Int type=kotlin.Int value='239'
            actual: GET_VAR 'value-parameter p42: Int' type=kotlin.Int operator=null
          CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
            expected: CONST Int type=kotlin.Int value='43'
            actual: GET_VAR 'value-parameter p43: Int = ...' type=kotlin.Int operator=null
          CALL 'assertEquals(Int, Int, String? = ...): Unit' type=kotlin.Unit operator=null
            expected: CONST Int type=kotlin.Int value='70'
            actual: GET_VAR 'value-parameter p70: Int = ...' type=kotlin.Int operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val f: kotlin.reflect.KCallable<*>
          CALL 'single((KCallable<*>) -> Boolean) on Iterable<KCallable<*>>: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
            $receiver: CALL '<get-members>(): Collection<KCallable<*>>' type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
              $this: CLASS_REFERENCE 'A' type=kotlin.reflect.KClass<A>
            predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(KCallable<*>): Boolean'
                    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                      arg0: CALL '<get-name>(): String' type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR 'value-parameter it: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
                      arg1: CONST String type=kotlin.String value='foo'
              CALLABLE_REFERENCE '<anonymous>(KCallable<*>): Boolean' type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
        VAR val parameters: kotlin.collections.List<kotlin.reflect.KParameter>
          CALL '<get-parameters>(): List<KParameter>' type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
            $this: GET_VAR 'f: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
        CALL 'callBy(Map<KParameter, Any?>): Any?' type=kotlin.Any? operator=null
          $this: GET_VAR 'f: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
          args: CALL 'mapOf(vararg Pair<KParameter, Any>): Map<KParameter, Any>' type=kotlin.collections.Map<kotlin.reflect.KParameter, kotlin.Any> operator=null
            pairs: VARARG type=Array<out Pair<KParameter, Any>> varargElementType=Pair<KParameter, Any>
              CALL 'to(A) on KParameter: Pair<KParameter, A>' type=kotlin.Pair<kotlin.reflect.KParameter, A> operator=null
                $receiver: CALL 'first() on List<KParameter>: KParameter' type=kotlin.reflect.KParameter operator=null
                  $receiver: GET_VAR 'parameters: List<KParameter>' type=kotlin.collections.List<kotlin.reflect.KParameter> operator=null
                that: CALL 'constructor A()' type=A operator=null
              CALL 'to(Int) on KParameter: Pair<KParameter, Int>' type=kotlin.Pair<kotlin.reflect.KParameter, kotlin.Int> operator=null
                $receiver: CALL 'single((KParameter) -> Boolean) on Iterable<KParameter>: KParameter' type=kotlin.reflect.KParameter operator=null
                  $receiver: GET_VAR 'parameters: List<KParameter>' type=kotlin.collections.List<kotlin.reflect.KParameter> operator=null
                  predicate: BLOCK type=(kotlin.reflect.KParameter) -> kotlin.Boolean operator=LAMBDA
                    FUN local final fun <anonymous>(it: kotlin.reflect.KParameter): kotlin.Boolean
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from='<anonymous>(KParameter): Boolean'
                          CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                            arg0: CALL '<get-name>(): String?' type=kotlin.String? operator=GET_PROPERTY
                              $this: GET_VAR 'value-parameter it: KParameter' type=kotlin.reflect.KParameter operator=null
                            arg1: CONST String type=kotlin.String value='p42'
                    CALLABLE_REFERENCE '<anonymous>(KParameter): Boolean' type=(kotlin.reflect.KParameter) -> kotlin.Boolean operator=LAMBDA
                that: CONST Int type=kotlin.Int value='239'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
