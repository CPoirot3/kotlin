MODULE <test-module>
  FILE /privatePropertyCallIsAccessibleOnAccessors.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(foo: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'foo: String' type=kotlin.Unit operator=null
            receiver: THIS of 'A' type=A
            value: GET_VAR 'value-parameter foo: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      PROPERTY private final var foo: kotlin.String
        EXPRESSION_BODY
          GET_VAR 'value-parameter foo: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a: A
          CALL 'constructor A(String)' type=A operator=null
            foo: CONST String type=kotlin.String value=''
        VAR val foo: kotlin.reflect.KMutableProperty1<A, kotlin.String>
          TYPE_OP operator=CAST typeOperand=kotlin.reflect.KMutableProperty1<A, kotlin.String>
            CALL 'single() on Iterable<KProperty1<A, *>>: KProperty1<A, *>' type=kotlin.reflect.KProperty1<A, *> operator=null
              $receiver: CALL '<get-memberProperties>() on KClass<A>: Collection<KProperty1<A, *>>' type=kotlin.collections.Collection<kotlin.reflect.KProperty1<A, *>> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'A' type=kotlin.reflect.KClass<A>
        CALL 'assertTrue(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL 'not(): Boolean' type=kotlin.Boolean operator=EXCL
            $this: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
              $receiver: GET_VAR 'foo: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL 'assertTrue(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL 'not(): Boolean' type=kotlin.Boolean operator=EXCL
            $this: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
              $receiver: CALL '<get-getter>(): KProperty1.Getter<A, String>' type=kotlin.reflect.KProperty1.Getter<A, kotlin.String> operator=GET_PROPERTY
                $this: GET_VAR 'foo: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL 'assertTrue(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL 'not(): Boolean' type=kotlin.Boolean operator=EXCL
            $this: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
              $receiver: CALL '<get-setter>(): KMutableProperty1.Setter<A, String>' type=kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String> operator=GET_PROPERTY
                $this: GET_VAR 'foo: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        VAR val setter: kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String>
          CALL '<get-setter>(): KMutableProperty1.Setter<A, String>' type=kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String> operator=GET_PROPERTY
            $this: GET_VAR 'foo: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL '<set-isAccessible>(Boolean) on KCallable<*>: Unit' type=kotlin.Unit operator=EQ
          $receiver: GET_VAR 'setter: KMutableProperty1.Setter<A, String>' type=kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String> operator=null
          value: CONST Boolean type=kotlin.Boolean value='true'
        CALL 'assertTrue(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
            $receiver: GET_VAR 'setter: KMutableProperty1.Setter<A, String>' type=kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String> operator=null
        CALL 'assertTrue(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
            $receiver: CALL '<get-setter>(): KMutableProperty1.Setter<A, String>' type=kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String> operator=GET_PROPERTY
              $this: GET_VAR 'foo: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL 'assertTrue(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
            $receiver: GET_VAR 'foo: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL 'assertTrue(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
            $receiver: CALL '<get-getter>(): KProperty1.Getter<A, String>' type=kotlin.reflect.KProperty1.Getter<A, kotlin.String> operator=GET_PROPERTY
              $this: GET_VAR 'foo: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL 'call(vararg Any?): Unit' type=kotlin.Unit operator=null
          $this: GET_VAR 'setter: KMutableProperty1.Setter<A, String>' type=kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            GET_VAR 'a: A' type=A operator=null
            CONST String type=kotlin.String value='A'
        CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='A'
          actual: CALL 'call(vararg Any?): String' type=kotlin.String operator=null
            $this: CALL '<get-getter>(): KProperty1.Getter<A, String>' type=kotlin.reflect.KProperty1.Getter<A, kotlin.String> operator=GET_PROPERTY
              $this: GET_VAR 'foo: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
            args: VARARG type=Array<out Any?> varargElementType=Any?
              GET_VAR 'a: A' type=A operator=null
        CALL '<set-isAccessible>(Boolean) on KCallable<*>: Unit' type=kotlin.Unit operator=EQ
          $receiver: GET_VAR 'setter: KMutableProperty1.Setter<A, String>' type=kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String> operator=null
          value: CONST Boolean type=kotlin.Boolean value='false'
        CALL 'assertFalse(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
            $receiver: GET_VAR 'setter: KMutableProperty1.Setter<A, String>' type=kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String> operator=null
        CALL 'assertFalse(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
            $receiver: CALL '<get-setter>(): KMutableProperty1.Setter<A, String>' type=kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String> operator=GET_PROPERTY
              $this: GET_VAR 'foo: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL 'assertFalse(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
            $receiver: CALL '<get-getter>(): KProperty1.Getter<A, String>' type=kotlin.reflect.KProperty1.Getter<A, kotlin.String> operator=GET_PROPERTY
              $this: GET_VAR 'foo: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL 'assertFalse(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
            $receiver: GET_VAR 'foo: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        VAR val getter: kotlin.reflect.KProperty1.Getter<A, kotlin.String>
          CALL '<get-getter>(): KProperty1.Getter<A, String>' type=kotlin.reflect.KProperty1.Getter<A, kotlin.String> operator=GET_PROPERTY
            $this: GET_VAR 'foo: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL '<set-isAccessible>(Boolean) on KCallable<*>: Unit' type=kotlin.Unit operator=EQ
          $receiver: GET_VAR 'getter: KProperty1.Getter<A, String>' type=kotlin.reflect.KProperty1.Getter<A, kotlin.String> operator=null
          value: CONST Boolean type=kotlin.Boolean value='true'
        CALL 'assertTrue(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
            $receiver: GET_VAR 'setter: KMutableProperty1.Setter<A, String>' type=kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String> operator=null
        CALL 'assertTrue(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
            $receiver: CALL '<get-setter>(): KMutableProperty1.Setter<A, String>' type=kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String> operator=GET_PROPERTY
              $this: GET_VAR 'foo: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL 'assertTrue(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
            $receiver: GET_VAR 'foo: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL 'assertTrue(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
            $receiver: CALL '<get-getter>(): KProperty1.Getter<A, String>' type=kotlin.reflect.KProperty1.Getter<A, kotlin.String> operator=GET_PROPERTY
              $this: GET_VAR 'foo: KMutableProperty1<A, String>' type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL 'assertTrue(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-isAccessible>() on KCallable<*>: Boolean' type=kotlin.Boolean operator=GET_PROPERTY
            $receiver: GET_VAR 'getter: KProperty1.Getter<A, String>' type=kotlin.reflect.KProperty1.Getter<A, kotlin.String> operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
