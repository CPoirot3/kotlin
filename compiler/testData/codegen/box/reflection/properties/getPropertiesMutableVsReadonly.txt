MODULE <test-module>
  FILE /getPropertiesMutableVsReadonly.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(readonly: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'readonly: String' type=kotlin.Unit operator=null
            receiver: THIS of 'A' type=A
            value: GET_VAR 'value-parameter readonly: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      PROPERTY public final val readonly: kotlin.String
        EXPRESSION_BODY
          GET_VAR 'value-parameter readonly: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final var mutable: kotlin.String
        EXPRESSION_BODY
          CONST String type=kotlin.String value='before'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val props: kotlin.collections.Collection<kotlin.reflect.KProperty1<A, *>>
          CALL '<get-memberProperties>() on KClass<A>: Collection<KProperty1<A, *>>' type=kotlin.collections.Collection<kotlin.reflect.KProperty1<A, *>> operator=GET_PROPERTY
            $receiver: CALL '<get-kotlin>() on Class<A>: KClass<A>' type=kotlin.reflect.KClass<A> operator=GET_PROPERTY
              $receiver: CALL '<get-java>() on KClass<A>: Class<A>' type=java.lang.Class<A> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'A' type=kotlin.reflect.KClass<A>
        VAR val readonly: kotlin.reflect.KProperty1<A, *>
          CALL 'single((KProperty1<A, *>) -> Boolean) on Iterable<KProperty1<A, *>>: KProperty1<A, *>' type=kotlin.reflect.KProperty1<A, *> operator=null
            $receiver: GET_VAR 'props: Collection<KProperty1<A, *>>' type=kotlin.collections.Collection<kotlin.reflect.KProperty1<A, *>> operator=null
            predicate: BLOCK type=(kotlin.reflect.KProperty1<A, *>) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(it: kotlin.reflect.KProperty1<A, *>): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(KProperty1<A, *>): Boolean'
                    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                      arg0: CALL '<get-name>(): String' type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR 'value-parameter it: KProperty1<A, *>' type=kotlin.reflect.KProperty1<A, *> operator=null
                      arg1: CONST String type=kotlin.String value='readonly'
              CALLABLE_REFERENCE '<anonymous>(KProperty1<A, *>): Boolean' type=(kotlin.reflect.KProperty1<A, *>) -> kotlin.Boolean operator=LAMBDA
        CALL 'assert(Boolean, () -> Any): Unit' type=kotlin.Unit operator=null
          value: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.reflect.KMutableProperty1<A, *>
            GET_VAR 'readonly: KProperty1<A, *>' type=kotlin.reflect.KProperty1<A, *> operator=null
          lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): String'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='Fail 1: '
                    GET_VAR 'readonly: KProperty1<A, *>' type=kotlin.reflect.KProperty1<A, *> operator=null
            CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
        VAR val mutable: kotlin.reflect.KProperty1<A, *>
          CALL 'single((KProperty1<A, *>) -> Boolean) on Iterable<KProperty1<A, *>>: KProperty1<A, *>' type=kotlin.reflect.KProperty1<A, *> operator=null
            $receiver: GET_VAR 'props: Collection<KProperty1<A, *>>' type=kotlin.collections.Collection<kotlin.reflect.KProperty1<A, *>> operator=null
            predicate: BLOCK type=(kotlin.reflect.KProperty1<A, *>) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(it: kotlin.reflect.KProperty1<A, *>): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(KProperty1<A, *>): Boolean'
                    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                      arg0: CALL '<get-name>(): String' type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR 'value-parameter it: KProperty1<A, *>' type=kotlin.reflect.KProperty1<A, *> operator=null
                      arg1: CONST String type=kotlin.String value='mutable'
              CALLABLE_REFERENCE '<anonymous>(KProperty1<A, *>): Boolean' type=(kotlin.reflect.KProperty1<A, *>) -> kotlin.Boolean operator=LAMBDA
        CALL 'assert(Boolean, () -> Any): Unit' type=kotlin.Unit operator=null
          value: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.reflect.KMutableProperty1<A, *>
            GET_VAR 'mutable: KProperty1<A, *>' type=kotlin.reflect.KProperty1<A, *> operator=null
          lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): String'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='Fail 2: '
                    GET_VAR 'mutable: KProperty1<A, *>' type=kotlin.reflect.KProperty1<A, *> operator=null
            CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
        VAR val a: A
          CALL 'constructor A(String)' type=A operator=null
            readonly: CONST String type=kotlin.String value=''
        TYPE_OP operator=CAST typeOperand=kotlin.reflect.KMutableProperty1<A, kotlin.String>
          GET_VAR 'mutable: KProperty1<A, *>' type=kotlin.reflect.KProperty1<A, *> operator=null
        CALL 'assert(Boolean, () -> Any): Unit' type=kotlin.Unit operator=null
          value: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
            arg0: CALL 'get(A): String' type=kotlin.String operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.reflect.KProperty1<A, kotlin.String>
                GET_VAR 'mutable: KProperty1<A, *>' type=kotlin.reflect.KProperty1<A, *> operator=null
              receiver: GET_VAR 'a: A' type=A operator=null
            arg1: CONST String type=kotlin.String value='before'
          lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): String'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='Fail 3: '
                    CALL 'get(A): String' type=kotlin.String operator=null
                      $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.reflect.KProperty1<A, kotlin.String>
                        GET_VAR 'mutable: KProperty1<A, *>' type=kotlin.reflect.KProperty1<A, *> operator=null
                      receiver: GET_VAR 'a: A' type=A operator=null
            CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
        CALL 'set(A, String): Unit' type=kotlin.Unit operator=null
          $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.reflect.KMutableProperty1<A, kotlin.String>
            GET_VAR 'mutable: KProperty1<A, *>' type=kotlin.reflect.KProperty1<A, *> operator=null
          receiver: GET_VAR 'a: A' type=A operator=null
          value: CONST String type=kotlin.String value='OK'
        RETURN type=kotlin.Nothing from='box(): String'
          CALL 'get(A): String' type=kotlin.String operator=null
            $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.reflect.KProperty1<A, kotlin.String>
              GET_VAR 'mutable: KProperty1<A, *>' type=kotlin.reflect.KProperty1<A, *> operator=null
            receiver: GET_VAR 'a: A' type=A operator=null
