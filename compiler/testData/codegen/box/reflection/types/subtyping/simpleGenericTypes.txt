MODULE <test-module>
  FILE /simpleGenericTypes.kt
    CLASS CLASS G
      CONSTRUCTOR public constructor G<T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='G'
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor G()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
    FUN public fun gOfString(): G<kotlin.String>
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
    FUN public fun gOfInt(): G<kotlin.Int>
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val gs: kotlin.reflect.KType
          CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: CALLABLE_REFERENCE 'gOfString(): G<String>' type=kotlin.reflect.KFunction0<G<kotlin.String>> operator=null
        VAR val gi: kotlin.reflect.KType
          CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: CALLABLE_REFERENCE 'gOfInt(): G<Int>' type=kotlin.reflect.KFunction0<G<kotlin.Int>> operator=null
        VAR val a: kotlin.reflect.KType
          CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: CALLABLE_REFERENCE 'constructor A()' type=kotlin.reflect.KFunction0<A> operator=null
        CALL 'assertTrue(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL 'isSubtypeOf(KType) on KType: Boolean' type=kotlin.Boolean operator=null
            $receiver: GET_VAR 'a: KType' type=kotlin.reflect.KType operator=null
            other: GET_VAR 'gs: KType' type=kotlin.reflect.KType operator=null
        CALL 'assertTrue(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL 'isSupertypeOf(KType) on KType: Boolean' type=kotlin.Boolean operator=null
            $receiver: GET_VAR 'gs: KType' type=kotlin.reflect.KType operator=null
            other: GET_VAR 'a: KType' type=kotlin.reflect.KType operator=null
        CALL 'assertFalse(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL 'isSubtypeOf(KType) on KType: Boolean' type=kotlin.Boolean operator=null
            $receiver: GET_VAR 'a: KType' type=kotlin.reflect.KType operator=null
            other: GET_VAR 'gi: KType' type=kotlin.reflect.KType operator=null
        CALL 'assertFalse(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL 'isSupertypeOf(KType) on KType: Boolean' type=kotlin.Boolean operator=null
            $receiver: GET_VAR 'gi: KType' type=kotlin.reflect.KType operator=null
            other: GET_VAR 'a: KType' type=kotlin.reflect.KType operator=null
        CALL 'assertFalse(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL 'isSubtypeOf(KType) on KType: Boolean' type=kotlin.Boolean operator=null
            $receiver: GET_VAR 'gs: KType' type=kotlin.reflect.KType operator=null
            other: GET_VAR 'gi: KType' type=kotlin.reflect.KType operator=null
        CALL 'assertFalse(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL 'isSupertypeOf(KType) on KType: Boolean' type=kotlin.Boolean operator=null
            $receiver: GET_VAR 'gs: KType' type=kotlin.reflect.KType operator=null
            other: GET_VAR 'gi: KType' type=kotlin.reflect.KType operator=null
        CALL 'assertFalse(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL 'isSubtypeOf(KType) on KType: Boolean' type=kotlin.Boolean operator=null
            $receiver: GET_VAR 'gi: KType' type=kotlin.reflect.KType operator=null
            other: GET_VAR 'gs: KType' type=kotlin.reflect.KType operator=null
        CALL 'assertFalse(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL 'isSupertypeOf(KType) on KType: Boolean' type=kotlin.Boolean operator=null
            $receiver: GET_VAR 'gi: KType' type=kotlin.reflect.KType operator=null
            other: GET_VAR 'gs: KType' type=kotlin.reflect.KType operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
