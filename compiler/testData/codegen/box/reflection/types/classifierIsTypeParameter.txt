MODULE <test-module>
  FILE /classifierIsTypeParameter.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A<U>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      FUN public final fun <T> foo(): T
        BLOCK_BODY
          BLOCK type=kotlin.Nothing operator=EXCLEXCL
            VAR val tmp0_notnull: kotlin.Nothing?
              CONST Null type=kotlin.Nothing? value='null'
            WHEN type=kotlin.Nothing operator=null
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
              else: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
      FUN public final fun bar(): kotlin.Array<U>?
        BLOCK_BODY
          BLOCK type=kotlin.Nothing operator=EXCLEXCL
            VAR val tmp0_notnull: kotlin.Nothing?
              CONST Null type=kotlin.Nothing? value='null'
            WHEN type=kotlin.Nothing operator=null
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
              else: GET_VAR 'tmp0_notnull: Nothing?' type=kotlin.Nothing? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val t: kotlin.reflect.KType
          CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: CALL 'single((KCallable<*>) -> Boolean) on Iterable<KCallable<*>>: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
              $receiver: CALL '<get-members>(): Collection<KCallable<*>>' type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
                $this: CLASS_REFERENCE 'A' type=kotlin.reflect.KClass<A<*>>
              predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='<anonymous>(KCallable<*>): Boolean'
                      CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                        arg0: CALL '<get-name>(): String' type=kotlin.String operator=GET_PROPERTY
                          $this: GET_VAR 'value-parameter it: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
                        arg1: CONST String type=kotlin.String value='foo'
                CALLABLE_REFERENCE '<anonymous>(KCallable<*>): Boolean' type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
        CALL 'assertFalse(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-isMarkedNullable>(): Boolean' type=kotlin.Boolean operator=GET_PROPERTY
            $this: GET_VAR 't: KType' type=kotlin.reflect.KType operator=null
        VAR val tc: kotlin.reflect.KClassifier?
          CALL '<get-classifier>(): KClassifier?' type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
            $this: GET_VAR 't: KType' type=kotlin.reflect.KType operator=null
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.reflect.KTypeParameter
            GET_VAR 'tc: KClassifier?' type=kotlin.reflect.KClassifier? operator=null
          then: CALL 'fail(String? = ...): Nothing' type=kotlin.Nothing operator=null
            message: CALL 'toString() on Any?: String' type=kotlin.String operator=null
              $receiver: GET_VAR 'tc: KClassifier?' type=kotlin.reflect.KClassifier? operator=null
        CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='T'
          actual: CALL '<get-name>(): String' type=kotlin.String operator=GET_PROPERTY
            $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.reflect.KTypeParameter
              GET_VAR 'tc: KClassifier?' type=kotlin.reflect.KClassifier? operator=null
        VAR val u: kotlin.reflect.KType
          CALL '<get-returnType>(): KType' type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: CALL 'single((KCallable<*>) -> Boolean) on Iterable<KCallable<*>>: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
              $receiver: CALL '<get-members>(): Collection<KCallable<*>>' type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
                $this: CLASS_REFERENCE 'A' type=kotlin.reflect.KClass<A<*>>
              predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='<anonymous>(KCallable<*>): Boolean'
                      CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                        arg0: CALL '<get-name>(): String' type=kotlin.String operator=GET_PROPERTY
                          $this: GET_VAR 'value-parameter it: KCallable<*>' type=kotlin.reflect.KCallable<*> operator=null
                        arg1: CONST String type=kotlin.String value='bar'
                CALLABLE_REFERENCE '<anonymous>(KCallable<*>): Boolean' type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
        CALL 'assertTrue(Boolean, String? = ...): Unit' type=kotlin.Unit operator=null
          actual: CALL '<get-isMarkedNullable>(): Boolean' type=kotlin.Boolean operator=GET_PROPERTY
            $this: GET_VAR 'u: KType' type=kotlin.reflect.KType operator=null
        CALL 'assertEquals(KClassifier?, KClassifier?, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CLASS_REFERENCE 'Array' type=kotlin.reflect.KClass<kotlin.Array<kotlin.Any>>
          actual: CALL '<get-classifier>(): KClassifier?' type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
            $this: GET_VAR 'u: KType' type=kotlin.reflect.KType operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
