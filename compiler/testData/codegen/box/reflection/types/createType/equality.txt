MODULE <test-module>
  FILE /equality.kt
    CLASS CLASS Foo
      CONSTRUCTOR public constructor Foo<T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Foo'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'assertEquals(KType, KType, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CALL 'createType(List<KTypeProjection> = ..., Boolean = ..., List<Annotation> = ...) on KClassifier: KType' type=kotlin.reflect.KType operator=null
            $receiver: CLASS_REFERENCE 'String' type=kotlin.reflect.KClass<kotlin.String>
          actual: CALL 'createType(List<KTypeProjection> = ..., Boolean = ..., List<Annotation> = ...) on KClassifier: KType' type=kotlin.reflect.KType operator=null
            $receiver: CLASS_REFERENCE 'String' type=kotlin.reflect.KClass<kotlin.String>
        CALL 'assertEquals(KType, KType, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CALL 'createType(List<KTypeProjection> = ..., Boolean = ..., List<Annotation> = ...) on KClassifier: KType' type=kotlin.reflect.KType operator=null
            $receiver: CLASS_REFERENCE 'Foo' type=kotlin.reflect.KClass<Foo<*>>
            arguments: CALL 'listOf(KTypeProjection): List<KTypeProjection>' type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=null
              element: CALL '<get-STAR>(): KTypeProjection' type=kotlin.reflect.KTypeProjection operator=GET_PROPERTY
                $this: GET_OBJECT 'companion object of KTypeProjection' type=kotlin.reflect.KTypeProjection.Companion
          actual: CALL 'createType(List<KTypeProjection> = ..., Boolean = ..., List<Annotation> = ...) on KClassifier: KType' type=kotlin.reflect.KType operator=null
            $receiver: CLASS_REFERENCE 'Foo' type=kotlin.reflect.KClass<Foo<*>>
            arguments: CALL 'listOf(KTypeProjection): List<KTypeProjection>' type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=null
              element: CALL '<get-STAR>(): KTypeProjection' type=kotlin.reflect.KTypeProjection operator=GET_PROPERTY
                $this: GET_OBJECT 'companion object of KTypeProjection' type=kotlin.reflect.KTypeProjection.Companion
        VAR val i: kotlin.reflect.KType
          CALL 'createType(List<KTypeProjection> = ..., Boolean = ..., List<Annotation> = ...) on KClassifier: KType' type=kotlin.reflect.KType operator=null
            $receiver: CLASS_REFERENCE 'Int' type=kotlin.reflect.KClass<kotlin.Int>
        CALL 'assertEquals(KType, KType, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CALL 'createType(List<KTypeProjection> = ..., Boolean = ..., List<Annotation> = ...) on KClassifier: KType' type=kotlin.reflect.KType operator=null
            $receiver: CLASS_REFERENCE 'Foo' type=kotlin.reflect.KClass<Foo<*>>
            arguments: CALL 'listOf(KTypeProjection): List<KTypeProjection>' type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=null
              element: CALL 'invariant(KType): KTypeProjection' type=kotlin.reflect.KTypeProjection operator=null
                $this: GET_OBJECT 'companion object of KTypeProjection' type=kotlin.reflect.KTypeProjection.Companion
                type: GET_VAR 'i: KType' type=kotlin.reflect.KType operator=null
          actual: CALL 'createType(List<KTypeProjection> = ..., Boolean = ..., List<Annotation> = ...) on KClassifier: KType' type=kotlin.reflect.KType operator=null
            $receiver: CLASS_REFERENCE 'Foo' type=kotlin.reflect.KClass<Foo<*>>
            arguments: CALL 'listOf(KTypeProjection): List<KTypeProjection>' type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=null
              element: CALL 'invariant(KType): KTypeProjection' type=kotlin.reflect.KTypeProjection operator=null
                $this: GET_OBJECT 'companion object of KTypeProjection' type=kotlin.reflect.KTypeProjection.Companion
                type: GET_VAR 'i: KType' type=kotlin.reflect.KType operator=null
        CALL 'assertNotEquals(KType, KType, String? = ...): Unit' type=kotlin.Unit operator=null
          illegal: CALL 'createType(List<KTypeProjection> = ..., Boolean = ..., List<Annotation> = ...) on KClassifier: KType' type=kotlin.reflect.KType operator=null
            $receiver: CLASS_REFERENCE 'Foo' type=kotlin.reflect.KClass<Foo<*>>
            arguments: CALL 'listOf(KTypeProjection): List<KTypeProjection>' type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=null
              element: CALL 'contravariant(KType): KTypeProjection' type=kotlin.reflect.KTypeProjection operator=null
                $this: GET_OBJECT 'companion object of KTypeProjection' type=kotlin.reflect.KTypeProjection.Companion
                type: GET_VAR 'i: KType' type=kotlin.reflect.KType operator=null
          actual: CALL 'createType(List<KTypeProjection> = ..., Boolean = ..., List<Annotation> = ...) on KClassifier: KType' type=kotlin.reflect.KType operator=null
            $receiver: CLASS_REFERENCE 'Foo' type=kotlin.reflect.KClass<Foo<*>>
            arguments: CALL 'listOf(KTypeProjection): List<KTypeProjection>' type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=null
              element: CALL 'covariant(KType): KTypeProjection' type=kotlin.reflect.KTypeProjection operator=null
                $this: GET_OBJECT 'companion object of KTypeProjection' type=kotlin.reflect.KTypeProjection.Companion
                type: GET_VAR 'i: KType' type=kotlin.reflect.KType operator=null
        CALL 'assertNotEquals(KType, KType, String? = ...): Unit' type=kotlin.Unit operator=null
          illegal: CALL 'createType(List<KTypeProjection> = ..., Boolean = ..., List<Annotation> = ...) on KClassifier: KType' type=kotlin.reflect.KType operator=null
            $receiver: CLASS_REFERENCE 'Foo' type=kotlin.reflect.KClass<Foo<*>>
            arguments: CALL 'listOf(KTypeProjection): List<KTypeProjection>' type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=null
              element: CALL 'covariant(KType): KTypeProjection' type=kotlin.reflect.KTypeProjection operator=null
                $this: GET_OBJECT 'companion object of KTypeProjection' type=kotlin.reflect.KTypeProjection.Companion
                type: CALL 'createType(List<KTypeProjection> = ..., Boolean = ..., List<Annotation> = ...) on KClassifier: KType' type=kotlin.reflect.KType operator=null
                  $receiver: CLASS_REFERENCE 'Any' type=kotlin.reflect.KClass<kotlin.Any>
                  nullable: CONST Boolean type=kotlin.Boolean value='true'
          actual: CALL 'createType(List<KTypeProjection> = ..., Boolean = ..., List<Annotation> = ...) on KClassifier: KType' type=kotlin.reflect.KType operator=null
            $receiver: CLASS_REFERENCE 'Foo' type=kotlin.reflect.KClass<Foo<*>>
            arguments: CALL 'listOf(KTypeProjection): List<KTypeProjection>' type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=null
              element: CALL '<get-STAR>(): KTypeProjection' type=kotlin.reflect.KTypeProjection operator=GET_PROPERTY
                $this: GET_OBJECT 'companion object of KTypeProjection' type=kotlin.reflect.KTypeProjection.Companion
        CALL 'assertNotEquals(KType, KType, String? = ...): Unit' type=kotlin.Unit operator=null
          illegal: CALL 'createType(List<KTypeProjection> = ..., Boolean = ..., List<Annotation> = ...) on KClassifier: KType' type=kotlin.reflect.KType operator=null
            $receiver: CLASS_REFERENCE 'Foo' type=kotlin.reflect.KClass<Foo<*>>
            arguments: CALL 'listOf(KTypeProjection): List<KTypeProjection>' type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=null
              element: CALL '<get-STAR>(): KTypeProjection' type=kotlin.reflect.KTypeProjection operator=GET_PROPERTY
                $this: GET_OBJECT 'companion object of KTypeProjection' type=kotlin.reflect.KTypeProjection.Companion
            nullable: CONST Boolean type=kotlin.Boolean value='false'
          actual: CALL 'createType(List<KTypeProjection> = ..., Boolean = ..., List<Annotation> = ...) on KClassifier: KType' type=kotlin.reflect.KType operator=null
            $receiver: CLASS_REFERENCE 'Foo' type=kotlin.reflect.KClass<Foo<*>>
            arguments: CALL 'listOf(KTypeProjection): List<KTypeProjection>' type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=null
              element: CALL '<get-STAR>(): KTypeProjection' type=kotlin.reflect.KTypeProjection operator=GET_PROPERTY
                $this: GET_OBJECT 'companion object of KTypeProjection' type=kotlin.reflect.KTypeProjection.Companion
            nullable: CONST Boolean type=kotlin.Boolean value='true'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
