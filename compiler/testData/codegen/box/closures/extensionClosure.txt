MODULE <test-module>
  FILE /extensionClosure.kt
    CLASS CLASS Point
      CONSTRUCTOR public constructor Point(x: kotlin.Int, y: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'x: Int' type=kotlin.Unit operator=null
            receiver: THIS of 'Point' type=Point
            value: GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD 'y: Int' type=kotlin.Unit operator=null
            receiver: THIS of 'Point' type=Point
            value: GET_VAR 'value-parameter y: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='Point'
      PROPERTY public final val x: kotlin.Int
        EXPRESSION_BODY
          GET_VAR 'value-parameter x: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val y: kotlin.Int
        EXPRESSION_BODY
          GET_VAR 'value-parameter y: Int' type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val answer: Point
          CALL 'apply(Point, Point.(Int) -> Point): Point' type=Point operator=null
            arg: CALL 'constructor Point(Int, Int)' type=Point operator=null
              x: CONST Int type=kotlin.Int value='3'
              y: CONST Int type=kotlin.Int value='5'
            f: BLOCK type=Point.(kotlin.Int) -> Point operator=LAMBDA
              FUN local final fun Point.<anonymous>(scalar: kotlin.Int): Point
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(Int) on Point: Point'
                    CALL 'constructor Point(Int, Int)' type=Point operator=null
                      x: CALL 'times(Int): Int' type=kotlin.Int operator=MUL
                        $this: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                          $this: $RECEIVER of '<anonymous>(Int) on Point: Point' type=Point
                        other: GET_VAR 'value-parameter scalar: Int' type=kotlin.Int operator=null
                      y: CALL 'times(Int): Int' type=kotlin.Int operator=MUL
                        $this: CALL '<get-y>(): Int' type=kotlin.Int operator=GET_PROPERTY
                          $this: $RECEIVER of '<anonymous>(Int) on Point: Point' type=Point
                        other: GET_VAR 'value-parameter scalar: Int' type=kotlin.Int operator=null
              CALLABLE_REFERENCE '<anonymous>(Int) on Point: Point' type=Point.(kotlin.Int) -> Point operator=LAMBDA
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: WHEN type=kotlin.Boolean operator=ANDAND
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: CALL '<get-x>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR 'answer: Point' type=Point operator=null
                arg1: CONST Int type=kotlin.Int value='6'
              then: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: CALL '<get-y>(): Int' type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR 'answer: Point' type=Point operator=null
                arg1: CONST Int type=kotlin.Int value='10'
              else: CONST Boolean type=kotlin.Boolean value='false'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='FAIL'
    FUN public fun apply(arg: Point, f: Point.(kotlin.Int) -> Point): Point
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='apply(Point, Point.(Int) -> Point): Point'
          CALL 'invoke(Int) on Point: Point' type=Point operator=INVOKE
            $this: GET_VAR 'value-parameter f: Point.(Int) -> Point' type=Point.(kotlin.Int) -> Point operator=VARIABLE_AS_FUNCTION
            $receiver: GET_VAR 'value-parameter arg: Point' type=Point operator=null
            p2: CONST Int type=kotlin.Int value='2'
