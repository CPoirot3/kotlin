MODULE <test-module>
  FILE /subclosuresWithinInitializers.kt
    FUN public fun <R> run(block: () -> R): R
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='run(() -> R): R'
          CALL 'invoke(): R' type=R operator=INVOKE
            $this: GET_VAR 'value-parameter block: () -> R' type=() -> R operator=VARIABLE_AS_FUNCTION
    FUN public inline fun <R> inlineRun(block: () -> R): R
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='inlineRun(() -> R): R'
          CALL 'invoke(): R' type=R operator=INVOKE
            $this: GET_VAR 'value-parameter block: () -> R' type=() -> R operator=VARIABLE_AS_FUNCTION
    CLASS CLASS Outer
      CONSTRUCTOR public constructor Outer(outerProp: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'outerProp: String' type=kotlin.Unit operator=null
            receiver: THIS of 'Outer' type=Outer
            value: GET_VAR 'value-parameter outerProp: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='Outer'
      PROPERTY public final val outerProp: kotlin.String
        EXPRESSION_BODY
          GET_VAR 'value-parameter outerProp: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final fun foo(arg: kotlin.String): kotlin.String
        BLOCK_BODY
          CLASS CLASS Local
            CONSTRUCTOR public constructor Local()
              BLOCK_BODY
                DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
                INSTANCE_INITIALIZER_CALL classDescriptor='Local'
            PROPERTY public final val work1: kotlin.String
              EXPRESSION_BODY
                CALL 'run(Local.() -> String) on Local: String' type=kotlin.String operator=null
                  $receiver: THIS of 'Local' type=Outer.foo.Local
                  block: BLOCK type=Outer.foo.Local.() -> kotlin.String operator=LAMBDA
                    FUN local final fun Outer.foo.Local.<anonymous>(): kotlin.String
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from='<anonymous>() on Local: String'
                          CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
                            $this: CALL '<get-outerProp>(): String' type=kotlin.String operator=GET_PROPERTY
                              $this: THIS of 'Outer' type=Outer
                            other: GET_VAR 'value-parameter arg: String' type=kotlin.String operator=null
                    CALLABLE_REFERENCE '<anonymous>() on Local: String' type=Outer.foo.Local.() -> kotlin.String operator=LAMBDA
            PROPERTY public final val work2: kotlin.String
              EXPRESSION_BODY
                CALL 'inlineRun(() -> String): String' type=kotlin.String operator=null
                  block: BLOCK type=() -> kotlin.String operator=LAMBDA
                    FUN local final fun <anonymous>(): kotlin.String
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from='<anonymous>(): String'
                          CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
                            $this: CALL '<get-outerProp>(): String' type=kotlin.String operator=GET_PROPERTY
                              $this: THIS of 'Outer' type=Outer
                            other: GET_VAR 'value-parameter arg: String' type=kotlin.String operator=null
                    CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
            PROPERTY public final val obj: Outer.foo.Local.obj.<no name provided>
              EXPRESSION_BODY
                BLOCK type=Outer.foo.Local.obj.<no name provided> operator=OBJECT_LITERAL
                  CLASS CLASS <no name provided>
                    CONSTRUCTOR public constructor <no name provided>()
                      BLOCK_BODY
                        DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
                        INSTANCE_INITIALIZER_CALL classDescriptor='<no name provided>'
                    FUN public open override fun toString(): kotlin.String
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from='toString(): String'
                          CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
                            $this: CALL '<get-outerProp>(): String' type=kotlin.String operator=GET_PROPERTY
                              $this: THIS of 'Outer' type=Outer
                            other: GET_VAR 'value-parameter arg: String' type=kotlin.String operator=null
                  CALL 'constructor <no name provided>()' type=Outer.foo.Local.obj.<no name provided> operator=OBJECT_LITERAL
            FUN public open override fun toString(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='toString(): String'
                  STRING_CONCATENATION type=kotlin.String
                    CALL '<get-work1>(): String' type=kotlin.String operator=GET_PROPERTY
                      $this: THIS of 'Local' type=Outer.foo.Local
                    CONST String type=kotlin.String value='#'
                    CALL '<get-work2>(): String' type=kotlin.String operator=GET_PROPERTY
                      $this: THIS of 'Local' type=Outer.foo.Local
                    CONST String type=kotlin.String value='#'
                    CALL 'toString(): String' type=kotlin.String operator=null
                      $this: CALL '<get-obj>(): <no name provided>' type=Outer.foo.Local.obj.<no name provided> operator=GET_PROPERTY
                        $this: THIS of 'Local' type=Outer.foo.Local
          RETURN type=kotlin.Nothing from='foo(String): String'
            CALL 'toString(): String' type=kotlin.String operator=null
              $this: CALL 'constructor Local()' type=Outer.foo.Local operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val res: kotlin.String
          CALL 'foo(String): String' type=kotlin.String operator=null
            $this: CALL 'constructor Outer(String)' type=Outer operator=null
              outerProp: CONST String type=kotlin.String value='O'
            arg: CONST String type=kotlin.String value='K'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR 'res: String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='OK#OK#OK'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: '
              GET_VAR 'res: String' type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
