MODULE <test-module>
  FILE /closureOnTopLevel2.kt
    PROPERTY public val p: kotlin.String
      EXPRESSION_BODY
        CALL 'invoke(): String' type=kotlin.String operator=null
          $this: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): String'
                  CONST String type=kotlin.String value='OK'
            CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
    PROPERTY public val getter: kotlin.String
      PROPERTY_GETTER public fun <get-getter>(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='<get-getter>(): String'
            CALL 'invoke(): String' type=kotlin.String operator=null
              $this: BLOCK type=() -> kotlin.String operator=LAMBDA
                FUN local final fun <anonymous>(): kotlin.String
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='<anonymous>(): String'
                      CONST String type=kotlin.String value='OK'
                CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
    FUN public fun f(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='f(): String'
          CALL 'invoke(): String' type=kotlin.String operator=null
            $this: BLOCK type=() -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(): String'
                    CONST String type=kotlin.String value='OK'
              CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
    PROPERTY public val obj: () -> kotlin.String
      EXPRESSION_BODY
        BLOCK type=obj.<no name provided> operator=OBJECT_LITERAL
          CLASS CLASS <no name provided>
            CONSTRUCTOR public constructor <no name provided>()
              BLOCK_BODY
                DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
                INSTANCE_INITIALIZER_CALL classDescriptor='<no name provided>'
            FUN public open override fun invoke(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='invoke(): String'
                  CONST String type=kotlin.String value='OK'
          CALL 'constructor <no name provided>()' type=obj.<no name provided> operator=OBJECT_LITERAL
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-p>(): String' type=kotlin.String operator=GET_PROPERTY
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='FAIL'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-getter>(): String' type=kotlin.String operator=GET_PROPERTY
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='FAIL'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'f(): String' type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='FAIL'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'invoke(): String' type=kotlin.String operator=INVOKE
                $this: CALL '<get-obj>(): () -> String' type=() -> kotlin.String operator=GET_PROPERTY
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='FAIL'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
