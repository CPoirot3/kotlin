MODULE <test-module>
  FILE /recursiveClosure.kt
    FUN public fun foo(s: kotlin.String): kotlin.String
      BLOCK_BODY
        FUN local final fun bar(count: kotlin.Int): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='bar(Int): String'
              WHEN type=kotlin.String operator=IF
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR 'value-parameter count: Int' type=kotlin.Int operator=null
                  arg1: CONST Int type=kotlin.Int value='0'
                then: GET_VAR 'value-parameter s: String' type=kotlin.String operator=null
                else: CALL 'bar(Int): String' type=kotlin.String operator=null
                  count: CALL 'minus(Int): Int' type=kotlin.Int operator=MINUS
                    $this: GET_VAR 'value-parameter count: Int' type=kotlin.Int operator=null
                    other: CONST Int type=kotlin.Int value='1'
        RETURN type=kotlin.Nothing from='foo(String): String'
          CALL 'bar(Int): String' type=kotlin.String operator=null
            count: CONST Int type=kotlin.Int value='10'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          CALL 'foo(String): String' type=kotlin.String operator=null
            s: CONST String type=kotlin.String value='OK'
