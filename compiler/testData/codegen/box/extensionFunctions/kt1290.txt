MODULE <test-module>
  FILE /kt1290.kt
    CLASS CLASS Foo
      CONSTRUCTOR public constructor Foo<T>(filter: (T) -> kotlin.Boolean)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'filter: (T) -> Boolean' type=kotlin.Unit operator=null
            receiver: THIS of 'Foo' type=Foo<T>
            value: GET_VAR 'value-parameter filter: (T) -> Boolean' type=(T) -> kotlin.Boolean operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='Foo'
      PROPERTY public final val filter: (T) -> kotlin.Boolean
        EXPRESSION_BODY
          GET_VAR 'value-parameter filter: (T) -> Boolean' type=(T) -> kotlin.Boolean operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final fun bar(tee: T): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='bar(T): Boolean'
            CALL 'invoke(T): Boolean' type=kotlin.Boolean operator=INVOKE
              $this: CALL '<get-filter>(): (T) -> Boolean' type=(T) -> kotlin.Boolean operator=GET_PROPERTY
                $this: THIS of 'Foo' type=Foo<T>
              p1: GET_VAR 'value-parameter tee: T' type=T operator=null
    FUN public fun foo(): kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='foo(): Boolean'
          CALL 'bar(Int): Boolean' type=kotlin.Boolean operator=null
            $this: CALL 'constructor Foo((Int) -> Boolean)' type=Foo<kotlin.Int> operator=null
              filter: BLOCK type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(i: kotlin.Int): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='<anonymous>(Int): Boolean'
                      CALL 'LT0(Int): Boolean' type=kotlin.Boolean operator=LT
                        arg0: CALL 'compareTo(Int): Int' type=kotlin.Int operator=LT
                          $this: GET_VAR 'value-parameter i: Int' type=kotlin.Int operator=null
                          other: CONST Int type=kotlin.Int value='5'
                CALLABLE_REFERENCE '<anonymous>(Int): Boolean' type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
            tee: CONST Int type=kotlin.Int value='2'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'not(): Boolean' type=kotlin.Boolean operator=EXCL
            $this: CALL 'foo(): Boolean' type=kotlin.Boolean operator=null
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
