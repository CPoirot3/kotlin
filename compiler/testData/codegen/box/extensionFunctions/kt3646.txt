MODULE <test-module>
  FILE /kt3646.kt
    FUN public fun test(cl: kotlin.Int.() -> kotlin.Int): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='test(Int.() -> Int): Int'
          CALL 'invoke() on Int: Int' type=kotlin.Int operator=INVOKE
            $this: GET_VAR 'value-parameter cl: Int.() -> Int' type=kotlin.Int.() -> kotlin.Int operator=VARIABLE_AS_FUNCTION
            $receiver: CONST Int type=kotlin.Int value='11'
    CLASS CLASS Foo
      CONSTRUCTOR public constructor Foo()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Foo'
      PROPERTY public final val a: kotlin.Int
        EXPRESSION_BODY
          CALL 'test(Int.() -> Int): Int' type=kotlin.Int operator=null
            cl: BLOCK type=kotlin.Int.() -> kotlin.Int operator=LAMBDA
              FUN local final fun kotlin.Int.<anonymous>(): kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>() on Int: Int'
                    $RECEIVER of '<anonymous>() on Int: Int' type=kotlin.Int
              CALLABLE_REFERENCE '<anonymous>() on Int: Int' type=kotlin.Int.() -> kotlin.Int operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-a>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: CALL 'constructor Foo()' type=Foo operator=null
              arg1: CONST Int type=kotlin.Int value='11'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
