MODULE <test-module>
  FILE /box.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          CALL '<get-overlapping>(): String' type=kotlin.String operator=GET_PROPERTY
  FILE /part1.kt
    PROPERTY private val overlapping: kotlin.String
      EXPRESSION_BODY
        CALL 'run(() -> String): String' type=kotlin.String operator=null
          block: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): String'
                  CONST String type=kotlin.String value='oops #1'
            CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
  FILE /part2.kt
    PROPERTY public val overlapping: kotlin.String
      EXPRESSION_BODY
        CALL 'run(() -> String): String' type=kotlin.String operator=null
          block: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): String'
                  CONST String type=kotlin.String value='OK'
            CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
  FILE /part3.kt
    PROPERTY private val overlapping: kotlin.String
      EXPRESSION_BODY
        CALL 'run(() -> String): String' type=kotlin.String operator=null
          block: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): String'
                  CONST String type=kotlin.String value='oops #2'
            CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
