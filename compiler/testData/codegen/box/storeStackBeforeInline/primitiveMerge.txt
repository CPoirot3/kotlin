MODULE <test-module>
  FILE /primitiveMerge.kt
    FUN public fun bar(): kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='bar(): Boolean'
          CONST Boolean type=kotlin.Boolean value='true'
    FUN public fun foobar1(x: kotlin.Boolean, y: kotlin.String, z: kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='foobar1(Boolean, String, String): String'
          CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
            $this: CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CALL 'toString(): String' type=kotlin.String operator=null
                $this: GET_VAR 'value-parameter x: Boolean' type=kotlin.Boolean operator=null
              other: GET_VAR 'value-parameter y: String' type=kotlin.String operator=null
            other: GET_VAR 'value-parameter z: String' type=kotlin.String operator=null
    FUN public fun foobar2(x: kotlin.Any, y: kotlin.String, z: kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='foobar2(Any, String, String): String'
          CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
            $this: CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
              $this: CALL 'toString(): String' type=kotlin.String operator=null
                $this: GET_VAR 'value-parameter x: Any' type=kotlin.Any operator=null
              other: GET_VAR 'value-parameter y: String' type=kotlin.String operator=null
            other: GET_VAR 'value-parameter z: String' type=kotlin.String operator=null
    FUN public inline fun foo(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='foo(): String'
          CONST String type=kotlin.String value='-'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val result1: kotlin.String
          CALL 'foobar1(Boolean, String, String): String' type=kotlin.String operator=null
            x: WHEN type=kotlin.Boolean operator=IF
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: CONST Int type=kotlin.Int value='1'
                arg1: CONST Int type=kotlin.Int value='1'
              then: CONST Boolean type=kotlin.Boolean value='true'
              else: CALL 'bar(): Boolean' type=kotlin.Boolean operator=null
            y: CALL 'foo(): String' type=kotlin.String operator=null
            z: CONST String type=kotlin.String value='OK'
        VAR val result2: kotlin.String
          CALL 'foobar2(Any, String, String): String' type=kotlin.String operator=null
            x: WHEN type=java.io.Serializable operator=IF
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: CONST Int type=kotlin.Int value='1'
                arg1: CONST Int type=kotlin.Int value='1'
              then: CONST String type=kotlin.String value='true'
              else: CALL 'arrayOf(vararg String): Array<String>' type=kotlin.Array<kotlin.String> operator=null
                elements: VARARG type=Array<out String> varargElementType=String
                  CONST String type=kotlin.String value='false'
            y: CALL 'foo(): String' type=kotlin.String operator=null
            z: CONST String type=kotlin.String value='OK'
        CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='true-OK'
          actual: GET_VAR 'result1: String' type=kotlin.String operator=null
        CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='true-OK'
          actual: GET_VAR 'result2: String' type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
