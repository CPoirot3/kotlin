MODULE <test-module>
  FILE /genericTypeWithNothing.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A<T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
    CLASS CLASS B
      CONSTRUCTOR public constructor B<T, Y, U>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='B'
    CLASS CLASS TestRaw
      CONSTRUCTOR public constructor TestRaw()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestRaw'
      PROPERTY public final val a1: foo.A<kotlin.Nothing>
        EXPRESSION_BODY
          CALL 'constructor A()' type=foo.A<kotlin.Nothing> operator=null
      PROPERTY public final val a2: foo.A<kotlin.Nothing>?
        EXPRESSION_BODY
          CALL 'constructor A()' type=foo.A<kotlin.Nothing> operator=null
      PROPERTY public final val a3: foo.A<kotlin.Nothing?>
        EXPRESSION_BODY
          CALL 'constructor A()' type=foo.A<kotlin.Nothing?> operator=null
      PROPERTY public final val a4: foo.A<kotlin.Nothing?>?
        EXPRESSION_BODY
          CALL 'constructor A()' type=foo.A<kotlin.Nothing?> operator=null
      PROPERTY public final var b1: foo.B<kotlin.Nothing, kotlin.Int, kotlin.Int>
        EXPRESSION_BODY
          CALL 'constructor B()' type=foo.B<kotlin.Nothing, kotlin.Int, kotlin.Int> operator=null
      PROPERTY public final var b2: foo.B<kotlin.String, kotlin.Nothing, kotlin.Int>
        EXPRESSION_BODY
          CALL 'constructor B()' type=foo.B<kotlin.String, kotlin.Nothing, kotlin.Int> operator=null
      PROPERTY public final val l: kotlin.collections.List<kotlin.Nothing>
        EXPRESSION_BODY
          CALL 'listOf(): List<Nothing>' type=kotlin.collections.List<kotlin.Nothing> operator=null
      FUN public final fun test1(a: foo.A<kotlin.Nothing?>, b: foo.B<kotlin.Nothing, kotlin.String, foo.A<kotlin.Int>>): foo.A<kotlin.Nothing>?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='test1(A<Nothing?>, B<Nothing, String, A<Int>>): A<Nothing>?'
            CALL 'constructor A()' type=foo.A<kotlin.Nothing> operator=null
      FUN public final fun test2(a: foo.A<kotlin.Nothing?>?, b: foo.B<kotlin.Int, kotlin.String, kotlin.Nothing>): foo.B<kotlin.Int?, kotlin.Int?, kotlin.Nothing?>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='test2(A<Nothing?>?, B<Int, String, Nothing>): B<Int?, Int?, Nothing?>'
            CALL 'constructor B()' type=foo.B<kotlin.Int?, kotlin.Int?, kotlin.Nothing?> operator=null
    CLASS CLASS TestNotRaw
      CONSTRUCTOR public constructor TestNotRaw()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestNotRaw'
      PROPERTY public final val a1: foo.A<kotlin.String>
        EXPRESSION_BODY
          CALL 'constructor A()' type=foo.A<kotlin.String> operator=null
      PROPERTY public final val a2: foo.A<foo.B<kotlin.Nothing, kotlin.Int, kotlin.Int>>?
        EXPRESSION_BODY
          CALL 'constructor A()' type=foo.A<foo.B<kotlin.Nothing, kotlin.Int, kotlin.Int>> operator=null
      PROPERTY public final val a3: foo.A<kotlin.Int?>
        EXPRESSION_BODY
          CALL 'constructor A()' type=foo.A<kotlin.Int?> operator=null
      PROPERTY public final val a4: foo.A<kotlin.Int?>?
        EXPRESSION_BODY
          CALL 'constructor A()' type=foo.A<kotlin.Int?> operator=null
      PROPERTY public final var b1: foo.B<kotlin.Int, kotlin.Int, kotlin.Int>
        EXPRESSION_BODY
          CALL 'constructor B()' type=foo.B<kotlin.Int, kotlin.Int, kotlin.Int> operator=null
      PROPERTY public final var b2: foo.B<kotlin.String, foo.A<kotlin.String>, kotlin.Int>
        EXPRESSION_BODY
          CALL 'constructor B()' type=foo.B<kotlin.String, foo.A<kotlin.String>, kotlin.Int> operator=null
      PROPERTY public final val l: kotlin.collections.List<kotlin.String>
        EXPRESSION_BODY
          CALL 'listOf(): List<String>' type=kotlin.collections.List<kotlin.String> operator=null
      FUN public final fun test1(a: foo.A<kotlin.Int?>, b: foo.B<kotlin.Int, kotlin.String, foo.A<kotlin.Int>>): foo.A<kotlin.Int>?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='test1(A<Int?>, B<Int, String, A<Int>>): A<Int>?'
            CALL 'constructor A()' type=foo.A<kotlin.Int> operator=null
      FUN public final fun test2(a: foo.A<kotlin.Int>?, b: foo.B<kotlin.Int, kotlin.String, foo.A<kotlin.Nothing>>): foo.B<kotlin.Int?, kotlin.Int?, kotlin.Int>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='test2(A<Int>?, B<Int, String, A<Nothing>>): B<Int?, Int?, Int>'
            CALL 'constructor B()' type=foo.B<kotlin.Int?, kotlin.Int?, kotlin.Int> operator=null
    CLASS CLASS C
      CONSTRUCTOR public constructor C<T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='C'
      PROPERTY public abstract val foo: foo.A<T>
      FUN public abstract fun bar(): foo.A<T>?
    CLASS CLASS C1
      CONSTRUCTOR public constructor C1()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor C()'
          INSTANCE_INITIALIZER_CALL classDescriptor='C1'
      PROPERTY public open override val foo: foo.A<kotlin.Nothing>
        EXPRESSION_BODY
          CALL 'constructor A()' type=foo.A<kotlin.Nothing> operator=null
      FUN public open override fun bar(): foo.A<kotlin.Nothing>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='bar(): A<Nothing>'
            CALL '<get-foo>(): A<Nothing>' type=foo.A<kotlin.Nothing> operator=GET_PROPERTY
              $this: THIS of 'C1' type=foo.C1
    CLASS CLASS C2
      CONSTRUCTOR public constructor C2()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor C()'
          INSTANCE_INITIALIZER_CALL classDescriptor='C2'
      PROPERTY public open override val foo: foo.A<kotlin.String>
        EXPRESSION_BODY
          CALL 'constructor A()' type=foo.A<kotlin.String> operator=null
      FUN public open override fun bar(): foo.A<kotlin.String>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='bar(): A<String>'
            CALL '<get-foo>(): A<String>' type=foo.A<kotlin.String> operator=GET_PROPERTY
              $this: THIS of 'C2' type=foo.C2
    FUN public fun testAllDeclaredMembers(klass: kotlin.reflect.KClass<*>, expectedIsRaw: kotlin.Boolean): kotlin.String?
      BLOCK_BODY
        VAR val clazz: java.lang.Class<out kotlin.Any>
          CALL '<get-java>() on KClass<*>: Class<out Any>' type=java.lang.Class<out kotlin.Any> operator=GET_PROPERTY
            $receiver: GET_VAR 'value-parameter klass: KClass<*>' type=kotlin.reflect.KClass<*> operator=null
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<java.lang.reflect.Field!>
            CALL 'iterator(): Iterator<Field!>' type=kotlin.collections.Iterator<java.lang.reflect.Field!> operator=FOR_LOOP_ITERATOR
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<java.lang.reflect.Field!>
                TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Field!>
                  CALL '<get-declaredFields>() on Class<out Any>: Array<(out) Field!>!' type=kotlin.Array<(out) java.lang.reflect.Field!>! operator=GET_PROPERTY
                    $receiver: GET_VAR 'clazz: Class<out Any>' type=java.lang.Class<out kotlin.Any> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp0_iterator: Iterator<Field!>' type=kotlin.collections.Iterator<java.lang.reflect.Field!> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val it: java.lang.reflect.Field!
                CALL 'next(): Field!' type=java.lang.reflect.Field! operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp0_iterator: Iterator<Field!>' type=kotlin.collections.Iterator<java.lang.reflect.Field!> operator=null
              BLOCK type=kotlin.Unit operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                    arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                      arg0: CALL '<get-type>() on Field: Class<*>!' type=java.lang.Class<*>! operator=GET_PROPERTY
                        $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                          GET_VAR 'it: Field!' type=java.lang.reflect.Field! operator=null
                      arg1: CALL '<get-genericType>() on Field: Type!' type=java.lang.reflect.Type! operator=GET_PROPERTY
                        $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                          GET_VAR 'it: Field!' type=java.lang.reflect.Field! operator=null
                    arg1: GET_VAR 'value-parameter expectedIsRaw: Boolean' type=kotlin.Boolean operator=null
                  then: RETURN type=kotlin.Nothing from='testAllDeclaredMembers(KClass<*>, Boolean): String?'
                    STRING_CONCATENATION type=kotlin.String
                      CONST String type=kotlin.String value='failed on field ''
                      CALL '<get-simpleName>() on Class<out Any>: String!' type=kotlin.String! operator=GET_PROPERTY
                        $receiver: GET_VAR 'clazz: Class<out Any>' type=java.lang.Class<out kotlin.Any> operator=null
                      CONST String type=kotlin.String value='::'
                      CALL '<get-name>() on Field: String!' type=kotlin.String! operator=GET_PROPERTY
                        $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                          GET_VAR 'it: Field!' type=java.lang.reflect.Field! operator=null
                      CONST String type=kotlin.String value='''
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp1_iterator: kotlin.collections.Iterator<java.lang.reflect.Method!>
            CALL 'iterator(): Iterator<Method!>' type=kotlin.collections.Iterator<java.lang.reflect.Method!> operator=FOR_LOOP_ITERATOR
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<java.lang.reflect.Method!>
                TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Method!>
                  CALL '<get-declaredMethods>() on Class<out Any>: Array<(out) Method!>!' type=kotlin.Array<(out) java.lang.reflect.Method!>! operator=GET_PROPERTY
                    $receiver: GET_VAR 'clazz: Class<out Any>' type=java.lang.Class<out kotlin.Any> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp1_iterator: Iterator<Method!>' type=kotlin.collections.Iterator<java.lang.reflect.Method!> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val m: java.lang.reflect.Method!
                CALL 'next(): Method!' type=java.lang.reflect.Method! operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp1_iterator: Iterator<Method!>' type=kotlin.collections.Iterator<java.lang.reflect.Method!> operator=null
              BLOCK type=kotlin.Unit operator=null
                BLOCK type=kotlin.Unit operator=FOR_LOOP
                  VAR val tmp2_iterator: kotlin.collections.IntIterator
                    CALL 'iterator(): IntIterator' type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
                      $this: CALL '<get-indices>() on Array<out Class<*>!>: IntRange' type=kotlin.ranges.IntRange operator=GET_PROPERTY
                        $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.Class<*>!>
                          CALL '<get-parameterTypes>() on Method: Array<(out) Class<*>!>!' type=kotlin.Array<(out) java.lang.Class<*>!>! operator=GET_PROPERTY
                            $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                              GET_VAR 'm: Method!' type=java.lang.reflect.Method! operator=null
                  WHILE label=null operator=FOR_LOOP_INNER_WHILE
                    condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
                      $this: GET_VAR 'tmp2_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
                    body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
                      VAR val i: kotlin.Int
                        CALL 'next(): Int' type=kotlin.Int operator=FOR_LOOP_NEXT
                          $this: GET_VAR 'tmp2_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
                      BLOCK type=kotlin.Unit operator=null
                        WHEN type=kotlin.Unit operator=IF
                          if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                              arg0: CALL 'get(Int): Class<*>!' type=java.lang.Class<*>! operator=GET_ARRAY_ELEMENT
                                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<java.lang.Class<*>!>
                                  TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.Class<*>!>
                                    CALL '<get-parameterTypes>() on Method: Array<(out) Class<*>!>!' type=kotlin.Array<(out) java.lang.Class<*>!>! operator=GET_PROPERTY
                                      $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                                        GET_VAR 'm: Method!' type=java.lang.reflect.Method! operator=null
                                index: GET_VAR 'i: Int' type=kotlin.Int operator=null
                              arg1: CALL 'get(Int): Type!' type=java.lang.reflect.Type! operator=GET_ARRAY_ELEMENT
                                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<java.lang.reflect.Type!>
                                  TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Type!>
                                    CALL '<get-genericParameterTypes>() on Method: Array<(out) Type!>!' type=kotlin.Array<(out) java.lang.reflect.Type!>! operator=GET_PROPERTY
                                      $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                                        GET_VAR 'm: Method!' type=java.lang.reflect.Method! operator=null
                                index: GET_VAR 'i: Int' type=kotlin.Int operator=null
                            arg1: GET_VAR 'value-parameter expectedIsRaw: Boolean' type=kotlin.Boolean operator=null
                          then: RETURN type=kotlin.Nothing from='testAllDeclaredMembers(KClass<*>, Boolean): String?'
                            STRING_CONCATENATION type=kotlin.String
                              CONST String type=kotlin.String value='failed on type of param#'
                              GET_VAR 'i: Int' type=kotlin.Int operator=null
                              CONST String type=kotlin.String value=' of method ''
                              CALL '<get-simpleName>() on Class<out Any>: String!' type=kotlin.String! operator=GET_PROPERTY
                                $receiver: GET_VAR 'clazz: Class<out Any>' type=java.lang.Class<out kotlin.Any> operator=null
                              CONST String type=kotlin.String value='::'
                              CALL '<get-name>() on Method: String!' type=kotlin.String! operator=GET_PROPERTY
                                $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                                  GET_VAR 'm: Method!' type=java.lang.reflect.Method! operator=null
                              CONST String type=kotlin.String value='''
                WHEN type=kotlin.Unit operator=IF
                  if: WHEN type=kotlin.Boolean operator=ANDAND
                    if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                        arg0: CALL '<get-returnType>() on Method: Class<*>!' type=java.lang.Class<*>! operator=GET_PROPERTY
                          $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                            GET_VAR 'm: Method!' type=java.lang.reflect.Method! operator=null
                        arg1: GET_BACKING_FIELD 'TYPE: Class<Void!>!' type=java.lang.Class<java.lang.Void!>! operator=GET_PROPERTY
                    then: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                      arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                        arg0: CALL '<get-returnType>() on Method: Class<*>!' type=java.lang.Class<*>! operator=GET_PROPERTY
                          $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                            GET_VAR 'm: Method!' type=java.lang.reflect.Method! operator=null
                        arg1: CALL '<get-genericReturnType>() on Method: Type!' type=java.lang.reflect.Type! operator=GET_PROPERTY
                          $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                            GET_VAR 'm: Method!' type=java.lang.reflect.Method! operator=null
                      arg1: GET_VAR 'value-parameter expectedIsRaw: Boolean' type=kotlin.Boolean operator=null
                    else: CONST Boolean type=kotlin.Boolean value='false'
                  then: RETURN type=kotlin.Nothing from='testAllDeclaredMembers(KClass<*>, Boolean): String?'
                    STRING_CONCATENATION type=kotlin.String
                      CONST String type=kotlin.String value='failed on return type of method ''
                      CALL '<get-simpleName>() on Class<out Any>: String!' type=kotlin.String! operator=GET_PROPERTY
                        $receiver: GET_VAR 'clazz: Class<out Any>' type=java.lang.Class<out kotlin.Any> operator=null
                      CONST String type=kotlin.String value='::'
                      CALL '<get-name>() on Method: String!' type=kotlin.String! operator=GET_PROPERTY
                        $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                          GET_VAR 'm: Method!' type=java.lang.reflect.Method! operator=null
                      CONST String type=kotlin.String value='''
        RETURN type=kotlin.Nothing from='testAllDeclaredMembers(KClass<*>, Boolean): String?'
          CONST Null type=kotlin.Nothing? value='null'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        BLOCK type=kotlin.String? operator=ELVIS
          VAR val tmp1_elvis_lhs: kotlin.String?
            CALL 'testAllDeclaredMembers(KClass<*>, Boolean): String?' type=kotlin.String? operator=null
              klass: CLASS_REFERENCE 'TestRaw' type=kotlin.reflect.KClass<foo.TestRaw>
              expectedIsRaw: CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.String? operator=null
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'tmp1_elvis_lhs: String?' type=kotlin.String? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: BLOCK type=kotlin.Nothing? operator=SAFE_CALL
              VAR val tmp0_safe_receiver: kotlin.String?
                CALL 'testAllDeclaredMembers(KClass<*>, Boolean): String?' type=kotlin.String? operator=null
                  klass: CLASS_REFERENCE 'TestNotRaw' type=kotlin.reflect.KClass<foo.TestNotRaw>
                  expectedIsRaw: CONST Boolean type=kotlin.Boolean value='false'
              WHEN type=kotlin.Nothing? operator=SAFE_CALL
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR 'tmp0_safe_receiver: String?' type=kotlin.String? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CONST Null type=kotlin.Nothing? value='null'
                else: CALL 'let((String) -> Nothing) on String: Nothing' type=kotlin.Nothing operator=null
                  $this: GET_VAR 'tmp0_safe_receiver: String?' type=kotlin.String? operator=null
                  block: BLOCK type=(kotlin.String) -> kotlin.Nothing operator=LAMBDA
                    FUN local final fun <anonymous>(it: kotlin.String): kotlin.Nothing
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from='box(): String'
                          GET_VAR 'value-parameter it: String' type=kotlin.String operator=null
                    CALLABLE_REFERENCE '<anonymous>(String): Nothing' type=(kotlin.String) -> kotlin.Nothing operator=LAMBDA
            else: GET_VAR 'tmp1_elvis_lhs: String?' type=kotlin.String? operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-superclass>() on Class<C1>: Class<in C1!>!' type=java.lang.Class<in foo.C1!>! operator=GET_PROPERTY
                $receiver: CALL '<get-java>() on KClass<C1>: Class<C1>' type=java.lang.Class<foo.C1> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE 'C1' type=kotlin.reflect.KClass<foo.C1>
              arg1: CALL '<get-genericSuperclass>() on Class<C1>: Type!' type=java.lang.reflect.Type! operator=GET_PROPERTY
                $receiver: CALL '<get-java>() on KClass<C1>: Class<C1>' type=java.lang.Class<foo.C1> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE 'C1' type=kotlin.reflect.KClass<foo.C1>
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='failed on C1 superclass'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
            arg0: CALL '<get-superclass>() on Class<C2>: Class<in C2!>!' type=java.lang.Class<in foo.C2!>! operator=GET_PROPERTY
              $receiver: CALL '<get-java>() on KClass<C2>: Class<C2>' type=java.lang.Class<foo.C2> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'C2' type=kotlin.reflect.KClass<foo.C2>
            arg1: CALL '<get-genericSuperclass>() on Class<C2>: Type!' type=java.lang.reflect.Type! operator=GET_PROPERTY
              $receiver: CALL '<get-java>() on KClass<C2>: Class<C2>' type=java.lang.Class<foo.C2> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE 'C2' type=kotlin.reflect.KClass<foo.C2>
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='failed on C2 superclass'
        BLOCK type=kotlin.String? operator=ELVIS
          VAR val tmp3_elvis_lhs: kotlin.String?
            CALL 'testAllDeclaredMembers(KClass<*>, Boolean): String?' type=kotlin.String? operator=null
              klass: CLASS_REFERENCE 'C1' type=kotlin.reflect.KClass<foo.C1>
              expectedIsRaw: CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.String? operator=null
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'tmp3_elvis_lhs: String?' type=kotlin.String? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: BLOCK type=kotlin.Nothing? operator=SAFE_CALL
              VAR val tmp2_safe_receiver: kotlin.String?
                CALL 'testAllDeclaredMembers(KClass<*>, Boolean): String?' type=kotlin.String? operator=null
                  klass: CLASS_REFERENCE 'C2' type=kotlin.reflect.KClass<foo.C2>
                  expectedIsRaw: CONST Boolean type=kotlin.Boolean value='false'
              WHEN type=kotlin.Nothing? operator=SAFE_CALL
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR 'tmp2_safe_receiver: String?' type=kotlin.String? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CONST Null type=kotlin.Nothing? value='null'
                else: CALL 'let((String) -> Nothing) on String: Nothing' type=kotlin.Nothing operator=null
                  $this: GET_VAR 'tmp2_safe_receiver: String?' type=kotlin.String? operator=null
                  block: BLOCK type=(kotlin.String) -> kotlin.Nothing operator=LAMBDA
                    FUN local final fun <anonymous>(it: kotlin.String): kotlin.Nothing
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from='box(): String'
                          GET_VAR 'value-parameter it: String' type=kotlin.String operator=null
                    CALLABLE_REFERENCE '<anonymous>(String): Nothing' type=(kotlin.String) -> kotlin.Nothing operator=LAMBDA
            else: GET_VAR 'tmp3_elvis_lhs: String?' type=kotlin.String? operator=null
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
