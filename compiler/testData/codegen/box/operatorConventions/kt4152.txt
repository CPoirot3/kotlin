MODULE <test-module>
  FILE /kt4152.kt
    PROPERTY public var inc: kotlin.Int
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='0'
    PROPERTY public var propInc: kotlin.Int
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='0'
      PROPERTY_GETTER public fun <get-propInc>(): kotlin.Int
        BLOCK_BODY
          BLOCK type=kotlin.Int operator=POSTFIX_INCR
            BLOCK type=kotlin.Int operator=POSTFIX_INCR
              VAR val tmp0: kotlin.Int
                CALL '<get-inc>(): Int' type=kotlin.Int operator=POSTFIX_INCR
              CALL '<set-inc>(Int): Unit' type=kotlin.Unit operator=POSTFIX_INCR
                <set-?>: CALL 'inc(): Int' type=kotlin.Int operator=POSTFIX_INCR
                  $this: GET_VAR 'tmp0: Int' type=kotlin.Int operator=null
              GET_VAR 'tmp0: Int' type=kotlin.Int operator=null
          RETURN type=kotlin.Nothing from='<get-propInc>(): Int'
            GET_VAR 'field: Int' type=kotlin.Int operator=null
      PROPERTY_SETTER public fun <set-propInc>(a: kotlin.Int): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Int operator=POSTFIX_INCR
            BLOCK type=kotlin.Int operator=POSTFIX_INCR
              VAR val tmp0: kotlin.Int
                CALL '<get-inc>(): Int' type=kotlin.Int operator=POSTFIX_INCR
              CALL '<set-inc>(Int): Unit' type=kotlin.Unit operator=POSTFIX_INCR
                <set-?>: CALL 'inc(): Int' type=kotlin.Int operator=POSTFIX_INCR
                  $this: GET_VAR 'tmp0: Int' type=kotlin.Int operator=null
              GET_VAR 'tmp0: Int' type=kotlin.Int operator=null
          SET_BACKING_FIELD 'propInc: Int' type=kotlin.Unit operator=EQ
            value: GET_VAR 'value-parameter a: Int' type=kotlin.Int operator=null
    PROPERTY public var dec: kotlin.Int
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='0'
    PROPERTY public var propDec: kotlin.Int
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='0'
      PROPERTY_GETTER public fun <get-propDec>(): kotlin.Int
        BLOCK_BODY
          BLOCK type=kotlin.Int operator=POSTFIX_DECR
            BLOCK type=kotlin.Int operator=POSTFIX_DECR
              VAR val tmp0: kotlin.Int
                CALL '<get-dec>(): Int' type=kotlin.Int operator=POSTFIX_DECR
              CALL '<set-dec>(Int): Unit' type=kotlin.Unit operator=POSTFIX_DECR
                <set-?>: CALL 'dec(): Int' type=kotlin.Int operator=POSTFIX_DECR
                  $this: GET_VAR 'tmp0: Int' type=kotlin.Int operator=null
              GET_VAR 'tmp0: Int' type=kotlin.Int operator=null
          RETURN type=kotlin.Nothing from='<get-propDec>(): Int'
            GET_VAR 'field: Int' type=kotlin.Int operator=null
      PROPERTY_SETTER public fun <set-propDec>(a: kotlin.Int): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Int operator=POSTFIX_DECR
            BLOCK type=kotlin.Int operator=POSTFIX_DECR
              VAR val tmp0: kotlin.Int
                CALL '<get-dec>(): Int' type=kotlin.Int operator=POSTFIX_DECR
              CALL '<set-dec>(Int): Unit' type=kotlin.Unit operator=POSTFIX_DECR
                <set-?>: CALL 'dec(): Int' type=kotlin.Int operator=POSTFIX_DECR
                  $this: GET_VAR 'tmp0: Int' type=kotlin.Int operator=null
              GET_VAR 'tmp0: Int' type=kotlin.Int operator=null
          SET_BACKING_FIELD 'propDec: Int' type=kotlin.Unit operator=EQ
            value: GET_VAR 'value-parameter a: Int' type=kotlin.Int operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        BLOCK type=kotlin.Int operator=POSTFIX_INCR
          BLOCK type=kotlin.Int operator=POSTFIX_INCR
            VAR val tmp0: kotlin.Int
              CALL '<get-propInc>(): Int' type=kotlin.Int operator=POSTFIX_INCR
            CALL '<set-propInc>(Int): Unit' type=kotlin.Unit operator=POSTFIX_INCR
              a: CALL 'inc(): Int' type=kotlin.Int operator=POSTFIX_INCR
                $this: GET_VAR 'tmp0: Int' type=kotlin.Int operator=null
            GET_VAR 'tmp0: Int' type=kotlin.Int operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-inc>(): Int' type=kotlin.Int operator=GET_PROPERTY
              arg1: CONST Int type=kotlin.Int value='2'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail in postfix increment: '
              CALL '<get-inc>(): Int' type=kotlin.Int operator=GET_PROPERTY
              CONST String type=kotlin.String value=' != 2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-propInc>(): Int' type=kotlin.Int operator=GET_PROPERTY
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail in postfix increment: '
              CALL '<get-propInc>(): Int' type=kotlin.Int operator=GET_PROPERTY
              CONST String type=kotlin.String value=' != 1'
        BLOCK type=kotlin.Int operator=POSTFIX_DECR
          BLOCK type=kotlin.Int operator=POSTFIX_DECR
            VAR val tmp1: kotlin.Int
              CALL '<get-propDec>(): Int' type=kotlin.Int operator=POSTFIX_DECR
            CALL '<set-propDec>(Int): Unit' type=kotlin.Unit operator=POSTFIX_DECR
              a: CALL 'dec(): Int' type=kotlin.Int operator=POSTFIX_DECR
                $this: GET_VAR 'tmp1: Int' type=kotlin.Int operator=null
            GET_VAR 'tmp1: Int' type=kotlin.Int operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-dec>(): Int' type=kotlin.Int operator=GET_PROPERTY
              arg1: CONST Int type=kotlin.Int value='-2'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail in postfix decrement: '
              CALL '<get-dec>(): Int' type=kotlin.Int operator=GET_PROPERTY
              CONST String type=kotlin.String value=' != -2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-propDec>(): Int' type=kotlin.Int operator=GET_PROPERTY
              arg1: CONST Int type=kotlin.Int value='-1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail in postfix decrement: '
              CALL '<get-propDec>(): Int' type=kotlin.Int operator=GET_PROPERTY
              CONST String type=kotlin.String value=' != -1'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
