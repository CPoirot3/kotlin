MODULE <test-module>
  FILE /usedInArrayStore.kt
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Controller'
      FUN public final suspend fun suspendHere(x: kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
        BLOCK_BODY
          CALL 'resume(Unit): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR 'value-parameter x: Continuation<Unit>' type=kotlin.coroutines.Continuation<kotlin.Unit> operator=null
            data: GET_OBJECT 'Unit' type=kotlin.Unit
    FUN public fun builder(coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
      BLOCK_BODY
        CALL 'resume(Unit): Unit' type=kotlin.Unit operator=null
          $this: CALL 'invoke(Controller): Continuation<Unit>' type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
            $this: GET_VAR 'value-parameter coroutine c: Controller.() -> Continuation<Unit>' type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
            p1: CALL 'constructor Controller()' type=Controller operator=null
          data: GET_OBJECT 'Unit' type=kotlin.Unit
    PROPERTY @kotlin.jvm.JvmField public var booleanResult: kotlin.BooleanArray
      EXPRESSION_BODY
        CALL 'booleanArrayOf(vararg Boolean): BooleanArray' type=kotlin.BooleanArray operator=null
    PROPERTY @kotlin.jvm.JvmField public var charResult: kotlin.CharArray
      EXPRESSION_BODY
        CALL 'charArrayOf(vararg Char): CharArray' type=kotlin.CharArray operator=null
    PROPERTY @kotlin.jvm.JvmField public var byteResult: kotlin.ByteArray
      EXPRESSION_BODY
        CALL 'byteArrayOf(vararg Byte): ByteArray' type=kotlin.ByteArray operator=null
    PROPERTY @kotlin.jvm.JvmField public var shortResult: kotlin.ShortArray
      EXPRESSION_BODY
        CALL 'shortArrayOf(vararg Short): ShortArray' type=kotlin.ShortArray operator=null
    PROPERTY @kotlin.jvm.JvmField public var intResult: kotlin.IntArray
      EXPRESSION_BODY
        CALL 'intArrayOf(vararg Int): IntArray' type=kotlin.IntArray operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'builder(coroutine Controller.() -> Continuation<Unit>): Unit' type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  VAR val x: kotlin.Boolean = true
                    CONST Boolean type=kotlin.Boolean value='true'
                  CALL 'suspendHere(): Unit' type=kotlin.Unit operator=null
                    $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                  VAR val a: kotlin.BooleanArray
                    CALL 'constructor BooleanArray(Int)' type=kotlin.BooleanArray operator=null
                      size: CONST Int type=kotlin.Int value='1'
                  CALL 'set(Int, Boolean): Unit' type=kotlin.Unit operator=EQ
                    $this: GET_VAR 'a: BooleanArray' type=kotlin.BooleanArray operator=null
                    index: CONST Int type=kotlin.Int value='0'
                    value: GET_VAR 'x: Boolean' type=kotlin.Boolean operator=null
                  RETURN type=kotlin.Nothing from='<anonymous>() on Controller: Unit'
                    CALL '<set-booleanResult>(BooleanArray): Unit' type=kotlin.Unit operator=EQ
                      <set-?>: GET_VAR 'a: BooleanArray' type=kotlin.BooleanArray operator=null
              CALLABLE_REFERENCE '<anonymous>() on Controller: Unit' type=Controller.() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'not(): Boolean' type=kotlin.Boolean operator=EXCL
            $this: CALL 'get(Int): Boolean' type=kotlin.Boolean operator=GET_ARRAY_ELEMENT
              $this: CALL '<get-booleanResult>(): BooleanArray' type=kotlin.BooleanArray operator=GET_PROPERTY
              index: CONST Int type=kotlin.Int value='0'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail 1'
        CALL 'builder(coroutine Controller.() -> Continuation<Unit>): Unit' type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  VAR val x: kotlin.Char = \u0031 ('1')
                    CONST Char type=kotlin.Char value='1'
                  CALL 'suspendHere(): Unit' type=kotlin.Unit operator=null
                    $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                  VAR val a: kotlin.CharArray
                    CALL 'constructor CharArray(Int)' type=kotlin.CharArray operator=null
                      size: CONST Int type=kotlin.Int value='1'
                  CALL 'set(Int, Char): Unit' type=kotlin.Unit operator=EQ
                    $this: GET_VAR 'a: CharArray' type=kotlin.CharArray operator=null
                    index: CONST Int type=kotlin.Int value='0'
                    value: GET_VAR 'x: Char' type=kotlin.Char operator=null
                  RETURN type=kotlin.Nothing from='<anonymous>() on Controller: Unit'
                    CALL '<set-charResult>(CharArray): Unit' type=kotlin.Unit operator=EQ
                      <set-?>: GET_VAR 'a: CharArray' type=kotlin.CharArray operator=null
              CALLABLE_REFERENCE '<anonymous>() on Controller: Unit' type=Controller.() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'get(Int): Char' type=kotlin.Char operator=GET_ARRAY_ELEMENT
                $this: CALL '<get-charResult>(): CharArray' type=kotlin.CharArray operator=GET_PROPERTY
                index: CONST Int type=kotlin.Int value='0'
              arg1: CONST Char type=kotlin.Char value='1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail 2'
        CALL 'builder(coroutine Controller.() -> Continuation<Unit>): Unit' type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  VAR val x: kotlin.Byte = 1.toByte()
                    CONST Byte type=kotlin.Byte value='1'
                  CALL 'suspendHere(): Unit' type=kotlin.Unit operator=null
                    $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                  VAR val a: kotlin.ByteArray
                    CALL 'constructor ByteArray(Int)' type=kotlin.ByteArray operator=null
                      size: CONST Int type=kotlin.Int value='1'
                  CALL 'set(Int, Byte): Unit' type=kotlin.Unit operator=EQ
                    $this: GET_VAR 'a: ByteArray' type=kotlin.ByteArray operator=null
                    index: CONST Int type=kotlin.Int value='0'
                    value: GET_VAR 'x: Byte' type=kotlin.Byte operator=null
                  RETURN type=kotlin.Nothing from='<anonymous>() on Controller: Unit'
                    CALL '<set-byteResult>(ByteArray): Unit' type=kotlin.Unit operator=EQ
                      <set-?>: GET_VAR 'a: ByteArray' type=kotlin.ByteArray operator=null
              CALLABLE_REFERENCE '<anonymous>() on Controller: Unit' type=Controller.() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'get(Int): Byte' type=kotlin.Byte operator=GET_ARRAY_ELEMENT
                $this: CALL '<get-byteResult>(): ByteArray' type=kotlin.ByteArray operator=GET_PROPERTY
                index: CONST Int type=kotlin.Int value='0'
              arg1: CALL 'toByte(): Byte' type=kotlin.Byte operator=null
                $this: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail 3'
        CALL 'builder(coroutine Controller.() -> Continuation<Unit>): Unit' type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  VAR val x: kotlin.Short = 1.toShort()
                    CONST Short type=kotlin.Short value='1'
                  CALL 'suspendHere(): Unit' type=kotlin.Unit operator=null
                    $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                  VAR val a: kotlin.ShortArray
                    CALL 'constructor ShortArray(Int)' type=kotlin.ShortArray operator=null
                      size: CONST Int type=kotlin.Int value='1'
                  CALL 'set(Int, Short): Unit' type=kotlin.Unit operator=EQ
                    $this: GET_VAR 'a: ShortArray' type=kotlin.ShortArray operator=null
                    index: CONST Int type=kotlin.Int value='0'
                    value: GET_VAR 'x: Short' type=kotlin.Short operator=null
                  RETURN type=kotlin.Nothing from='<anonymous>() on Controller: Unit'
                    CALL '<set-shortResult>(ShortArray): Unit' type=kotlin.Unit operator=EQ
                      <set-?>: GET_VAR 'a: ShortArray' type=kotlin.ShortArray operator=null
              CALLABLE_REFERENCE '<anonymous>() on Controller: Unit' type=Controller.() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'get(Int): Short' type=kotlin.Short operator=GET_ARRAY_ELEMENT
                $this: CALL '<get-shortResult>(): ShortArray' type=kotlin.ShortArray operator=GET_PROPERTY
                index: CONST Int type=kotlin.Int value='0'
              arg1: CALL 'toShort(): Short' type=kotlin.Short operator=null
                $this: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail 4'
        CALL 'builder(coroutine Controller.() -> Continuation<Unit>): Unit' type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  VAR val x: kotlin.Int = 1
                    CONST Int type=kotlin.Int value='1'
                  CALL 'suspendHere(): Unit' type=kotlin.Unit operator=null
                    $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                  VAR val a: kotlin.IntArray
                    CALL 'constructor IntArray(Int)' type=kotlin.IntArray operator=null
                      size: CONST Int type=kotlin.Int value='1'
                  CALL 'set(Int, Int): Unit' type=kotlin.Unit operator=EQ
                    $this: GET_VAR 'a: IntArray' type=kotlin.IntArray operator=null
                    index: CONST Int type=kotlin.Int value='0'
                    value: GET_VAR 'x: Int' type=kotlin.Int operator=null
                  RETURN type=kotlin.Nothing from='<anonymous>() on Controller: Unit'
                    CALL '<set-intResult>(IntArray): Unit' type=kotlin.Unit operator=EQ
                      <set-?>: GET_VAR 'a: IntArray' type=kotlin.IntArray operator=null
              CALLABLE_REFERENCE '<anonymous>() on Controller: Unit' type=Controller.() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'get(Int): Int' type=kotlin.Int operator=GET_ARRAY_ELEMENT
                $this: CALL '<get-intResult>(): IntArray' type=kotlin.IntArray operator=GET_PROPERTY
                index: CONST Int type=kotlin.Int value='0'
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from='box(): String'
            CONST String type=kotlin.String value='fail 5'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
