MODULE <test-module>
  FILE /handleException.kt
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Controller'
      PROPERTY public final var exception: kotlin.Throwable?
        EXPRESSION_BODY
          CONST Null type=kotlin.Nothing? value='null'
      PROPERTY public final val postponedActions: java.util.ArrayList<() -> kotlin.Unit>
        EXPRESSION_BODY
          CALL 'constructor ArrayList()' type=java.util.ArrayList<() -> kotlin.Unit> operator=null
      FUN public final suspend fun suspendWithValue(v: kotlin.String, x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL 'add(() -> Unit): Boolean' type=kotlin.Boolean operator=null
            $this: CALL '<get-postponedActions>(): ArrayList<() -> Unit>' type=java.util.ArrayList<() -> kotlin.Unit> operator=GET_PROPERTY
              $this: THIS of 'Controller' type=Controller
            element: BLOCK type=() -> kotlin.Unit operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(): Unit'
                    CALL 'resume(String): Unit' type=kotlin.Unit operator=null
                      $this: GET_VAR 'value-parameter x: Continuation<String>' type=kotlin.coroutines.Continuation<kotlin.String> operator=null
                      data: GET_VAR 'value-parameter v: String' type=kotlin.String operator=null
              CALLABLE_REFERENCE '<anonymous>(): Unit' type=() -> kotlin.Unit operator=LAMBDA
      FUN public final suspend fun suspendWithException(e: kotlin.Exception /* = java.lang.Exception */, x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL 'add(() -> Unit): Boolean' type=kotlin.Boolean operator=null
            $this: CALL '<get-postponedActions>(): ArrayList<() -> Unit>' type=java.util.ArrayList<() -> kotlin.Unit> operator=GET_PROPERTY
              $this: THIS of 'Controller' type=Controller
            element: BLOCK type=() -> kotlin.Unit operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(): Unit'
                    CALL 'resumeWithException(Throwable): Unit' type=kotlin.Unit operator=null
                      $this: GET_VAR 'value-parameter x: Continuation<String>' type=kotlin.coroutines.Continuation<kotlin.String> operator=null
                      exception: GET_VAR 'value-parameter e: Exception /* = Exception */' type=kotlin.Exception /* = java.lang.Exception */ operator=null
              CALLABLE_REFERENCE '<anonymous>(): Unit' type=() -> kotlin.Unit operator=LAMBDA
      FUN public final operator fun handleException(t: kotlin.Throwable, c: kotlin.coroutines.Continuation<kotlin.Nothing>): kotlin.Unit
        BLOCK_BODY
          CALL '<set-exception>(Throwable?): Unit' type=kotlin.Unit operator=EQ
            $this: THIS of 'Controller' type=Controller
            <set-?>: GET_VAR 'value-parameter t: Throwable' type=kotlin.Throwable operator=null
      FUN public final fun run(c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
        BLOCK_BODY
          CALL 'resume(Unit): Unit' type=kotlin.Unit operator=null
            $this: CALL 'invoke(Controller): Continuation<Unit>' type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
              $this: GET_VAR 'value-parameter c: Controller.() -> Continuation<Unit>' type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
              p1: THIS of 'Controller' type=Controller
            data: GET_OBJECT 'Unit' type=kotlin.Unit
          WHILE label=null operator=WHILE_LOOP
            condition: CALL 'isNotEmpty() on Collection<() -> Unit>: Boolean' type=kotlin.Boolean operator=null
              $receiver: CALL '<get-postponedActions>(): ArrayList<() -> Unit>' type=java.util.ArrayList<() -> kotlin.Unit> operator=GET_PROPERTY
                $this: THIS of 'Controller' type=Controller
            body: BLOCK type=() -> kotlin.Unit operator=null
              CALL 'invoke(): Unit' type=kotlin.Unit operator=null
                $this: CALL 'get(Int): () -> Unit' type=() -> kotlin.Unit operator=GET_ARRAY_ELEMENT
                  $this: CALL '<get-postponedActions>(): ArrayList<() -> Unit>' type=java.util.ArrayList<() -> kotlin.Unit> operator=GET_PROPERTY
                    $this: THIS of 'Controller' type=Controller
                  index: CONST Int type=kotlin.Int value='0'
              CALL 'removeAt(Int): () -> Unit' type=() -> kotlin.Unit operator=null
                $this: CALL '<get-postponedActions>(): ArrayList<() -> Unit>' type=java.util.ArrayList<() -> kotlin.Unit> operator=GET_PROPERTY
                  $this: THIS of 'Controller' type=Controller
                p0: CONST Int type=kotlin.Int value='0'
    FUN public fun builder(coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
      BLOCK_BODY
        VAR val controller: Controller
          CALL 'constructor Controller()' type=Controller operator=null
        CALL 'run(Controller.() -> Continuation<Unit>): Unit' type=kotlin.Unit operator=null
          $this: GET_VAR 'controller: Controller' type=Controller operator=null
          c: GET_VAR 'value-parameter coroutine c: Controller.() -> Continuation<Unit>' type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: BLOCK type=kotlin.String? operator=SAFE_CALL
                VAR val tmp0_safe_receiver: kotlin.Throwable?
                  CALL '<get-exception>(): Throwable?' type=kotlin.Throwable? operator=GET_PROPERTY
                    $this: GET_VAR 'controller: Controller' type=Controller operator=null
                WHEN type=kotlin.String? operator=SAFE_CALL
                  if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR 'tmp0_safe_receiver: Throwable?' type=kotlin.Throwable? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Null type=kotlin.Nothing? value='null'
                  else: CALL '<get-message>(): String?' type=kotlin.String? operator=GET_PROPERTY
                    $this: GET_VAR 'tmp0_safe_receiver: Throwable?' type=kotlin.Throwable? operator=null
              arg1: CONST String type=kotlin.String value='OK'
          then: BLOCK type=kotlin.Nothing operator=null
            THROW type=kotlin.Nothing
              CALL 'constructor RuntimeException(String!)' type=java.lang.RuntimeException operator=null
                p0: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='Unexpected result: '
                  BLOCK type=kotlin.String? operator=SAFE_CALL
                    VAR val tmp1_safe_receiver: kotlin.Throwable?
                      CALL '<get-exception>(): Throwable?' type=kotlin.Throwable? operator=GET_PROPERTY
                        $this: GET_VAR 'controller: Controller' type=Controller operator=null
                    WHEN type=kotlin.String? operator=SAFE_CALL
                      if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                        arg0: GET_VAR 'tmp1_safe_receiver: Throwable?' type=kotlin.Throwable? operator=null
                        arg1: CONST Null type=kotlin.Nothing? value='null'
                      then: CONST Null type=kotlin.Nothing? value='null'
                      else: CALL '<get-message>(): String?' type=kotlin.String? operator=GET_PROPERTY
                        $this: GET_VAR 'tmp1_safe_receiver: Throwable?' type=kotlin.Throwable? operator=null
    FUN public fun commonThrow(t: kotlin.Throwable): kotlin.Unit
      BLOCK_BODY
        THROW type=kotlin.Nothing
          GET_VAR 'value-parameter t: Throwable' type=kotlin.Throwable operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'builder(coroutine Controller.() -> Continuation<Unit>): Unit' type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  THROW type=kotlin.Nothing
                    CALL 'constructor RuntimeException(String!)' type=java.lang.RuntimeException operator=null
                      p0: CONST String type=kotlin.String value='OK'
              CALLABLE_REFERENCE '<anonymous>() on Controller: Unit' type=Controller.() -> kotlin.Unit operator=LAMBDA
        CALL 'builder(coroutine Controller.() -> Continuation<Unit>): Unit' type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>() on Controller: Unit'
                    CALL 'commonThrow(Throwable): Unit' type=kotlin.Unit operator=null
                      t: CALL 'constructor RuntimeException(String!)' type=java.lang.RuntimeException operator=null
                        p0: CONST String type=kotlin.String value='OK'
              CALLABLE_REFERENCE '<anonymous>() on Controller: Unit' type=Controller.() -> kotlin.Unit operator=LAMBDA
        CALL 'builder(coroutine Controller.() -> Continuation<Unit>): Unit' type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>() on Controller: Unit'
                    CALL 'suspendWithException(Exception /* = Exception */): String' type=kotlin.String operator=null
                      $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                      e: CALL 'constructor RuntimeException(String!)' type=java.lang.RuntimeException operator=null
                        p0: CONST String type=kotlin.String value='OK'
              CALLABLE_REFERENCE '<anonymous>() on Controller: Unit' type=Controller.() -> kotlin.Unit operator=LAMBDA
        CALL 'builder(coroutine Controller.() -> Continuation<Unit>): Unit' type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>() on Controller: Unit'
                    TRY_CATCH type=kotlin.String
                      try: BLOCK type=kotlin.String operator=null
                        CALL 'suspendWithException(Exception /* = Exception */): String' type=kotlin.String operator=null
                          $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                          e: CALL 'constructor RuntimeException(String!)' type=java.lang.RuntimeException operator=null
                            p0: CONST String type=kotlin.String value='fail 1'
                      catch e: BLOCK type=kotlin.String operator=null
                        CALL 'suspendWithException(Exception /* = Exception */): String' type=kotlin.String operator=null
                          $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                          e: CALL 'constructor RuntimeException(String!)' type=java.lang.RuntimeException operator=null
                            p0: CONST String type=kotlin.String value='OK'
              CALLABLE_REFERENCE '<anonymous>() on Controller: Unit' type=Controller.() -> kotlin.Unit operator=LAMBDA
        CALL 'builder(coroutine Controller.() -> Continuation<Unit>): Unit' type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>() on Controller: Unit'
                    TRY_CATCH type=kotlin.String
                      try: BLOCK type=kotlin.String operator=null
                        CALL 'suspendWithException(Exception /* = Exception */): String' type=kotlin.String operator=null
                          $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                          e: CALL 'constructor Exception(String!)' type=java.lang.Exception operator=null
                            p0: CONST String type=kotlin.String value='OK'
                      catch e: BLOCK type=kotlin.Nothing operator=null
                        CALL 'suspendWithException(Exception /* = Exception */): String' type=kotlin.String operator=null
                          $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                          e: CALL 'constructor RuntimeException(String!)' type=java.lang.RuntimeException operator=null
                            p0: CONST String type=kotlin.String value='fail 3'
                        THROW type=kotlin.Nothing
                          CALL 'constructor RuntimeException(String!)' type=java.lang.RuntimeException operator=null
                            p0: CONST String type=kotlin.String value='fail 4'
              CALLABLE_REFERENCE '<anonymous>() on Controller: Unit' type=Controller.() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
