MODULE <test-module>
  FILE /emptyClosure.kt
    PROPERTY public var result: kotlin.Int
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='0'
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Controller'
      FUN public final suspend fun suspendHere(x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Int operator=POSTFIX_INCR
            BLOCK type=kotlin.Int operator=POSTFIX_INCR
              VAR val tmp0: kotlin.Int
                CALL '<get-result>(): Int' type=kotlin.Int operator=POSTFIX_INCR
              CALL '<set-result>(Int): Unit' type=kotlin.Unit operator=POSTFIX_INCR
                <set-?>: CALL 'inc(): Int' type=kotlin.Int operator=POSTFIX_INCR
                  $this: GET_VAR 'tmp0: Int' type=kotlin.Int operator=null
              GET_VAR 'tmp0: Int' type=kotlin.Int operator=null
          CALL 'resume(String): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR 'value-parameter x: Continuation<String>' type=kotlin.coroutines.Continuation<kotlin.String> operator=null
            data: CONST String type=kotlin.String value='OK'
    FUN public fun builder(coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
      BLOCK_BODY
        CALL 'resume(Unit): Unit' type=kotlin.Unit operator=null
          $this: CALL 'invoke(Controller): Continuation<Unit>' type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
            $this: GET_VAR 'value-parameter coroutine c: Controller.() -> Continuation<Unit>' type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
            p1: CALL 'constructor Controller()' type=Controller operator=null
          data: GET_OBJECT 'Unit' type=kotlin.Unit
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL 'iterator(): IntIterator' type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL 'rangeTo(Int): IntRange' type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='1'
                other: CONST Int type=kotlin.Int value='3'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL 'next(): Int' type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL 'builder(coroutine Controller.() -> Continuation<Unit>): Unit' type=kotlin.Unit operator=null
                  c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
                    BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
                      FUN local final fun Controller.<anonymous>(): kotlin.Unit
                        BLOCK_BODY
                          RETURN type=kotlin.Nothing from='<anonymous>() on Controller: Unit'
                            WHEN type=kotlin.Unit operator=IF
                              if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
                                arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                                  arg0: CALL 'suspendHere(): String' type=kotlin.String operator=null
                                    $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                                  arg1: CONST String type=kotlin.String value='OK'
                              then: THROW type=kotlin.Nothing
                                CALL 'constructor RuntimeException(String!)' type=java.lang.RuntimeException operator=null
                                  p0: CONST String type=kotlin.String value='fail 1'
                      CALLABLE_REFERENCE '<anonymous>() on Controller: Unit' type=Controller.() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL '<get-result>(): Int' type=kotlin.Int operator=GET_PROPERTY
              arg1: CONST Int type=kotlin.Int value='3'
          then: RETURN type=kotlin.Nothing from='box(): String'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 2: '
              CALL '<get-result>(): Int' type=kotlin.Int operator=GET_PROPERTY
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
