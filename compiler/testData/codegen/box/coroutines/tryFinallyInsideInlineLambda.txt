MODULE <test-module>
  FILE /tryFinallyInsideInlineLambda.kt
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Controller'
      FUN public final suspend fun suspendHere(v: kotlin.String, x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL 'resume(String): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR 'value-parameter x: Continuation<String>' type=kotlin.coroutines.Continuation<kotlin.String> operator=null
            data: GET_VAR 'value-parameter v: String' type=kotlin.String operator=null
    FUN public fun builder(coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
      BLOCK_BODY
        CALL 'resume(Unit): Unit' type=kotlin.Unit operator=null
          $this: CALL 'invoke(Controller): Continuation<Unit>' type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
            $this: GET_VAR 'value-parameter coroutine c: Controller.() -> Continuation<Unit>' type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
            p1: CALL 'constructor Controller()' type=Controller operator=null
          data: GET_OBJECT 'Unit' type=kotlin.Unit
    FUN public inline fun run(block: () -> kotlin.Unit): kotlin.Unit
      BLOCK_BODY
        CALL 'invoke(): Unit' type=kotlin.Unit operator=INVOKE
          $this: GET_VAR 'value-parameter block: () -> Unit' type=() -> kotlin.Unit operator=VARIABLE_AS_FUNCTION
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.String
          CONST String type=kotlin.String value=''
        CALL 'run(() -> Unit): Unit' type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): Unit'
                  CALL 'builder(coroutine Controller.() -> Continuation<Unit>): Unit' type=kotlin.Unit operator=null
                    c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
                      BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
                        FUN local final fun Controller.<anonymous>(): kotlin.Unit
                          BLOCK_BODY
                            RETURN type=kotlin.Nothing from='<anonymous>() on Controller: Unit'
                              TRY_CATCH type=kotlin.Unit
                                try: BLOCK type=kotlin.Unit operator=null
                                  SET_VAR 'result: String' type=kotlin.Unit operator=PLUSEQ
                                    CALL 'plus(Any?): String' type=kotlin.String operator=PLUSEQ
                                      $this: GET_VAR 'result: String' type=kotlin.String operator=PLUSEQ
                                      other: CALL 'suspendHere(String): String' type=kotlin.String operator=null
                                        $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                                        v: CONST String type=kotlin.String value='O'
                                finally: BLOCK type=kotlin.Unit operator=null
                                  SET_VAR 'result: String' type=kotlin.Unit operator=PLUSEQ
                                    CALL 'plus(Any?): String' type=kotlin.String operator=PLUSEQ
                                      $this: GET_VAR 'result: String' type=kotlin.String operator=PLUSEQ
                                      other: CALL 'suspendHere(String): String' type=kotlin.String operator=null
                                        $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                                        v: CONST String type=kotlin.String value='K'
                        CALLABLE_REFERENCE '<anonymous>() on Controller: Unit' type=Controller.() -> kotlin.Unit operator=LAMBDA
            CALLABLE_REFERENCE '<anonymous>(): Unit' type=() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from='box(): String'
          GET_VAR 'result: String' type=kotlin.String operator=null
