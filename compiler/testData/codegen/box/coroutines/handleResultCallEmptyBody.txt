MODULE <test-module>
  FILE /handleResultCallEmptyBody.kt
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Controller'
      PROPERTY public final var ok: kotlin.Boolean
        EXPRESSION_BODY
          CONST Boolean type=kotlin.Boolean value='false'
      FUN public final operator fun handleResult(u: kotlin.Unit, v: kotlin.coroutines.Continuation<kotlin.Nothing>): kotlin.Unit
        BLOCK_BODY
          CALL '<set-ok>(Boolean): Unit' type=kotlin.Unit operator=EQ
            $this: THIS of 'Controller' type=Controller
            <set-?>: CONST Boolean type=kotlin.Boolean value='true'
    FUN public fun builder(coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.String
      BLOCK_BODY
        VAR val controller: Controller
          CALL 'constructor Controller()' type=Controller operator=null
        CALL 'resume(Unit): Unit' type=kotlin.Unit operator=null
          $this: CALL 'invoke(Controller): Continuation<Unit>' type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
            $this: GET_VAR 'value-parameter coroutine c: Controller.() -> Continuation<Unit>' type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
            p1: GET_VAR 'controller: Controller' type=Controller operator=null
          data: GET_OBJECT 'Unit' type=kotlin.Unit
        WHEN type=kotlin.Unit operator=IF
          if: CALL 'not(): Boolean' type=kotlin.Boolean operator=EXCL
            $this: CALL '<get-ok>(): Boolean' type=kotlin.Boolean operator=GET_PROPERTY
              $this: GET_VAR 'controller: Controller' type=Controller operator=null
          then: THROW type=kotlin.Nothing
            CALL 'constructor RuntimeException(String!)' type=java.lang.RuntimeException operator=null
              p0: CONST String type=kotlin.String value='Was not called'
        RETURN type=kotlin.Nothing from='builder(coroutine Controller.() -> Continuation<Unit>): String'
          CONST String type=kotlin.String value='OK'
    FUN public fun unitFun(): kotlin.Unit
      BLOCK_BODY
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          CALL 'builder(coroutine Controller.() -> Continuation<Unit>): String' type=kotlin.String operator=null
            c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
              BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
                FUN local final fun Controller.<anonymous>(): kotlin.Unit
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='<anonymous>() on Controller: Unit'
                CALLABLE_REFERENCE '<anonymous>() on Controller: Unit' type=Controller.() -> kotlin.Unit operator=LAMBDA
