MODULE <test-module>
  FILE /inlineSuspendFunction.kt
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Controller'
      FUN public final fun withValue(v: kotlin.String, x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL 'resume(String): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR 'value-parameter x: Continuation<String>' type=kotlin.coroutines.Continuation<kotlin.String> operator=null
            data: GET_VAR 'value-parameter v: String' type=kotlin.String operator=null
      FUN public final inline suspend fun suspendInline(v: kotlin.String, x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL 'withValue(String, Continuation<String>): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'Controller' type=Controller
            v: GET_VAR 'value-parameter v: String' type=kotlin.String operator=null
            x: GET_VAR 'value-parameter x: Continuation<String>' type=kotlin.coroutines.Continuation<kotlin.String> operator=null
      FUN public final inline suspend fun suspendInline(crossinline b: () -> kotlin.String, x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL 'suspendInline(String, Continuation<String>): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'Controller' type=Controller
            v: CALL 'invoke(): String' type=kotlin.String operator=INVOKE
              $this: GET_VAR 'value-parameter crossinline b: () -> String' type=() -> kotlin.String operator=VARIABLE_AS_FUNCTION
            x: GET_VAR 'value-parameter x: Continuation<String>' type=kotlin.coroutines.Continuation<kotlin.String> operator=null
      FUN public final inline suspend fun <reified T : kotlin.Any> suspendInline(x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL 'suspendInline(crossinline () -> String, Continuation<String>): Unit' type=kotlin.Unit operator=null
            $this: THIS of 'Controller' type=Controller
            b: BLOCK type=() -> kotlin.String! operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.String!
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(): String!'
                    CALL '<get-simpleName>() on Class<T>: String!' type=kotlin.String! operator=GET_PROPERTY
                      $receiver: CALL '<get-java>() on KClass<T>: Class<T>' type=java.lang.Class<T> operator=GET_PROPERTY
                        $receiver: CLASS_REFERENCE '<reified T : Any>' type=kotlin.reflect.KClass<T>
              CALLABLE_REFERENCE '<anonymous>(): String!' type=() -> kotlin.String! operator=LAMBDA
            x: GET_VAR 'value-parameter x: Continuation<String>' type=kotlin.coroutines.Continuation<kotlin.String> operator=null
    FUN public fun builder(coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
      BLOCK_BODY
        CALL 'resume(Unit): Unit' type=kotlin.Unit operator=null
          $this: CALL 'invoke(Controller): Continuation<Unit>' type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
            $this: GET_VAR 'value-parameter coroutine c: Controller.() -> Continuation<Unit>' type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
            p1: CALL 'constructor Controller()' type=Controller operator=null
          data: GET_OBJECT 'Unit' type=kotlin.Unit
    CLASS CLASS OK
      CONSTRUCTOR public constructor OK()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='OK'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.String
          CONST String type=kotlin.String value=''
        CALL 'builder(coroutine Controller.() -> Continuation<Unit>): Unit' type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  SET_VAR 'result: String' type=kotlin.Unit operator=EQ
                    CALL 'suspendInline(String): String' type=kotlin.String operator=null
                      $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                      v: CONST String type=kotlin.String value='56'
                  WHEN type=kotlin.Unit operator=IF
                    if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                        arg0: GET_VAR 'result: String' type=kotlin.String operator=null
                        arg1: CONST String type=kotlin.String value='56'
                    then: THROW type=kotlin.Nothing
                      CALL 'constructor RuntimeException(String!)' type=java.lang.RuntimeException operator=null
                        p0: CONST String type=kotlin.String value='fail 1'
                  SET_VAR 'result: String' type=kotlin.Unit operator=EQ
                    CALL 'suspendInline(crossinline () -> String): String' type=kotlin.String operator=null
                      $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                      b: BLOCK type=() -> kotlin.String operator=LAMBDA
                        FUN local final fun <anonymous>(): kotlin.String
                          BLOCK_BODY
                            RETURN type=kotlin.Nothing from='<anonymous>(): String'
                              CONST String type=kotlin.String value='57'
                        CALLABLE_REFERENCE '<anonymous>(): String' type=() -> kotlin.String operator=LAMBDA
                  WHEN type=kotlin.Unit operator=IF
                    if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                        arg0: GET_VAR 'result: String' type=kotlin.String operator=null
                        arg1: CONST String type=kotlin.String value='57'
                    then: THROW type=kotlin.Nothing
                      CALL 'constructor RuntimeException(String!)' type=java.lang.RuntimeException operator=null
                        p0: CONST String type=kotlin.String value='fail 2'
                  RETURN type=kotlin.Nothing from='<anonymous>() on Controller: Unit'
                    SET_VAR 'result: String' type=kotlin.Unit operator=EQ
                      CALL 'suspendInline(): String' type=kotlin.String operator=null
                        $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
              CALLABLE_REFERENCE '<anonymous>() on Controller: Unit' type=Controller.() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from='box(): String'
          GET_VAR 'result: String' type=kotlin.String operator=null
