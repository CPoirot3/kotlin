MODULE <test-module>
  FILE /varValueConflictsWithTable.kt
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='Controller'
      FUN public final suspend fun suspendHere(x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL 'resume(String): Unit' type=kotlin.Unit operator=null
            $this: GET_VAR 'value-parameter x: Continuation<String>' type=kotlin.coroutines.Continuation<kotlin.String> operator=null
            data: CONST String type=kotlin.String value='OK'
    FUN public fun builder(coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
      BLOCK_BODY
        CALL 'resume(Unit): Unit' type=kotlin.Unit operator=null
          $this: CALL 'invoke(Controller): Continuation<Unit>' type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
            $this: GET_VAR 'value-parameter coroutine c: Controller.() -> Continuation<Unit>' type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
            p1: CALL 'constructor Controller()' type=Controller operator=null
          data: GET_OBJECT 'Unit' type=kotlin.Unit
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.String
          CONST String type=kotlin.String value='fail 1'
        CALL 'builder(coroutine Controller.() -> Continuation<Unit>): Unit' type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  BLOCK type=kotlin.Unit operator=FOR_LOOP
                    VAR val tmp0_iterator: kotlin.collections.IntIterator
                      CALL 'iterator(): IntIterator' type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
                        $this: CALL 'rangeTo(Int): IntRange' type=kotlin.ranges.IntRange operator=RANGE
                          $this: CONST Int type=kotlin.Int value='1'
                          other: CONST Int type=kotlin.Int value='1'
                    WHILE label=null operator=FOR_LOOP_INNER_WHILE
                      condition: CALL 'hasNext(): Boolean' type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
                        $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
                      body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
                        VAR val i: kotlin.Int
                          CALL 'next(): Int' type=kotlin.Int operator=FOR_LOOP_NEXT
                            $this: GET_VAR 'tmp0_iterator: IntIterator' type=kotlin.collections.IntIterator operator=null
                        BLOCK type=kotlin.Unit operator=null
                          WHEN type=kotlin.Unit operator=IF
                            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
                              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                                arg0: GET_VAR 'i: Int' type=kotlin.Int operator=null
                                arg1: CONST Int type=kotlin.Int value='1'
                            then: CONTINUE label=null loop.label=null depth=0
                  VAR var s: kotlin.String
                  WHEN type=kotlin.Unit operator=IF
                    if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                      arg0: CALL 'suspendHere(): String' type=kotlin.String operator=null
                        $this: $RECEIVER of '<anonymous>() on Controller: Unit' type=Controller
                      arg1: CONST String type=kotlin.String value='OK'
                    then: BLOCK type=kotlin.Unit operator=null
                      SET_VAR 's: String' type=kotlin.Unit operator=EQ
                        CONST String type=kotlin.String value='OK'
                    else: BLOCK type=kotlin.Unit operator=null
                      SET_VAR 's: String' type=kotlin.Unit operator=EQ
                        CONST String type=kotlin.String value='fail 2'
                  RETURN type=kotlin.Nothing from='<anonymous>() on Controller: Unit'
                    SET_VAR 'result: String' type=kotlin.Unit operator=EQ
                      GET_VAR 's: String' type=kotlin.String operator=null
              CALLABLE_REFERENCE '<anonymous>() on Controller: Unit' type=Controller.() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from='box(): String'
          GET_VAR 'result: String' type=kotlin.String operator=null
