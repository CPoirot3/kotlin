MODULE <test-module>
  FILE /List.kt
    CLASS CLASS MyList
      CONSTRUCTOR public constructor MyList<T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='MyList'
      PROPERTY public open override val size: kotlin.Int
        PROPERTY_GETTER public open override fun <get-size>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='<get-size>(): Int'
              CONST Int type=kotlin.Int value='0'
      FUN public open override fun isEmpty(): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='isEmpty(): Boolean'
            CONST Boolean type=kotlin.Boolean value='true'
      FUN public open override fun contains(o: T): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='contains(T): Boolean'
            CONST Boolean type=kotlin.Boolean value='false'
      FUN public open override fun iterator(): kotlin.collections.Iterator<T>
        BLOCK_BODY
          THROW type=kotlin.Nothing
            CALL 'constructor Error()' type=java.lang.Error operator=null
      FUN public open override fun containsAll(c: kotlin.collections.Collection<T>): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='containsAll(Collection<T>): Boolean'
            CONST Boolean type=kotlin.Boolean value='false'
      FUN public open override fun get(index: kotlin.Int): T
        BLOCK_BODY
          THROW type=kotlin.Nothing
            CALL 'constructor IndexOutOfBoundsException()' type=java.lang.IndexOutOfBoundsException operator=null
      FUN public open override fun indexOf(o: T): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='indexOf(T): Int'
            CONST Int type=kotlin.Int value='-1'
      FUN public open override fun lastIndexOf(o: T): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='lastIndexOf(T): Int'
            CONST Int type=kotlin.Int value='-1'
      FUN public open override fun listIterator(): kotlin.collections.ListIterator<T>
        BLOCK_BODY
          THROW type=kotlin.Nothing
            CALL 'constructor Error()' type=java.lang.Error operator=null
      FUN public open override fun listIterator(index: kotlin.Int): kotlin.collections.ListIterator<T>
        BLOCK_BODY
          THROW type=kotlin.Nothing
            CALL 'constructor Error()' type=java.lang.Error operator=null
      FUN public open override fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.List<T>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='subList(Int, Int): List<T>'
            THIS of 'MyList' type=MyList<T>
      FUN public open override fun hashCode(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='hashCode(): Int'
            CONST Int type=kotlin.Int value='0'
      FUN public open override fun equals(other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='equals(Any?): Boolean'
            CONST Boolean type=kotlin.Boolean value='false'
    FUN public fun expectUoe(block: () -> kotlin.Any): kotlin.Unit
      BLOCK_BODY
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL 'invoke(): Any' type=kotlin.Any operator=INVOKE
              $this: GET_VAR 'value-parameter block: () -> Any' type=() -> kotlin.Any operator=VARIABLE_AS_FUNCTION
            THROW type=kotlin.Nothing
              CALL 'constructor AssertionError()' type=java.lang.AssertionError operator=null
          catch e: BLOCK type=kotlin.Unit operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val list: java.util.List<kotlin.String>
          TYPE_OP operator=CAST typeOperand=java.util.List<kotlin.String>
            CALL 'constructor MyList()' type=MyList<kotlin.String> operator=null
        CALL 'expectUoe(() -> Any): Unit' type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Boolean operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Boolean
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): Boolean'
                  CALL 'add(String!): Boolean' type=kotlin.Boolean operator=null
                    $this: GET_VAR 'list: List<String>' type=java.util.List<kotlin.String> operator=null
                    element: CONST String type=kotlin.String value=''
            CALLABLE_REFERENCE '<anonymous>(): Boolean' type=() -> kotlin.Boolean operator=LAMBDA
        CALL 'expectUoe(() -> Any): Unit' type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Boolean operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Boolean
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): Boolean'
                  CALL 'remove(String!): Boolean' type=kotlin.Boolean operator=null
                    $this: GET_VAR 'list: List<String>' type=java.util.List<kotlin.String> operator=null
                    element: CONST String type=kotlin.String value=''
            CALLABLE_REFERENCE '<anonymous>(): Boolean' type=() -> kotlin.Boolean operator=LAMBDA
        CALL 'expectUoe(() -> Any): Unit' type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Boolean operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Boolean
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): Boolean'
                  CALL 'addAll(Collection<String!>): Boolean' type=kotlin.Boolean operator=null
                    $this: GET_VAR 'list: List<String>' type=java.util.List<kotlin.String> operator=null
                    elements: GET_VAR 'list: List<String>' type=java.util.List<kotlin.String> operator=null
            CALLABLE_REFERENCE '<anonymous>(): Boolean' type=() -> kotlin.Boolean operator=LAMBDA
        CALL 'expectUoe(() -> Any): Unit' type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Boolean operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Boolean
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): Boolean'
                  CALL 'removeAll(Collection<String!>): Boolean' type=kotlin.Boolean operator=null
                    $this: GET_VAR 'list: List<String>' type=java.util.List<kotlin.String> operator=null
                    elements: GET_VAR 'list: List<String>' type=java.util.List<kotlin.String> operator=null
            CALLABLE_REFERENCE '<anonymous>(): Boolean' type=() -> kotlin.Boolean operator=LAMBDA
        CALL 'expectUoe(() -> Any): Unit' type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Boolean operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Boolean
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): Boolean'
                  CALL 'retainAll(Collection<String!>): Boolean' type=kotlin.Boolean operator=null
                    $this: GET_VAR 'list: List<String>' type=java.util.List<kotlin.String> operator=null
                    elements: GET_VAR 'list: List<String>' type=java.util.List<kotlin.String> operator=null
            CALLABLE_REFERENCE '<anonymous>(): Boolean' type=() -> kotlin.Boolean operator=LAMBDA
        CALL 'expectUoe(() -> Any): Unit' type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): Unit'
                  CALL 'clear(): Unit' type=kotlin.Unit operator=null
                    $this: GET_VAR 'list: List<String>' type=java.util.List<kotlin.String> operator=null
            CALLABLE_REFERENCE '<anonymous>(): Unit' type=() -> kotlin.Unit operator=LAMBDA
        CALL 'expectUoe(() -> Any): Unit' type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.String! operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String!
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): String!'
                  CALL 'set(Int, String!): String!' type=kotlin.String! operator=null
                    $this: GET_VAR 'list: List<String>' type=java.util.List<kotlin.String> operator=null
                    p0: CONST Int type=kotlin.Int value='0'
                    p1: CONST String type=kotlin.String value=''
            CALLABLE_REFERENCE '<anonymous>(): String!' type=() -> kotlin.String! operator=LAMBDA
        CALL 'expectUoe(() -> Any): Unit' type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): Unit'
                  CALL 'add(Int, String!): Unit' type=kotlin.Unit operator=null
                    $this: GET_VAR 'list: List<String>' type=java.util.List<kotlin.String> operator=null
                    p0: CONST Int type=kotlin.Int value='0'
                    p1: CONST String type=kotlin.String value=''
            CALLABLE_REFERENCE '<anonymous>(): Unit' type=() -> kotlin.Unit operator=LAMBDA
        CALL 'expectUoe(() -> Any): Unit' type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.String! operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String!
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): String!'
                  CALL 'remove(Int): String!' type=kotlin.String! operator=null
                    $this: GET_VAR 'list: List<String>' type=java.util.List<kotlin.String> operator=null
                    p0: CONST Int type=kotlin.Int value='0'
            CALLABLE_REFERENCE '<anonymous>(): String!' type=() -> kotlin.String! operator=LAMBDA
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
