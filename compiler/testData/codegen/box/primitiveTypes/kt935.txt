MODULE <test-module>
  FILE /kt935.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var bottles: kotlin.Int
          CONST Int type=kotlin.Int value='10'
        WHILE label=null operator=WHILE_LOOP
          condition: CALL 'GT0(Int): Boolean' type=kotlin.Boolean operator=GT
            arg0: CALL 'compareTo(Int): Int' type=kotlin.Int operator=GT
              $this: GET_VAR 'bottles: Int' type=kotlin.Int operator=null
              other: CONST Int type=kotlin.Int value='0'
          body: BLOCK type=kotlin.Unit operator=null
            CALL 'print(String): Unit' type=kotlin.Unit operator=null
              message: CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
                $this: CALL 'bottlesOfBeer(Int): String' type=kotlin.String operator=null
                  count: GET_VAR 'bottles: Int' type=kotlin.Int operator=null
                other: CONST String type=kotlin.String value=' on the wall, '
            CALL 'println(String): Unit' type=kotlin.Unit operator=null
              message: CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
                $this: CALL 'bottlesOfBeer(Int): String' type=kotlin.String operator=null
                  count: GET_VAR 'bottles: Int' type=kotlin.Int operator=null
                other: CONST String type=kotlin.String value='.'
            CALL 'print(String): Unit' type=kotlin.Unit operator=null
              message: CONST String type=kotlin.String value='Take one down, pass it around, '
            WHEN type=kotlin.Unit operator=IF
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: BLOCK type=kotlin.Int operator=PREFIX_DECR
                  VAR val tmp0: kotlin.Int
                    CALL 'dec(): Int' type=kotlin.Int operator=PREFIX_DECR
                      $this: GET_VAR 'bottles: Int' type=kotlin.Int operator=PREFIX_DECR
                  SET_VAR 'bottles: Int' type=kotlin.Unit operator=PREFIX_DECR
                    GET_VAR 'tmp0: Int' type=kotlin.Int operator=null
                  GET_VAR 'tmp0: Int' type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='0'
              then: BLOCK type=kotlin.Unit operator=null
                CALL 'println(String): Unit' type=kotlin.Unit operator=null
                  message: CONST String type=kotlin.String value='no more bottles of beer on the wall.'
              else: BLOCK type=kotlin.Unit operator=null
                CALL 'println(String): Unit' type=kotlin.Unit operator=null
                  message: CALL 'plus(Any?): String' type=kotlin.String operator=PLUS
                    $this: CALL 'bottlesOfBeer(Int): String' type=kotlin.String operator=null
                      count: GET_VAR 'bottles: Int' type=kotlin.Int operator=null
                    other: CONST String type=kotlin.String value=' on the wall.'
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
    FUN public fun bottlesOfBeer(count: kotlin.Int): kotlin.String
      BLOCK_BODY
        VAR val result: java.lang.StringBuilder
          CALL 'constructor StringBuilder()' type=java.lang.StringBuilder operator=null
        CALL 'plusAssign(Any) on StringBuilder: Unit' type=kotlin.Unit operator=PLUSEQ
          $receiver: GET_VAR 'result: StringBuilder' type=java.lang.StringBuilder operator=PLUSEQ
          o: GET_VAR 'value-parameter count: Int' type=kotlin.Int operator=null
        CALL 'plusAssign(Any) on StringBuilder: Unit' type=kotlin.Unit operator=PLUSEQ
          $receiver: GET_VAR 'result: StringBuilder' type=java.lang.StringBuilder operator=PLUSEQ
          o: WHEN type=kotlin.String operator=IF
            if: CALL 'GT0(Int): Boolean' type=kotlin.Boolean operator=GT
              arg0: CALL 'compareTo(Int): Int' type=kotlin.Int operator=GT
                $this: GET_VAR 'value-parameter count: Int' type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='1'
            then: CONST String type=kotlin.String value=' bottles of beer'
            else: CONST String type=kotlin.String value=' bottle of beer'
        RETURN type=kotlin.Nothing from='bottlesOfBeer(Int): String'
          BLOCK type=kotlin.String operator=ELVIS
            VAR val tmp0_elvis_lhs: kotlin.String
              CALL 'toString(): String' type=kotlin.String operator=null
                $this: GET_VAR 'result: StringBuilder' type=java.lang.StringBuilder operator=null
            WHEN type=kotlin.String operator=null
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR 'tmp0_elvis_lhs: String' type=kotlin.String operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CONST String type=kotlin.String value=''
              else: GET_VAR 'tmp0_elvis_lhs: String' type=kotlin.String operator=null
    FUN public fun print(message: kotlin.String): kotlin.Unit
      BLOCK_BODY
        BLOCK type=kotlin.Unit? operator=SAFE_CALL
          VAR val tmp0_safe_receiver: java.io.PrintStream!
            GET_BACKING_FIELD 'out: PrintStream!' type=java.io.PrintStream! operator=GET_PROPERTY
          WHEN type=kotlin.Unit? operator=SAFE_CALL
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'tmp0_safe_receiver: PrintStream!' type=java.io.PrintStream! operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CONST Null type=kotlin.Nothing? value='null'
            else: CALL 'print(String!): Unit' type=kotlin.Unit operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.io.PrintStream
                GET_VAR 'tmp0_safe_receiver: PrintStream!' type=java.io.PrintStream! operator=null
              p0: GET_VAR 'value-parameter message: String' type=kotlin.String operator=null
    FUN public fun println(message: kotlin.String): kotlin.Unit
      BLOCK_BODY
        BLOCK type=kotlin.Unit? operator=SAFE_CALL
          VAR val tmp0_safe_receiver: java.io.PrintStream!
            GET_BACKING_FIELD 'out: PrintStream!' type=java.io.PrintStream! operator=GET_PROPERTY
          WHEN type=kotlin.Unit? operator=SAFE_CALL
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR 'tmp0_safe_receiver: PrintStream!' type=java.io.PrintStream! operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CONST Null type=kotlin.Nothing? value='null'
            else: CALL 'println(String!): Unit' type=kotlin.Unit operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.io.PrintStream
                GET_VAR 'tmp0_safe_receiver: PrintStream!' type=java.io.PrintStream! operator=null
              p0: GET_VAR 'value-parameter message: String' type=kotlin.String operator=null
    FUN public operator fun java.lang.StringBuilder.plusAssign(o: kotlin.Any): kotlin.Unit
      BLOCK_BODY
        CALL 'append(Any!): StringBuilder!' type=java.lang.StringBuilder! operator=null
          $this: $RECEIVER of 'plusAssign(Any) on StringBuilder: Unit' type=java.lang.StringBuilder
          p0: GET_VAR 'value-parameter o: Any' type=kotlin.Any operator=null
    PROPERTY public val <T> kotlin.Array<T>.isEmpty: kotlin.Boolean
      PROPERTY_GETTER public fun kotlin.Array<T>.<get-isEmpty>(): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='<get-isEmpty>() on Array<T>: Boolean'
            CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CALL '<get-size>(): Int' type=kotlin.Int operator=GET_PROPERTY
                $this: $RECEIVER of 'isEmpty: Boolean on Array<T>' type=kotlin.Array<T>
              arg1: CONST Int type=kotlin.Int value='0'
