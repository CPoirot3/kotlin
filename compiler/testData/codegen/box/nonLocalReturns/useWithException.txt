MODULE <test-module>
  FILE /useWithException.kt
    CLASS CLASS MyException
      CONSTRUCTOR public constructor MyException(message: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Exception(String!)'
            p0: GET_VAR 'value-parameter message: String' type=kotlin.String operator=null
          INSTANCE_INITIALIZER_CALL classDescriptor='MyException'
    CLASS CLASS Holder
      CONSTRUCTOR public constructor Holder(value: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          SET_BACKING_FIELD 'value: String' type=kotlin.Unit operator=null
            receiver: THIS of 'Holder' type=Holder
            value: GET_VAR 'value-parameter value: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='Holder'
      PROPERTY public final var value: kotlin.String
        EXPRESSION_BODY
          GET_VAR 'value-parameter value: String' type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator fun plusAssign(s: kotlin.String?): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Unit operator=PLUSEQ
            VAR val tmp0_this: Holder
              THIS of 'Holder' type=Holder
            CALL '<set-value>(String): Unit' type=kotlin.Unit operator=PLUSEQ
              $this: GET_VAR 'tmp0_this: Holder' type=Holder operator=null
              <set-?>: CALL 'plus(Any?): String' type=kotlin.String operator=PLUSEQ
                $this: CALL '<get-value>(): String' type=kotlin.String operator=PLUSEQ
                  $this: GET_VAR 'tmp0_this: Holder' type=Holder operator=null
                other: GET_VAR 'value-parameter s: String?' type=kotlin.String? operator=null
          WHEN type=kotlin.Unit operator=IF
            if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EXCLEQ
                arg0: GET_VAR 'value-parameter s: String?' type=kotlin.String? operator=null
                arg1: CONST String type=kotlin.String value='closed'
            then: BLOCK type=kotlin.Unit operator=null
              BLOCK type=kotlin.Unit operator=PLUSEQ
                VAR val tmp1_this: Holder
                  THIS of 'Holder' type=Holder
                CALL '<set-value>(String): Unit' type=kotlin.Unit operator=PLUSEQ
                  $this: GET_VAR 'tmp1_this: Holder' type=Holder operator=null
                  <set-?>: CALL 'plus(Any?): String' type=kotlin.String operator=PLUSEQ
                    $this: CALL '<get-value>(): String' type=kotlin.String operator=PLUSEQ
                      $this: GET_VAR 'tmp1_this: Holder' type=Holder operator=null
                    other: CONST String type=kotlin.String value='->'
    CLASS CLASS TestLocal
      CONSTRUCTOR public constructor TestLocal()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='TestLocal'
      PROPERTY public final var status: Holder
        EXPRESSION_BODY
          CALL 'constructor Holder(String)' type=Holder operator=null
            value: CONST String type=kotlin.String value=''
      FUN private final fun underMutexFun(): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Unit operator=PLUSEQ
            VAR val tmp0_this: TestLocal
              THIS of 'TestLocal' type=TestLocal
            CALL 'plusAssign(String?): Unit' type=kotlin.Unit operator=PLUSEQ
              $this: CALL '<get-status>(): Holder' type=Holder operator=PLUSEQ
                $this: GET_VAR 'tmp0_this: TestLocal' type=TestLocal operator=null
              s: CONST String type=kotlin.String value='called'
      FUN public final fun local(): Holder
        BLOCK_BODY
          CALL 'use((TestLocal) -> Unit) on TestLocal: Unit' type=kotlin.Unit operator=null
            $receiver: THIS of 'TestLocal' type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Unit operator=LAMBDA
              FUN local final fun <anonymous>(it: TestLocal): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='<anonymous>(TestLocal): Unit'
                    CALL 'underMutexFun(): Unit' type=kotlin.Unit operator=null
                      $this: THIS of 'TestLocal' type=TestLocal
              CALLABLE_REFERENCE '<anonymous>(TestLocal): Unit' type=(TestLocal) -> kotlin.Unit operator=LAMBDA
          RETURN type=kotlin.Nothing from='local(): Holder'
            CALL '<get-status>(): Holder' type=Holder operator=GET_PROPERTY
              $this: THIS of 'TestLocal' type=TestLocal
      FUN public final fun nonLocalSimple(): Holder
        BLOCK_BODY
          CALL 'use((TestLocal) -> Nothing) on TestLocal: Nothing' type=kotlin.Nothing operator=null
            $receiver: THIS of 'TestLocal' type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
              FUN local final fun <anonymous>(it: TestLocal): kotlin.Nothing
                BLOCK_BODY
                  CALL 'underMutexFun(): Unit' type=kotlin.Unit operator=null
                    $this: THIS of 'TestLocal' type=TestLocal
                  RETURN type=kotlin.Nothing from='nonLocalSimple(): Holder'
                    CALL '<get-status>(): Holder' type=Holder operator=GET_PROPERTY
                      $this: THIS of 'TestLocal' type=TestLocal
              CALLABLE_REFERENCE '<anonymous>(TestLocal): Nothing' type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
          RETURN type=kotlin.Nothing from='nonLocalSimple(): Holder'
            CALL 'constructor Holder(String)' type=Holder operator=null
              value: CONST String type=kotlin.String value='fail'
      FUN public final fun nonLocalWithException(): Holder
        BLOCK_BODY
          CALL 'use((TestLocal) -> Nothing) on TestLocal: Nothing' type=kotlin.Nothing operator=null
            $receiver: THIS of 'TestLocal' type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
              FUN local final fun <anonymous>(it: TestLocal): kotlin.Nothing
                BLOCK_BODY
                  TRY_CATCH type=kotlin.Nothing
                    try: BLOCK type=kotlin.Nothing operator=null
                      CALL 'underMutexFun(): Unit' type=kotlin.Unit operator=null
                        $this: THIS of 'TestLocal' type=TestLocal
                      THROW type=kotlin.Nothing
                        CALL 'constructor MyException(String)' type=MyException operator=null
                          message: CONST String type=kotlin.String value='exception'
                    catch e: BLOCK type=kotlin.Nothing operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp0_this: TestLocal
                          THIS of 'TestLocal' type=TestLocal
                        CALL 'plusAssign(String?): Unit' type=kotlin.Unit operator=PLUSEQ
                          $this: CALL '<get-status>(): Holder' type=Holder operator=PLUSEQ
                            $this: GET_VAR 'tmp0_this: TestLocal' type=TestLocal operator=null
                          s: BLOCK type=kotlin.String operator=EXCLEXCL
                            VAR val tmp2_notnull: kotlin.String?
                              CALL '<get-message>(): String?' type=kotlin.String? operator=GET_PROPERTY
                                $this: GET_VAR 'e: MyException' type=MyException operator=null
                            WHEN type=kotlin.String operator=null
                              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
                                arg0: GET_VAR 'tmp2_notnull: String?' type=kotlin.String? operator=null
                                arg1: CONST Null type=kotlin.Nothing? value='null'
                              then: CALL 'THROW_NPE(): Nothing' type=kotlin.Nothing operator=EXCLEXCL
                              else: GET_VAR 'tmp2_notnull: String?' type=kotlin.String? operator=null
                      RETURN type=kotlin.Nothing from='nonLocalWithException(): Holder'
                        CALL '<get-status>(): Holder' type=Holder operator=GET_PROPERTY
                          $this: THIS of 'TestLocal' type=TestLocal
              CALLABLE_REFERENCE '<anonymous>(TestLocal): Nothing' type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
          RETURN type=kotlin.Nothing from='nonLocalWithException(): Holder'
            CALL 'constructor Holder(String)' type=Holder operator=null
              value: CONST String type=kotlin.String value='fail'
      FUN public final fun nonLocalWithFinally(): Holder
        BLOCK_BODY
          CALL 'use((TestLocal) -> Nothing) on TestLocal: Nothing' type=kotlin.Nothing operator=null
            $receiver: THIS of 'TestLocal' type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
              FUN local final fun <anonymous>(it: TestLocal): kotlin.Nothing
                BLOCK_BODY
                  TRY_CATCH type=kotlin.Nothing
                    try: BLOCK type=kotlin.Nothing operator=null
                      CALL 'underMutexFun(): Unit' type=kotlin.Unit operator=null
                        $this: THIS of 'TestLocal' type=TestLocal
                      RETURN type=kotlin.Nothing from='nonLocalWithFinally(): Holder'
                        CALL 'constructor Holder(String)' type=Holder operator=null
                          value: CONST String type=kotlin.String value='fail'
                    finally: BLOCK type=kotlin.Nothing operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp0_this: TestLocal
                          THIS of 'TestLocal' type=TestLocal
                        CALL 'plusAssign(String?): Unit' type=kotlin.Unit operator=PLUSEQ
                          $this: CALL '<get-status>(): Holder' type=Holder operator=PLUSEQ
                            $this: GET_VAR 'tmp0_this: TestLocal' type=TestLocal operator=null
                          s: CONST String type=kotlin.String value='finally'
                      RETURN type=kotlin.Nothing from='nonLocalWithFinally(): Holder'
                        CALL '<get-status>(): Holder' type=Holder operator=GET_PROPERTY
                          $this: THIS of 'TestLocal' type=TestLocal
              CALLABLE_REFERENCE '<anonymous>(TestLocal): Nothing' type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
          RETURN type=kotlin.Nothing from='nonLocalWithFinally(): Holder'
            CALL 'constructor Holder(String)' type=Holder operator=null
              value: CONST String type=kotlin.String value='fail'
      FUN public final fun nonLocalWithExceptionAndFinally(): Holder
        BLOCK_BODY
          CALL 'use((TestLocal) -> Nothing) on TestLocal: Nothing' type=kotlin.Nothing operator=null
            $receiver: THIS of 'TestLocal' type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
              FUN local final fun <anonymous>(it: TestLocal): kotlin.Nothing
                BLOCK_BODY
                  TRY_CATCH type=kotlin.Nothing
                    try: BLOCK type=kotlin.Nothing operator=null
                      CALL 'underMutexFun(): Unit' type=kotlin.Unit operator=null
                        $this: THIS of 'TestLocal' type=TestLocal
                      THROW type=kotlin.Nothing
                        CALL 'constructor MyException(String)' type=MyException operator=null
                          message: CONST String type=kotlin.String value='exception'
                    catch e: BLOCK type=kotlin.Nothing operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp0_this: TestLocal
                          THIS of 'TestLocal' type=TestLocal
                        CALL 'plusAssign(String?): Unit' type=kotlin.Unit operator=PLUSEQ
                          $this: CALL '<get-status>(): Holder' type=Holder operator=PLUSEQ
                            $this: GET_VAR 'tmp0_this: TestLocal' type=TestLocal operator=null
                          s: CALL '<get-message>(): String?' type=kotlin.String? operator=GET_PROPERTY
                            $this: GET_VAR 'e: MyException' type=MyException operator=null
                      RETURN type=kotlin.Nothing from='nonLocalWithExceptionAndFinally(): Holder'
                        CALL '<get-status>(): Holder' type=Holder operator=GET_PROPERTY
                          $this: THIS of 'TestLocal' type=TestLocal
                    finally: BLOCK type=kotlin.Unit operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp1_this: TestLocal
                          THIS of 'TestLocal' type=TestLocal
                        CALL 'plusAssign(String?): Unit' type=kotlin.Unit operator=PLUSEQ
                          $this: CALL '<get-status>(): Holder' type=Holder operator=PLUSEQ
                            $this: GET_VAR 'tmp1_this: TestLocal' type=TestLocal operator=null
                          s: CONST String type=kotlin.String value='finally'
              CALLABLE_REFERENCE '<anonymous>(TestLocal): Nothing' type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
          RETURN type=kotlin.Nothing from='nonLocalWithExceptionAndFinally(): Holder'
            CALL 'constructor Holder(String)' type=Holder operator=null
              value: CONST String type=kotlin.String value='fail'
      FUN public final fun nonLocalWithExceptionAndFinallyWithReturn(): Holder
        BLOCK_BODY
          CALL 'use((TestLocal) -> Nothing) on TestLocal: Nothing' type=kotlin.Nothing operator=null
            $receiver: THIS of 'TestLocal' type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
              FUN local final fun <anonymous>(it: TestLocal): kotlin.Nothing
                BLOCK_BODY
                  TRY_CATCH type=kotlin.Nothing
                    try: BLOCK type=kotlin.Nothing operator=null
                      CALL 'underMutexFun(): Unit' type=kotlin.Unit operator=null
                        $this: THIS of 'TestLocal' type=TestLocal
                      THROW type=kotlin.Nothing
                        CALL 'constructor MyException(String)' type=MyException operator=null
                          message: CONST String type=kotlin.String value='exception'
                    catch e: BLOCK type=kotlin.Nothing operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp0_this: TestLocal
                          THIS of 'TestLocal' type=TestLocal
                        CALL 'plusAssign(String?): Unit' type=kotlin.Unit operator=PLUSEQ
                          $this: CALL '<get-status>(): Holder' type=Holder operator=PLUSEQ
                            $this: GET_VAR 'tmp0_this: TestLocal' type=TestLocal operator=null
                          s: CALL '<get-message>(): String?' type=kotlin.String? operator=GET_PROPERTY
                            $this: GET_VAR 'e: MyException' type=MyException operator=null
                      RETURN type=kotlin.Nothing from='nonLocalWithExceptionAndFinallyWithReturn(): Holder'
                        CALL 'constructor Holder(String)' type=Holder operator=null
                          value: CONST String type=kotlin.String value='fail'
                    finally: BLOCK type=kotlin.Nothing operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp1_this: TestLocal
                          THIS of 'TestLocal' type=TestLocal
                        CALL 'plusAssign(String?): Unit' type=kotlin.Unit operator=PLUSEQ
                          $this: CALL '<get-status>(): Holder' type=Holder operator=PLUSEQ
                            $this: GET_VAR 'tmp1_this: TestLocal' type=TestLocal operator=null
                          s: CONST String type=kotlin.String value='finally'
                      RETURN type=kotlin.Nothing from='nonLocalWithExceptionAndFinallyWithReturn(): Holder'
                        CALL '<get-status>(): Holder' type=Holder operator=GET_PROPERTY
                          $this: THIS of 'TestLocal' type=TestLocal
              CALLABLE_REFERENCE '<anonymous>(TestLocal): Nothing' type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
          RETURN type=kotlin.Nothing from='nonLocalWithExceptionAndFinallyWithReturn(): Holder'
            CALL 'constructor Holder(String)' type=Holder operator=null
              value: CONST String type=kotlin.String value='fail'
      FUN public final fun nonLocalNestedWithException(): Holder
        BLOCK_BODY
          CALL 'use((TestLocal) -> Nothing) on TestLocal: Nothing' type=kotlin.Nothing operator=null
            $receiver: THIS of 'TestLocal' type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
              FUN local final fun <anonymous>(it: TestLocal): kotlin.Nothing
                BLOCK_BODY
                  TRY_CATCH type=kotlin.Nothing
                    try: BLOCK type=kotlin.Nothing operator=null
                      TRY_CATCH type=kotlin.Nothing
                        try: BLOCK type=kotlin.Nothing operator=null
                          CALL 'underMutexFun(): Unit' type=kotlin.Unit operator=null
                            $this: THIS of 'TestLocal' type=TestLocal
                          THROW type=kotlin.Nothing
                            CALL 'constructor MyException(String)' type=MyException operator=null
                              message: CONST String type=kotlin.String value='exception'
                        catch e: BLOCK type=kotlin.Nothing operator=null
                          BLOCK type=kotlin.Unit operator=PLUSEQ
                            VAR val tmp0_this: TestLocal
                              THIS of 'TestLocal' type=TestLocal
                            CALL 'plusAssign(String?): Unit' type=kotlin.Unit operator=PLUSEQ
                              $this: CALL '<get-status>(): Holder' type=Holder operator=PLUSEQ
                                $this: GET_VAR 'tmp0_this: TestLocal' type=TestLocal operator=null
                              s: CONST String type=kotlin.String value='exception'
                          RETURN type=kotlin.Nothing from='nonLocalNestedWithException(): Holder'
                            CALL 'constructor Holder(String)' type=Holder operator=null
                              value: CONST String type=kotlin.String value='fail'
                        finally: BLOCK type=kotlin.Nothing operator=null
                          BLOCK type=kotlin.Unit operator=PLUSEQ
                            VAR val tmp1_this: TestLocal
                              THIS of 'TestLocal' type=TestLocal
                            CALL 'plusAssign(String?): Unit' type=kotlin.Unit operator=PLUSEQ
                              $this: CALL '<get-status>(): Holder' type=Holder operator=PLUSEQ
                                $this: GET_VAR 'tmp1_this: TestLocal' type=TestLocal operator=null
                              s: CONST String type=kotlin.String value='finally1'
                          RETURN type=kotlin.Nothing from='nonLocalNestedWithException(): Holder'
                            CALL '<get-status>(): Holder' type=Holder operator=GET_PROPERTY
                              $this: THIS of 'TestLocal' type=TestLocal
                    finally: BLOCK type=kotlin.Unit operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp2_this: TestLocal
                          THIS of 'TestLocal' type=TestLocal
                        CALL 'plusAssign(String?): Unit' type=kotlin.Unit operator=PLUSEQ
                          $this: CALL '<get-status>(): Holder' type=Holder operator=PLUSEQ
                            $this: GET_VAR 'tmp2_this: TestLocal' type=TestLocal operator=null
                          s: CONST String type=kotlin.String value='finally2'
              CALLABLE_REFERENCE '<anonymous>(TestLocal): Nothing' type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
          RETURN type=kotlin.Nothing from='nonLocalNestedWithException(): Holder'
            CALL 'constructor Holder(String)' type=Holder operator=null
              value: CONST String type=kotlin.String value='fail'
      FUN public final fun nonLocalNestedFinally(): Holder
        BLOCK_BODY
          CALL 'use((TestLocal) -> Nothing) on TestLocal: Nothing' type=kotlin.Nothing operator=null
            $receiver: THIS of 'TestLocal' type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
              FUN local final fun <anonymous>(it: TestLocal): kotlin.Nothing
                BLOCK_BODY
                  TRY_CATCH type=kotlin.Nothing
                    try: BLOCK type=kotlin.Nothing operator=null
                      TRY_CATCH type=kotlin.Nothing
                        try: BLOCK type=kotlin.Nothing operator=null
                          CALL 'underMutexFun(): Unit' type=kotlin.Unit operator=null
                            $this: THIS of 'TestLocal' type=TestLocal
                          RETURN type=kotlin.Nothing from='nonLocalNestedFinally(): Holder'
                            CALL '<get-status>(): Holder' type=Holder operator=GET_PROPERTY
                              $this: THIS of 'TestLocal' type=TestLocal
                        finally: BLOCK type=Holder operator=null
                          BLOCK type=kotlin.Unit operator=PLUSEQ
                            VAR val tmp0_this: TestLocal
                              THIS of 'TestLocal' type=TestLocal
                            CALL 'plusAssign(String?): Unit' type=kotlin.Unit operator=PLUSEQ
                              $this: CALL '<get-status>(): Holder' type=Holder operator=PLUSEQ
                                $this: GET_VAR 'tmp0_this: TestLocal' type=TestLocal operator=null
                              s: CONST String type=kotlin.String value='finally1'
                          CALL '<get-status>(): Holder' type=Holder operator=GET_PROPERTY
                            $this: THIS of 'TestLocal' type=TestLocal
                    finally: BLOCK type=kotlin.Unit operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp1_this: TestLocal
                          THIS of 'TestLocal' type=TestLocal
                        CALL 'plusAssign(String?): Unit' type=kotlin.Unit operator=PLUSEQ
                          $this: CALL '<get-status>(): Holder' type=Holder operator=PLUSEQ
                            $this: GET_VAR 'tmp1_this: TestLocal' type=TestLocal operator=null
                          s: CONST String type=kotlin.String value='finally2'
              CALLABLE_REFERENCE '<anonymous>(TestLocal): Nothing' type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
          RETURN type=kotlin.Nothing from='nonLocalNestedFinally(): Holder'
            CALL 'constructor Holder(String)' type=Holder operator=null
              value: CONST String type=kotlin.String value='fail'
      FUN public open override fun close(): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Unit operator=PLUSEQ
            VAR val tmp0_this: TestLocal
              THIS of 'TestLocal' type=TestLocal
            CALL 'plusAssign(String?): Unit' type=kotlin.Unit operator=PLUSEQ
              $this: CALL '<get-status>(): Holder' type=Holder operator=PLUSEQ
                $this: GET_VAR 'tmp0_this: TestLocal' type=TestLocal operator=null
              s: CONST String type=kotlin.String value='closed'
          THROW type=kotlin.Nothing
            CALL 'constructor MyException(String)' type=MyException operator=null
              message: CONST String type=kotlin.String value='error'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL 'assertError(Int, String, TestLocal.() -> Unit): Unit' type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='1'
          expected: CONST String type=kotlin.String value='called->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>() on TestLocal: Unit'
                  CALL 'local(): Holder' type=Holder operator=null
                    $this: $RECEIVER of '<anonymous>() on TestLocal: Unit' type=TestLocal
            CALLABLE_REFERENCE '<anonymous>() on TestLocal: Unit' type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        CALL 'assertError(Int, String, TestLocal.() -> Unit): Unit' type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='2'
          expected: CONST String type=kotlin.String value='called->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>() on TestLocal: Unit'
                  CALL 'nonLocalSimple(): Holder' type=Holder operator=null
                    $this: $RECEIVER of '<anonymous>() on TestLocal: Unit' type=TestLocal
            CALLABLE_REFERENCE '<anonymous>() on TestLocal: Unit' type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        CALL 'assertError(Int, String, TestLocal.() -> Unit): Unit' type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='3'
          expected: CONST String type=kotlin.String value='called->exception->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>() on TestLocal: Unit'
                  CALL 'nonLocalWithException(): Holder' type=Holder operator=null
                    $this: $RECEIVER of '<anonymous>() on TestLocal: Unit' type=TestLocal
            CALLABLE_REFERENCE '<anonymous>() on TestLocal: Unit' type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        CALL 'assertError(Int, String, TestLocal.() -> Unit): Unit' type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='4'
          expected: CONST String type=kotlin.String value='called->finally->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>() on TestLocal: Unit'
                  CALL 'nonLocalWithFinally(): Holder' type=Holder operator=null
                    $this: $RECEIVER of '<anonymous>() on TestLocal: Unit' type=TestLocal
            CALLABLE_REFERENCE '<anonymous>() on TestLocal: Unit' type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        CALL 'assertError(Int, String, TestLocal.() -> Unit): Unit' type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='5'
          expected: CONST String type=kotlin.String value='called->exception->finally->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>() on TestLocal: Unit'
                  CALL 'nonLocalWithExceptionAndFinally(): Holder' type=Holder operator=null
                    $this: $RECEIVER of '<anonymous>() on TestLocal: Unit' type=TestLocal
            CALLABLE_REFERENCE '<anonymous>() on TestLocal: Unit' type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        CALL 'assertError(Int, String, TestLocal.() -> Unit): Unit' type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='6'
          expected: CONST String type=kotlin.String value='called->exception->finally->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>() on TestLocal: Unit'
                  CALL 'nonLocalWithExceptionAndFinallyWithReturn(): Holder' type=Holder operator=null
                    $this: $RECEIVER of '<anonymous>() on TestLocal: Unit' type=TestLocal
            CALLABLE_REFERENCE '<anonymous>() on TestLocal: Unit' type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        CALL 'assertError(Int, String, TestLocal.() -> Unit): Unit' type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='7'
          expected: CONST String type=kotlin.String value='called->exception->finally1->finally2->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>() on TestLocal: Unit'
                  CALL 'nonLocalNestedWithException(): Holder' type=Holder operator=null
                    $this: $RECEIVER of '<anonymous>() on TestLocal: Unit' type=TestLocal
            CALLABLE_REFERENCE '<anonymous>() on TestLocal: Unit' type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        CALL 'assertError(Int, String, TestLocal.() -> Unit): Unit' type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='8'
          expected: CONST String type=kotlin.String value='called->finally1->finally2->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>() on TestLocal: Unit'
                  CALL 'nonLocalNestedFinally(): Holder' type=Holder operator=null
                    $this: $RECEIVER of '<anonymous>() on TestLocal: Unit' type=TestLocal
            CALLABLE_REFERENCE '<anonymous>() on TestLocal: Unit' type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from='box(): String'
          CONST String type=kotlin.String value='OK'
    FUN public fun assertError(index: kotlin.Int, expected: kotlin.String, l: TestLocal.() -> kotlin.Unit): kotlin.Unit
      BLOCK_BODY
        VAR val testLocal: TestLocal
          CALL 'constructor TestLocal()' type=TestLocal operator=null
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL 'invoke() on TestLocal: Unit' type=kotlin.Unit operator=INVOKE
              $this: GET_VAR 'value-parameter l: TestLocal.() -> Unit' type=TestLocal.() -> kotlin.Unit operator=VARIABLE_AS_FUNCTION
              $receiver: GET_VAR 'testLocal: TestLocal' type=TestLocal operator=null
            CALL 'fail(String? = ...): Nothing' type=kotlin.Nothing operator=null
              message: STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='fail '
                GET_VAR 'value-parameter index: Int' type=kotlin.Int operator=null
                CONST String type=kotlin.String value=': no error'
          catch e: BLOCK type=kotlin.Unit operator=null
            CALL 'assertEquals(String, String, String? = ...): Unit' type=kotlin.Unit operator=null
              expected: GET_VAR 'value-parameter expected: String' type=kotlin.String operator=null
              actual: CALL '<get-value>(): String' type=kotlin.String operator=GET_PROPERTY
                $this: CALL '<get-status>(): Holder' type=Holder operator=GET_PROPERTY
                  $this: GET_VAR 'testLocal: TestLocal' type=TestLocal operator=null
              message: STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='failed on '
                GET_VAR 'value-parameter index: Int' type=kotlin.Int operator=null
