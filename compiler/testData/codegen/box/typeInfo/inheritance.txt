MODULE <test-module>
  FILE /inheritance.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A<T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
          INSTANCE_INITIALIZER_CALL classDescriptor='A'
      FUN public final fun plus(e: T): B<T>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='plus(T): B<T>'
            CALL 'constructor B(T)' type=B<T> operator=null
              e: GET_VAR 'value-parameter e: T' type=T operator=null
    CLASS CLASS B
      CONSTRUCTOR public constructor B<T>(e: T)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'constructor A()'
          SET_BACKING_FIELD 'e: T' type=kotlin.Unit operator=null
            receiver: THIS of 'B' type=B<T>
            value: GET_VAR 'value-parameter e: T' type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor='B'
      PROPERTY public final val e: T
        EXPRESSION_BODY
          GET_VAR 'value-parameter e: T' type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final fun add(): B<T>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='add(): B<T>'
            CALL 'constructor B(T)' type=B<T> operator=null
              e: CALL '<get-e>(): T' type=T operator=GET_PROPERTY
                $this: THIS of 'B' type=B<T>
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='box(): String'
          WHEN type=kotlin.String operator=IF
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean operator=EQEQ
              arg0: CALL '<get-e>(): String' type=kotlin.String operator=GET_PROPERTY
                $this: CALL 'add(): B<String>' type=B<kotlin.String> operator=null
                  $this: CALL 'plus(String): B<String>' type=B<kotlin.String> operator=null
                    $this: CALL 'constructor A()' type=A<kotlin.String> operator=null
                    e: CONST String type=kotlin.String value='239'
              arg1: CONST String type=kotlin.String value='239'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
